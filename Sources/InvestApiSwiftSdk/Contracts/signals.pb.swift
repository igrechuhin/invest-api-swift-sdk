// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: signals.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

///Тип стратегии.
public enum Tinkoff_Public_Invest_Api_Contract_V1_StrategyType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    
    ///Не определен.
    case unspecified // = 0
    
    ///Техническая стратегия.
    case technical // = 1
    
    ///Фундаментальная стратегия.
    case fundamental // = 2
    case UNRECOGNIZED(Int)
    
    public init() {
        self = .unspecified
    }
    
    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .technical
        case 2: self = .fundamental
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .technical: return 1
        case .fundamental: return 2
        case .UNRECOGNIZED(let i): return i
        }
    }
    
}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_StrategyType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Tinkoff_Public_Invest_Api_Contract_V1_StrategyType] = [
        .unspecified,
        .technical,
        .fundamental,
    ]
}

#endif  // swift(>=4.2)

///Направление сигнала.
public enum Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    
    ///Не определен.
    case unspecified // = 0
    
    ///Покупка.
    case buy // = 1
    
    ///Продажа.
    case sell // = 2
    case UNRECOGNIZED(Int)
    
    public init() {
        self = .unspecified
    }
    
    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .buy
        case 2: self = .sell
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .buy: return 1
        case .sell: return 2
        case .UNRECOGNIZED(let i): return i
        }
    }
    
}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection] = [
        .unspecified,
        .buy,
        .sell,
    ]
}

#endif  // swift(>=4.2)

///Статус сигнала.
public enum Tinkoff_Public_Invest_Api_Contract_V1_SignalState: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    
    ///Не определен.
    case unspecified // = 0
    
    ///Активный сигнал.
    case active // = 1
    
    ///Закрытый сигнал.
    case closed // = 2
    
    ///Все состояния.
    case all // = 3
    case UNRECOGNIZED(Int)
    
    public init() {
        self = .unspecified
    }
    
    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .active
        case 2: self = .closed
        case 3: self = .all
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .active: return 1
        case .closed: return 2
        case .all: return 3
        case .UNRECOGNIZED(let i): return i
        }
    }
    
}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_SignalState: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Tinkoff_Public_Invest_Api_Contract_V1_SignalState] = [
        .unspecified,
        .active,
        .closed,
        .all,
    ]
}

#endif  // swift(>=4.2)

///Запрос стратегий.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///Идентификатор стратегии.
    public var strategyID: String {
        get {return _strategyID ?? String()}
        set {_strategyID = newValue}
    }
    /// Returns true if `strategyID` has been explicitly set.
    public var hasStrategyID: Bool {return self._strategyID != nil}
    /// Clears the value of `strategyID`. Subsequent reads from it will return its default value.
    public mutating func clearStrategyID() {self._strategyID = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    
    fileprivate var _strategyID: String? = nil
}

///Стратегии
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    public var strategies: [Tinkoff_Public_Invest_Api_Contract_V1_Strategy] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

///Стратегия
public struct Tinkoff_Public_Invest_Api_Contract_V1_Strategy {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///Идентификатор стратегии.
    public var strategyID: String = String()
    
    ///Название стратегии.
    public var strategyName: String = String()
    
    ///Описание стратегии.
    public var strategyDescription: String {
        get {return _strategyDescription ?? String()}
        set {_strategyDescription = newValue}
    }
    /// Returns true if `strategyDescription` has been explicitly set.
    public var hasStrategyDescription: Bool {return self._strategyDescription != nil}
    /// Clears the value of `strategyDescription`. Subsequent reads from it will return its default value.
    public mutating func clearStrategyDescription() {self._strategyDescription = nil}
    
    ///Ссылка на страницу с описанием стратегии.
    public var strategyURL: String {
        get {return _strategyURL ?? String()}
        set {_strategyURL = newValue}
    }
    /// Returns true if `strategyURL` has been explicitly set.
    public var hasStrategyURL: Bool {return self._strategyURL != nil}
    /// Clears the value of `strategyURL`. Subsequent reads from it will return its default value.
    public mutating func clearStrategyURL() {self._strategyURL = nil}
    
    ///Тип стратегии.
    public var strategyType: Tinkoff_Public_Invest_Api_Contract_V1_StrategyType = .unspecified
    
    ///Количество активных сигналов.
    public var activeSignals: Int32 = 0
    
    ///Общее количество сигналов.
    public var totalSignals: Int32 = 0
    
    ///Среднее время нахождения сигнала в позиции.
    public var timeInPosition: Int64 = 0
    
    ///Средняя доходность сигнала в стратегии.
    public var averageSignalYield: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _averageSignalYield ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_averageSignalYield = newValue}
    }
    /// Returns true if `averageSignalYield` has been explicitly set.
    public var hasAverageSignalYield: Bool {return self._averageSignalYield != nil}
    /// Clears the value of `averageSignalYield`. Subsequent reads from it will return its default value.
    public mutating func clearAverageSignalYield() {self._averageSignalYield = nil}
    
    ///Средняя доходность сигналов в стратегии за последний год.
    public var averageSignalYieldYear: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _averageSignalYieldYear ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_averageSignalYieldYear = newValue}
    }
    /// Returns true if `averageSignalYieldYear` has been explicitly set.
    public var hasAverageSignalYieldYear: Bool {return self._averageSignalYieldYear != nil}
    /// Clears the value of `averageSignalYieldYear`. Subsequent reads from it will return its default value.
    public mutating func clearAverageSignalYieldYear() {self._averageSignalYieldYear = nil}
    
    ///Доходность стратегии.
    public var yield: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _yield ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_yield = newValue}
    }
    /// Returns true if `yield` has been explicitly set.
    public var hasYield: Bool {return self._yield != nil}
    /// Clears the value of `yield`. Subsequent reads from it will return its default value.
    public mutating func clearYield() {self._yield = nil}
    
    ///Доходность стратегии за последний год.
    public var yieldYear: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _yieldYear ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_yieldYear = newValue}
    }
    /// Returns true if `yieldYear` has been explicitly set.
    public var hasYieldYear: Bool {return self._yieldYear != nil}
    /// Clears the value of `yieldYear`. Subsequent reads from it will return its default value.
    public mutating func clearYieldYear() {self._yieldYear = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    
    fileprivate var _strategyDescription: String? = nil
    fileprivate var _strategyURL: String? = nil
    fileprivate var _averageSignalYield: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _averageSignalYieldYear: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _yield: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _yieldYear: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
}

///Запрос сигналов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///Идентификатор сигнала.
    public var signalID: String {
        get {return _signalID ?? String()}
        set {_signalID = newValue}
    }
    /// Returns true if `signalID` has been explicitly set.
    public var hasSignalID: Bool {return self._signalID != nil}
    /// Clears the value of `signalID`. Subsequent reads from it will return its default value.
    public mutating func clearSignalID() {self._signalID = nil}
    
    ///Идентификатор стратегии.
    public var strategyID: String {
        get {return _strategyID ?? String()}
        set {_strategyID = newValue}
    }
    /// Returns true if `strategyID` has been explicitly set.
    public var hasStrategyID: Bool {return self._strategyID != nil}
    /// Clears the value of `strategyID`. Subsequent reads from it will return its default value.
    public mutating func clearStrategyID() {self._strategyID = nil}
    
    ///Тип стратегии.
    public var strategyType: Tinkoff_Public_Invest_Api_Contract_V1_StrategyType {
        get {return _strategyType ?? .unspecified}
        set {_strategyType = newValue}
    }
    /// Returns true if `strategyType` has been explicitly set.
    public var hasStrategyType: Bool {return self._strategyType != nil}
    /// Clears the value of `strategyType`. Subsequent reads from it will return its default value.
    public mutating func clearStrategyType() {self._strategyType = nil}
    
    ///	Идентификатор бумаги.
    public var instrumentUid: String {
        get {return _instrumentUid ?? String()}
        set {_instrumentUid = newValue}
    }
    /// Returns true if `instrumentUid` has been explicitly set.
    public var hasInstrumentUid: Bool {return self._instrumentUid != nil}
    /// Clears the value of `instrumentUid`. Subsequent reads from it will return its default value.
    public mutating func clearInstrumentUid() {self._instrumentUid = nil}
    
    ///	Дата начала запрашиваемого интервала по UTC.
    public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_from = newValue}
    }
    /// Returns true if `from` has been explicitly set.
    public var hasFrom: Bool {return self._from != nil}
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    public mutating func clearFrom() {self._from = nil}
    
    ///	Дата конца запрашиваемого интервала по UTC.
    public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_to = newValue}
    }
    /// Returns true if `to` has been explicitly set.
    public var hasTo: Bool {return self._to != nil}
    /// Clears the value of `to`. Subsequent reads from it will return its default value.
    public mutating func clearTo() {self._to = nil}
    
    ///	Направление сигнала.
    public var direction: Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection {
        get {return _direction ?? .unspecified}
        set {_direction = newValue}
    }
    /// Returns true if `direction` has been explicitly set.
    public var hasDirection: Bool {return self._direction != nil}
    /// Clears the value of `direction`. Subsequent reads from it will return its default value.
    public mutating func clearDirection() {self._direction = nil}
    
    ///Состояние сигнала.
    public var active: Tinkoff_Public_Invest_Api_Contract_V1_SignalState {
        get {return _active ?? .unspecified}
        set {_active = newValue}
    }
    /// Returns true if `active` has been explicitly set.
    public var hasActive: Bool {return self._active != nil}
    /// Clears the value of `active`. Subsequent reads from it will return its default value.
    public mutating func clearActive() {self._active = nil}
    
    ///Настройки пагинации.
    public var paging: Tinkoff_Public_Invest_Api_Contract_V1_Page {
        get {return _paging ?? Tinkoff_Public_Invest_Api_Contract_V1_Page()}
        set {_paging = newValue}
    }
    /// Returns true if `paging` has been explicitly set.
    public var hasPaging: Bool {return self._paging != nil}
    /// Clears the value of `paging`. Subsequent reads from it will return its default value.
    public mutating func clearPaging() {self._paging = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    
    fileprivate var _signalID: String? = nil
    fileprivate var _strategyID: String? = nil
    fileprivate var _strategyType: Tinkoff_Public_Invest_Api_Contract_V1_StrategyType? = nil
    fileprivate var _instrumentUid: String? = nil
    fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _direction: Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection? = nil
    fileprivate var _active: Tinkoff_Public_Invest_Api_Contract_V1_SignalState? = nil
    fileprivate var _paging: Tinkoff_Public_Invest_Api_Contract_V1_Page? = nil
}

///Сигналы.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///Массив сигналов.
    public var signals: [Tinkoff_Public_Invest_Api_Contract_V1_Signal] = []
    
    ///Данные по пагинации.
    public var paging: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse {
        get {return _paging ?? Tinkoff_Public_Invest_Api_Contract_V1_PageResponse()}
        set {_paging = newValue}
    }
    /// Returns true if `paging` has been explicitly set.
    public var hasPaging: Bool {return self._paging != nil}
    /// Clears the value of `paging`. Subsequent reads from it will return its default value.
    public mutating func clearPaging() {self._paging = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    
    fileprivate var _paging: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse? = nil
}

///Сигнал.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Signal {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///Идентификатор сигнала.
    public var signalID: String {
        get {return _storage._signalID}
        set {_uniqueStorage()._signalID = newValue}
    }
    
    ///Идентификатор стратегии.
    public var strategyID: String {
        get {return _storage._strategyID}
        set {_uniqueStorage()._strategyID = newValue}
    }
    
    ///Название стратегии.
    public var strategyName: String {
        get {return _storage._strategyName}
        set {_uniqueStorage()._strategyName = newValue}
    }
    
    ///Идентификатор бумаги.
    public var instrumentUid: String {
        get {return _storage._instrumentUid}
        set {_uniqueStorage()._instrumentUid = newValue}
    }
    
    ///Дата и время создания сигнала по UTC.
    public var createDt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _storage._createDt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_uniqueStorage()._createDt = newValue}
    }
    /// Returns true if `createDt` has been explicitly set.
    public var hasCreateDt: Bool {return _storage._createDt != nil}
    /// Clears the value of `createDt`. Subsequent reads from it will return its default value.
    public mutating func clearCreateDt() {_uniqueStorage()._createDt = nil}
    
    ///Направление сигнала.
    public var direction: Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection {
        get {return _storage._direction}
        set {_uniqueStorage()._direction = newValue}
    }
    
    ///Цена бумаги на момент формирования сигнала.
    public var initialPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _storage._initialPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_uniqueStorage()._initialPrice = newValue}
    }
    /// Returns true if `initialPrice` has been explicitly set.
    public var hasInitialPrice: Bool {return _storage._initialPrice != nil}
    /// Clears the value of `initialPrice`. Subsequent reads from it will return its default value.
    public mutating func clearInitialPrice() {_uniqueStorage()._initialPrice = nil}
    
    ///Дополнительная информация о сигнале.
    public var info: String {
        get {return _storage._info ?? String()}
        set {_uniqueStorage()._info = newValue}
    }
    /// Returns true if `info` has been explicitly set.
    public var hasInfo: Bool {return _storage._info != nil}
    /// Clears the value of `info`. Subsequent reads from it will return its default value.
    public mutating func clearInfo() {_uniqueStorage()._info = nil}
    
    ///Название сигнала.
    public var name: String {
        get {return _storage._name}
        set {_uniqueStorage()._name = newValue}
    }
    
    ///Целевая цена.
    public var targetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _storage._targetPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_uniqueStorage()._targetPrice = newValue}
    }
    /// Returns true if `targetPrice` has been explicitly set.
    public var hasTargetPrice: Bool {return _storage._targetPrice != nil}
    /// Clears the value of `targetPrice`. Subsequent reads from it will return its default value.
    public mutating func clearTargetPrice() {_uniqueStorage()._targetPrice = nil}
    
    ///Дата и время дедлайна сигнала по UTC.
    public var endDt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _storage._endDt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_uniqueStorage()._endDt = newValue}
    }
    /// Returns true if `endDt` has been explicitly set.
    public var hasEndDt: Bool {return _storage._endDt != nil}
    /// Clears the value of `endDt`. Subsequent reads from it will return its default value.
    public mutating func clearEndDt() {_uniqueStorage()._endDt = nil}
    
    ///Вероятность сигнала.
    public var probability: Int32 {
        get {return _storage._probability ?? 0}
        set {_uniqueStorage()._probability = newValue}
    }
    /// Returns true if `probability` has been explicitly set.
    public var hasProbability: Bool {return _storage._probability != nil}
    /// Clears the value of `probability`. Subsequent reads from it will return its default value.
    public mutating func clearProbability() {_uniqueStorage()._probability = nil}
    
    ///Порог закрытия сигнала по стоплосс.
    public var stoploss: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _storage._stoploss ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_uniqueStorage()._stoploss = newValue}
    }
    /// Returns true if `stoploss` has been explicitly set.
    public var hasStoploss: Bool {return _storage._stoploss != nil}
    /// Clears the value of `stoploss`. Subsequent reads from it will return its default value.
    public mutating func clearStoploss() {_uniqueStorage()._stoploss = nil}
    
    ///Цена закрытия сигнала.
    public var closePrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
        get {return _storage._closePrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
        set {_uniqueStorage()._closePrice = newValue}
    }
    /// Returns true if `closePrice` has been explicitly set.
    public var hasClosePrice: Bool {return _storage._closePrice != nil}
    /// Clears the value of `closePrice`. Subsequent reads from it will return its default value.
    public mutating func clearClosePrice() {_uniqueStorage()._closePrice = nil}
    
    ///Дата и время закрытия сигнала по UTC.
    public var closeDt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _storage._closeDt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_uniqueStorage()._closeDt = newValue}
    }
    /// Returns true if `closeDt` has been explicitly set.
    public var hasCloseDt: Bool {return _storage._closeDt != nil}
    /// Clears the value of `closeDt`. Subsequent reads from it will return its default value.
    public mutating func clearCloseDt() {_uniqueStorage()._closeDt = nil}
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tinkoff_Public_Invest_Api_Contract_V1_StrategyType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_SignalState: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Strategy: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Signal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tinkoff.public.invest.api.contract.v1"

extension Tinkoff_Public_Invest_Api_Contract_V1_StrategyType: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "STRATEGY_TYPE_UNSPECIFIED"),
        1: .same(proto: "STRATEGY_TYPE_TECHNICAL"),
        2: .same(proto: "STRATEGY_TYPE_FUNDAMENTAL"),
    ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "SIGNAL_DIRECTION_UNSPECIFIED"),
        1: .same(proto: "SIGNAL_DIRECTION_BUY"),
        2: .same(proto: "SIGNAL_DIRECTION_SELL"),
    ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_SignalState: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "SIGNAL_STATE_UNSPECIFIED"),
        1: .same(proto: "SIGNAL_STATE_ACTIVE"),
        2: .same(proto: "SIGNAL_STATE_CLOSED"),
        3: .same(proto: "SIGNAL_STATE_ALL"),
    ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetStrategiesRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "strategy_id"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self._strategyID) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._strategyID {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest) -> Bool {
        if lhs._strategyID != rhs._strategyID {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetStrategiesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "strategies"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.strategies) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.strategies.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.strategies, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse) -> Bool {
        if lhs.strategies != rhs.strategies {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Strategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Strategy"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "strategy_id"),
        2: .standard(proto: "strategy_name"),
        3: .standard(proto: "strategy_description"),
        4: .standard(proto: "strategy_url"),
        5: .standard(proto: "strategy_type"),
        6: .standard(proto: "active_signals"),
        7: .standard(proto: "total_signals"),
        8: .standard(proto: "time_in_position"),
        9: .standard(proto: "average_signal_yield"),
        10: .standard(proto: "average_signal_yield_year"),
        11: .same(proto: "yield"),
        12: .standard(proto: "yield_year"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.strategyID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.strategyName) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self._strategyDescription) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self._strategyURL) }()
            case 5: try { try decoder.decodeSingularEnumField(value: &self.strategyType) }()
            case 6: try { try decoder.decodeSingularInt32Field(value: &self.activeSignals) }()
            case 7: try { try decoder.decodeSingularInt32Field(value: &self.totalSignals) }()
            case 8: try { try decoder.decodeSingularInt64Field(value: &self.timeInPosition) }()
            case 9: try { try decoder.decodeSingularMessageField(value: &self._averageSignalYield) }()
            case 10: try { try decoder.decodeSingularMessageField(value: &self._averageSignalYieldYear) }()
            case 11: try { try decoder.decodeSingularMessageField(value: &self._yield) }()
            case 12: try { try decoder.decodeSingularMessageField(value: &self._yieldYear) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.strategyID.isEmpty {
            try visitor.visitSingularStringField(value: self.strategyID, fieldNumber: 1)
        }
        if !self.strategyName.isEmpty {
            try visitor.visitSingularStringField(value: self.strategyName, fieldNumber: 2)
        }
        try { if let v = self._strategyDescription {
            try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._strategyURL {
            try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        } }()
        if self.strategyType != .unspecified {
            try visitor.visitSingularEnumField(value: self.strategyType, fieldNumber: 5)
        }
        if self.activeSignals != 0 {
            try visitor.visitSingularInt32Field(value: self.activeSignals, fieldNumber: 6)
        }
        if self.totalSignals != 0 {
            try visitor.visitSingularInt32Field(value: self.totalSignals, fieldNumber: 7)
        }
        if self.timeInPosition != 0 {
            try visitor.visitSingularInt64Field(value: self.timeInPosition, fieldNumber: 8)
        }
        try { if let v = self._averageSignalYield {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
        } }()
        try { if let v = self._averageSignalYieldYear {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        } }()
        try { if let v = self._yield {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        } }()
        try { if let v = self._yieldYear {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Strategy, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Strategy) -> Bool {
        if lhs.strategyID != rhs.strategyID {return false}
        if lhs.strategyName != rhs.strategyName {return false}
        if lhs._strategyDescription != rhs._strategyDescription {return false}
        if lhs._strategyURL != rhs._strategyURL {return false}
        if lhs.strategyType != rhs.strategyType {return false}
        if lhs.activeSignals != rhs.activeSignals {return false}
        if lhs.totalSignals != rhs.totalSignals {return false}
        if lhs.timeInPosition != rhs.timeInPosition {return false}
        if lhs._averageSignalYield != rhs._averageSignalYield {return false}
        if lhs._averageSignalYieldYear != rhs._averageSignalYieldYear {return false}
        if lhs._yield != rhs._yield {return false}
        if lhs._yieldYear != rhs._yieldYear {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetSignalsRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "signal_id"),
        2: .standard(proto: "strategy_id"),
        3: .standard(proto: "strategy_type"),
        4: .standard(proto: "instrument_uid"),
        5: .same(proto: "from"),
        6: .same(proto: "to"),
        7: .same(proto: "direction"),
        8: .same(proto: "active"),
        9: .same(proto: "paging"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self._signalID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self._strategyID) }()
            case 3: try { try decoder.decodeSingularEnumField(value: &self._strategyType) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self._instrumentUid) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._from) }()
            case 6: try { try decoder.decodeSingularMessageField(value: &self._to) }()
            case 7: try { try decoder.decodeSingularEnumField(value: &self._direction) }()
            case 8: try { try decoder.decodeSingularEnumField(value: &self._active) }()
            case 9: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._signalID {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._strategyID {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._strategyType {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._instrumentUid {
            try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._from {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._to {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        } }()
        try { if let v = self._direction {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
        } }()
        try { if let v = self._active {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
        } }()
        try { if let v = self._paging {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest) -> Bool {
        if lhs._signalID != rhs._signalID {return false}
        if lhs._strategyID != rhs._strategyID {return false}
        if lhs._strategyType != rhs._strategyType {return false}
        if lhs._instrumentUid != rhs._instrumentUid {return false}
        if lhs._from != rhs._from {return false}
        if lhs._to != rhs._to {return false}
        if lhs._direction != rhs._direction {return false}
        if lhs._active != rhs._active {return false}
        if lhs._paging != rhs._paging {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetSignalsResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "signals"),
        2: .same(proto: "paging"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.signals) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.signals.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.signals, fieldNumber: 1)
        }
        try { if let v = self._paging {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse) -> Bool {
        if lhs.signals != rhs.signals {return false}
        if lhs._paging != rhs._paging {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Signal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Signal"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "signal_id"),
        2: .standard(proto: "strategy_id"),
        3: .standard(proto: "strategy_name"),
        4: .standard(proto: "instrument_uid"),
        5: .standard(proto: "create_dt"),
        6: .same(proto: "direction"),
        7: .standard(proto: "initial_price"),
        8: .same(proto: "info"),
        9: .same(proto: "name"),
        10: .standard(proto: "target_price"),
        11: .standard(proto: "end_dt"),
        12: .same(proto: "probability"),
        13: .same(proto: "stoploss"),
        14: .standard(proto: "close_price"),
        15: .standard(proto: "close_dt"),
    ]
    
    fileprivate class _StorageClass: @unchecked Sendable {
        var _signalID: String = String()
        var _strategyID: String = String()
        var _strategyName: String = String()
        var _instrumentUid: String = String()
        var _createDt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
        var _direction: Tinkoff_Public_Invest_Api_Contract_V1_SignalDirection = .unspecified
        var _initialPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
        var _info: String? = nil
        var _name: String = String()
        var _targetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
        var _endDt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
        var _probability: Int32? = nil
        var _stoploss: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
        var _closePrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
        var _closeDt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _signalID = source._signalID
            _strategyID = source._strategyID
            _strategyName = source._strategyName
            _instrumentUid = source._instrumentUid
            _createDt = source._createDt
            _direction = source._direction
            _initialPrice = source._initialPrice
            _info = source._info
            _name = source._name
            _targetPrice = source._targetPrice
            _endDt = source._endDt
            _probability = source._probability
            _stoploss = source._stoploss
            _closePrice = source._closePrice
            _closeDt = source._closeDt
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularStringField(value: &_storage._signalID) }()
                case 2: try { try decoder.decodeSingularStringField(value: &_storage._strategyID) }()
                case 3: try { try decoder.decodeSingularStringField(value: &_storage._strategyName) }()
                case 4: try { try decoder.decodeSingularStringField(value: &_storage._instrumentUid) }()
                case 5: try { try decoder.decodeSingularMessageField(value: &_storage._createDt) }()
                case 6: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
                case 7: try { try decoder.decodeSingularMessageField(value: &_storage._initialPrice) }()
                case 8: try { try decoder.decodeSingularStringField(value: &_storage._info) }()
                case 9: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
                case 10: try { try decoder.decodeSingularMessageField(value: &_storage._targetPrice) }()
                case 11: try { try decoder.decodeSingularMessageField(value: &_storage._endDt) }()
                case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._probability) }()
                case 13: try { try decoder.decodeSingularMessageField(value: &_storage._stoploss) }()
                case 14: try { try decoder.decodeSingularMessageField(value: &_storage._closePrice) }()
                case 15: try { try decoder.decodeSingularMessageField(value: &_storage._closeDt) }()
                default: break
                }
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            if !_storage._signalID.isEmpty {
                try visitor.visitSingularStringField(value: _storage._signalID, fieldNumber: 1)
            }
            if !_storage._strategyID.isEmpty {
                try visitor.visitSingularStringField(value: _storage._strategyID, fieldNumber: 2)
            }
            if !_storage._strategyName.isEmpty {
                try visitor.visitSingularStringField(value: _storage._strategyName, fieldNumber: 3)
            }
            if !_storage._instrumentUid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._instrumentUid, fieldNumber: 4)
            }
            try { if let v = _storage._createDt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            } }()
            if _storage._direction != .unspecified {
                try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 6)
            }
            try { if let v = _storage._initialPrice {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            } }()
            try { if let v = _storage._info {
                try visitor.visitSingularStringField(value: v, fieldNumber: 8)
            } }()
            if !_storage._name.isEmpty {
                try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
            }
            try { if let v = _storage._targetPrice {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            } }()
            try { if let v = _storage._endDt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            } }()
            try { if let v = _storage._probability {
                try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
            } }()
            try { if let v = _storage._stoploss {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            } }()
            try { if let v = _storage._closePrice {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            } }()
            try { if let v = _storage._closeDt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Signal, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Signal) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._signalID != rhs_storage._signalID {return false}
                if _storage._strategyID != rhs_storage._strategyID {return false}
                if _storage._strategyName != rhs_storage._strategyName {return false}
                if _storage._instrumentUid != rhs_storage._instrumentUid {return false}
                if _storage._createDt != rhs_storage._createDt {return false}
                if _storage._direction != rhs_storage._direction {return false}
                if _storage._initialPrice != rhs_storage._initialPrice {return false}
                if _storage._info != rhs_storage._info {return false}
                if _storage._name != rhs_storage._name {return false}
                if _storage._targetPrice != rhs_storage._targetPrice {return false}
                if _storage._endDt != rhs_storage._endDt {return false}
                if _storage._probability != rhs_storage._probability {return false}
                if _storage._stoploss != rhs_storage._stoploss {return false}
                if _storage._closePrice != rhs_storage._closePrice {return false}
                if _storage._closeDt != rhs_storage._closeDt {return false}
                return true
            }
            if !storagesAreEqual {return false}
        }
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
