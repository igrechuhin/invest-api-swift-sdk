//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: signals.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///Сервис для получения технических сигналов и мнений аналитиков по инструментам.
///
/// Usage: instantiate `Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClient`, then call methods of this protocol to make API calls.
public protocol Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? { get }

  func getStrategies(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse>

  func getSignals(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse>
}

extension Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.SignalService"
  }

  ///Запросить стратегии.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStrategies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStrategies(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse> {
    return self.makeUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getStrategies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStrategiesInterceptors() ?? []
    )
  }

  ///Запросить сигналы.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSignals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSignals(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse> {
    return self.makeUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getSignals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignalsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceNIOClient")
public final class Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClient: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.SignalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceNIOClient: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.SignalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис для получения технических сигналов и мнений аналитиков по инструментам.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? { get }

  func makeGetStrategiesCall(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse>

  func makeGetSignalsCall(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetStrategiesCall(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse> {
    return self.makeAsyncUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getStrategies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStrategiesInterceptors() ?? []
    )
  }

  public func makeGetSignalsCall(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getSignals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignalsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceAsyncClientProtocol {
  public func getStrategies(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse {
    return try await self.performAsyncUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getStrategies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStrategiesInterceptors() ?? []
    )
  }

  public func getSignals(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getSignals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignalsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceAsyncClient: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getStrategies'.
  func makeGetStrategiesInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetStrategiesResponse>]

  /// - Returns: Interceptors to use when invoking 'getSignals'.
  func makeGetSignalsInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetSignalsResponse>]
}

public enum Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SignalService",
    fullName: "tinkoff.public.invest.api.contract.v1.SignalService",
    methods: [
      Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getStrategies,
      Tinkoff_Public_Invest_Api_Contract_V1_SignalServiceClientMetadata.Methods.getSignals,
    ]
  )

  public enum Methods {
    public static let getStrategies = GRPCMethodDescriptor(
      name: "GetStrategies",
      path: "/tinkoff.public.invest.api.contract.v1.SignalService/GetStrategies",
      type: GRPCCallType.unary
    )

    public static let getSignals = GRPCMethodDescriptor(
      name: "GetSignals",
      path: "/tinkoff.public.invest.api.contract.v1.SignalService/GetSignals",
      type: GRPCCallType.unary
    )
  }
}

