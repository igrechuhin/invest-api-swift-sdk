// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: instruments.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Тип купонов.
public enum Tinkoff_Public_Invest_Api_Contract_V1_CouponType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Неопределенное значение.
  case unspecified // = 0

  ///Постоянный.
  case constant // = 1

  ///Плавающий.
  case floating // = 2

  ///Дисконт.
  case discount // = 3

  ///Ипотечный.
  case mortgage // = 4

  ///Фиксированный.
  case fix // = 5

  ///Переменный.
  case variable // = 6

  ///Прочее.
  case other // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .constant
    case 2: self = .floating
    case 3: self = .discount
    case 4: self = .mortgage
    case 5: self = .fix
    case 6: self = .variable
    case 7: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .constant: return 1
    case .floating: return 2
    case .discount: return 3
    case .mortgage: return 4
    case .fix: return 5
    case .variable: return 6
    case .other: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_CouponType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_CouponType] = [
    .unspecified,
    .constant,
    .floating,
    .discount,
    .mortgage,
    .fix,
    .variable,
    .other,
  ]
}

#endif  // swift(>=4.2)

///Тип опциона по направлению сделки.
public enum Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Опцион на продажу.
  case put // = 1

  ///Опцион на покупку.
  case call // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .put
    case 2: self = .call
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .put: return 1
    case .call: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection] = [
    .unspecified,
    .put,
    .call,
  ]
}

#endif  // swift(>=4.2)

///Тип расчетов по опциону.
public enum Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Опционы с использованием премии в расчетах.
  case premium // = 1

  ///Маржируемые опционы.
  case marginal // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .premium
    case 2: self = .marginal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .premium: return 1
    case .marginal: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType] = [
    .unspecified,
    .premium,
    .marginal,
  ]
}

#endif  // swift(>=4.2)

///Тип опциона по стилю.
public enum Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Американский опцион.
  case american // = 1

  ///Европейский опцион.
  case european // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .american
    case 2: self = .european
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .american: return 1
    case .european: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle] = [
    .unspecified,
    .american,
    .european,
  ]
}

#endif  // swift(>=4.2)

///Тип опциона по способу исполнения.
public enum Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case optionExecutionTypeUnspecified // = 0

  /// Поставочный тип опциона.
  case optionExecutionTypePhysicalDelivery // = 1

  ///Расчетный тип опциона.
  case optionExecutionTypeCashSettlement // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .optionExecutionTypeUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .optionExecutionTypeUnspecified
    case 1: self = .optionExecutionTypePhysicalDelivery
    case 2: self = .optionExecutionTypeCashSettlement
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .optionExecutionTypeUnspecified: return 0
    case .optionExecutionTypePhysicalDelivery: return 1
    case .optionExecutionTypeCashSettlement: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType] = [
    .optionExecutionTypeUnspecified,
    .optionExecutionTypePhysicalDelivery,
    .optionExecutionTypeCashSettlement,
  ]
}

#endif  // swift(>=4.2)

///Тип идентификатора инструмента. [Подробнее об идентификации инструментов](./faq_identification/).
public enum Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Значение не определено.
  case instrumentIDUnspecified // = 0

  ///FIGI.
  case figi // = 1

  ///Ticker.
  case ticker // = 2

  ///Уникальный идентификатор.
  case uid // = 3

  ///Идентификатор позиции.
  case positionUid // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .instrumentIDUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .instrumentIDUnspecified
    case 1: self = .figi
    case 2: self = .ticker
    case 3: self = .uid
    case 4: self = .positionUid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .instrumentIDUnspecified: return 0
    case .figi: return 1
    case .ticker: return 2
    case .uid: return 3
    case .positionUid: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType] = [
    .instrumentIDUnspecified,
    .figi,
    .ticker,
    .uid,
    .positionUid,
  ]
}

#endif  // swift(>=4.2)

///Тип акций.
public enum Tinkoff_Public_Invest_Api_Contract_V1_ShareType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Значение не определено.
  case unspecified // = 0

  ///Обыкновенная.
  case common // = 1

  ///Привилегированная.
  case preferred // = 2

  ///Американские депозитарные расписки.
  case adr // = 3

  ///Глобальные депозитарные расписки.
  case gdr // = 4

  ///Товарищество с ограниченной ответственностью.
  case mlp // = 5

  ///Акции из реестра Нью-Йорка.
  case nyRegShrs // = 6

  ///Закрытый инвестиционный фонд.
  case closedEndFund // = 7

  ///Траст недвижимости.
  case reit // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .common
    case 2: self = .preferred
    case 3: self = .adr
    case 4: self = .gdr
    case 5: self = .mlp
    case 6: self = .nyRegShrs
    case 7: self = .closedEndFund
    case 8: self = .reit
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .common: return 1
    case .preferred: return 2
    case .adr: return 3
    case .gdr: return 4
    case .mlp: return 5
    case .nyRegShrs: return 6
    case .closedEndFund: return 7
    case .reit: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_ShareType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_ShareType] = [
    .unspecified,
    .common,
    .preferred,
    .adr,
    .gdr,
    .mlp,
    .nyRegShrs,
    .closedEndFund,
    .reit,
  ]
}

#endif  // swift(>=4.2)

///Тип актива.
public enum Tinkoff_Public_Invest_Api_Contract_V1_AssetType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Валюта.
  case currency // = 1

  ///Товар.
  case commodity // = 2

  ///Индекс.
  case index // = 3

  ///Ценная бумага.
  case security // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .currency
    case 2: self = .commodity
    case 3: self = .index
    case 4: self = .security
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .currency: return 1
    case .commodity: return 2
    case .index: return 3
    case .security: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_AssetType] = [
    .unspecified,
    .currency,
    .commodity,
    .index,
    .security,
  ]
}

#endif  // swift(>=4.2)

///Тип структурной ноты.
public enum Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case spTypeUnspecified // = 0

  ///Поставочный.
  case spTypeDeliverable // = 1

  ///Беспоставочный.
  case spTypeNonDeliverable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .spTypeUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .spTypeUnspecified
    case 1: self = .spTypeDeliverable
    case 2: self = .spTypeNonDeliverable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .spTypeUnspecified: return 0
    case .spTypeDeliverable: return 1
    case .spTypeNonDeliverable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType] = [
    .spTypeUnspecified,
    .spTypeDeliverable,
    .spTypeNonDeliverable,
  ]
}

#endif  // swift(>=4.2)

///Тип действия со списком избранных инструментов.
public enum Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Добавить в список.
  case add // = 1

  ///Удалить из списка.
  case del // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .add
    case 2: self = .del
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .add: return 1
    case .del: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType] = [
    .unspecified,
    .add,
    .del,
  ]
}

#endif  // swift(>=4.2)

///Реальная площадка исполнения расчетов.
public enum Tinkoff_Public_Invest_Api_Contract_V1_RealExchange: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Тип не определен.
  case unspecified // = 0

  ///Московская биржа.
  case moex // = 1

  ///Санкт-Петербургская биржа.
  case rts // = 2

  ///Внебиржевой инструмент.
  case otc // = 3

  ///Инструмент, торгуемый на площадке брокера.
  case dealer // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .moex
    case 2: self = .rts
    case 3: self = .otc
    case 4: self = .dealer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .moex: return 1
    case .rts: return 2
    case .otc: return 3
    case .dealer: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_RealExchange: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_RealExchange] = [
    .unspecified,
    .moex,
    .rts,
    .otc,
    .dealer,
  ]
}

#endif  // swift(>=4.2)

public enum Tinkoff_Public_Invest_Api_Contract_V1_Recommendation: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Не определено.
  case unspecified // = 0

  /// Покупать.
  case buy // = 1

  /// Держать.
  case hold // = 2

  /// Продавать.
  case sell // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .buy
    case 2: self = .hold
    case 3: self = .sell
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .buy: return 1
    case .hold: return 2
    case .sell: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_Recommendation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_Recommendation] = [
    .unspecified,
    .buy,
    .hold,
    .sell,
  ]
}

#endif  // swift(>=4.2)

///Уровень риска облигации.
public enum Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Не указан.
  case unspecified // = 0

  ///Низкий уровень риска.
  case low // = 1

  ///Средний уровень риска.
  case moderate // = 2

  ///Высокий уровень риска.
  case high // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .low
    case 2: self = .moderate
    case 3: self = .high
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .low: return 1
    case .moderate: return 2
    case .high: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel] = [
    .unspecified,
    .low,
    .moderate,
    .high,
  ]
}

#endif  // swift(>=4.2)

public enum Tinkoff_Public_Invest_Api_Contract_V1_BondType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Тип облигации не определен.
  case unspecified // = 0

  /// Замещающая облигация.
  case replaced // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .replaced
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .replaced: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_BondType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_BondType] = [
    .unspecified,
    .replaced,
  ]
}

#endif  // swift(>=4.2)

/// Площадка торговли.
public enum Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Площадка торговли не определена.
  case instrumentExchangeUnspecified // = 0

  /// Бумага, торгуемая у дилера.
  case instrumentExchangeDealer // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .instrumentExchangeUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .instrumentExchangeUnspecified
    case 1: self = .instrumentExchangeDealer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .instrumentExchangeUnspecified: return 0
    case .instrumentExchangeDealer: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType] = [
    .instrumentExchangeUnspecified,
    .instrumentExchangeDealer,
  ]
}

#endif  // swift(>=4.2)

///Запрос расписания торгов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Наименование биржи или расчетного календаря. <br/>Если не передается, возвращается информация по всем доступным торговым площадкам.
  public var exchange: String {
    get {return _exchange ?? String()}
    set {_exchange = newValue}
  }
  /// Returns true if `exchange` has been explicitly set.
  public var hasExchange: Bool {return self._exchange != nil}
  /// Clears the value of `exchange`. Subsequent reads from it will return its default value.
  public mutating func clearExchange() {self._exchange = nil}

  ///Начало периода по UTC.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание периода по UTC.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _exchange: String? = nil
  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Список торговых площадок.
public struct Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Список торговых площадок и режимов торгов.
  public var exchanges: [Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по торговой площадке.
public struct Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Наименование торговой площадки.
  public var exchange: String = String()

  /// Массив с торговыми и неторговыми днями.
  public var days: [Tinkoff_Public_Invest_Api_Contract_V1_TradingDay] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Информация о времени торгов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_TradingDay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Дата.
  public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  /// Признак торгового дня на бирже.
  public var isTradingDay: Bool {
    get {return _storage._isTradingDay}
    set {_uniqueStorage()._isTradingDay = newValue}
  }

  /// Время начала торгов по UTC.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// Время окончания торгов по UTC.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  /// Время начала аукциона открытия по UTC.
  public var openingAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._openingAuctionStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._openingAuctionStartTime = newValue}
  }
  /// Returns true if `openingAuctionStartTime` has been explicitly set.
  public var hasOpeningAuctionStartTime: Bool {return _storage._openingAuctionStartTime != nil}
  /// Clears the value of `openingAuctionStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearOpeningAuctionStartTime() {_uniqueStorage()._openingAuctionStartTime = nil}

  /// Время окончания аукциона закрытия по UTC.
  public var closingAuctionEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._closingAuctionEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._closingAuctionEndTime = newValue}
  }
  /// Returns true if `closingAuctionEndTime` has been explicitly set.
  public var hasClosingAuctionEndTime: Bool {return _storage._closingAuctionEndTime != nil}
  /// Clears the value of `closingAuctionEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearClosingAuctionEndTime() {_uniqueStorage()._closingAuctionEndTime = nil}

  /// Время начала аукциона открытия вечерней сессии по UTC.
  public var eveningOpeningAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eveningOpeningAuctionStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eveningOpeningAuctionStartTime = newValue}
  }
  /// Returns true if `eveningOpeningAuctionStartTime` has been explicitly set.
  public var hasEveningOpeningAuctionStartTime: Bool {return _storage._eveningOpeningAuctionStartTime != nil}
  /// Clears the value of `eveningOpeningAuctionStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearEveningOpeningAuctionStartTime() {_uniqueStorage()._eveningOpeningAuctionStartTime = nil}

  /// Время начала вечерней сессии по UTC.
  public var eveningStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eveningStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eveningStartTime = newValue}
  }
  /// Returns true if `eveningStartTime` has been explicitly set.
  public var hasEveningStartTime: Bool {return _storage._eveningStartTime != nil}
  /// Clears the value of `eveningStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearEveningStartTime() {_uniqueStorage()._eveningStartTime = nil}

  /// Время окончания вечерней сессии по UTC.
  public var eveningEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eveningEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eveningEndTime = newValue}
  }
  /// Returns true if `eveningEndTime` has been explicitly set.
  public var hasEveningEndTime: Bool {return _storage._eveningEndTime != nil}
  /// Clears the value of `eveningEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearEveningEndTime() {_uniqueStorage()._eveningEndTime = nil}

  /// Время начала основного клиринга по UTC.
  public var clearingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._clearingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._clearingStartTime = newValue}
  }
  /// Returns true if `clearingStartTime` has been explicitly set.
  public var hasClearingStartTime: Bool {return _storage._clearingStartTime != nil}
  /// Clears the value of `clearingStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearClearingStartTime() {_uniqueStorage()._clearingStartTime = nil}

  /// Время окончания основного клиринга по UTC.
  public var clearingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._clearingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._clearingEndTime = newValue}
  }
  /// Returns true if `clearingEndTime` has been explicitly set.
  public var hasClearingEndTime: Bool {return _storage._clearingEndTime != nil}
  /// Clears the value of `clearingEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearClearingEndTime() {_uniqueStorage()._clearingEndTime = nil}

  /// Время начала премаркета по UTC.
  public var premarketStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._premarketStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._premarketStartTime = newValue}
  }
  /// Returns true if `premarketStartTime` has been explicitly set.
  public var hasPremarketStartTime: Bool {return _storage._premarketStartTime != nil}
  /// Clears the value of `premarketStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearPremarketStartTime() {_uniqueStorage()._premarketStartTime = nil}

  /// Время окончания премаркета по UTC.
  public var premarketEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._premarketEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._premarketEndTime = newValue}
  }
  /// Returns true if `premarketEndTime` has been explicitly set.
  public var hasPremarketEndTime: Bool {return _storage._premarketEndTime != nil}
  /// Clears the value of `premarketEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearPremarketEndTime() {_uniqueStorage()._premarketEndTime = nil}

  /// Время начала аукциона закрытия по UTC.
  public var closingAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._closingAuctionStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._closingAuctionStartTime = newValue}
  }
  /// Returns true if `closingAuctionStartTime` has been explicitly set.
  public var hasClosingAuctionStartTime: Bool {return _storage._closingAuctionStartTime != nil}
  /// Clears the value of `closingAuctionStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearClosingAuctionStartTime() {_uniqueStorage()._closingAuctionStartTime = nil}

  /// Время окончания аукциона открытия по UTC.
  public var openingAuctionEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._openingAuctionEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._openingAuctionEndTime = newValue}
  }
  /// Returns true if `openingAuctionEndTime` has been explicitly set.
  public var hasOpeningAuctionEndTime: Bool {return _storage._openingAuctionEndTime != nil}
  /// Clears the value of `openingAuctionEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearOpeningAuctionEndTime() {_uniqueStorage()._openingAuctionEndTime = nil}

  /// Торговые интервалы.
  public var intervals: [Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval] {
    get {return _storage._intervals}
    set {_uniqueStorage()._intervals = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос получения инструмента по идентификатору.
public struct Tinkoff_Public_Invest_Api_Contract_V1_InstrumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Тип идентификатора инструмента. Возможные значения — `figi`, `ticker`. [Подробнее об идентификации инструментов](./faq_identification/).
  public var idType: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType = .instrumentIDUnspecified

  /// Идентификатор `class_code`. Обязательный, если `id_type = ticker`.
  public var classCode: String {
    get {return _classCode ?? String()}
    set {_classCode = newValue}
  }
  /// Returns true if `classCode` has been explicitly set.
  public var hasClassCode: Bool {return self._classCode != nil}
  /// Clears the value of `classCode`. Subsequent reads from it will return its default value.
  public mutating func clearClassCode() {self._classCode = nil}

  /// Идентификатор запрашиваемого инструмента.
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _classCode: String? = nil
}

///Запрос получения инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_InstrumentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
  public var instrumentStatus: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentStatus {
    get {return _instrumentStatus ?? .unspecified}
    set {_instrumentStatus = newValue}
  }
  /// Returns true if `instrumentStatus` has been explicitly set.
  public var hasInstrumentStatus: Bool {return self._instrumentStatus != nil}
  /// Clears the value of `instrumentStatus`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentStatus() {self._instrumentStatus = nil}

  /// Тип площадки торговли. [Возможные значения](#instrumentexchangetype).
  public var instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType {
    get {return _instrumentExchange ?? .instrumentExchangeUnspecified}
    set {_instrumentExchange = newValue}
  }
  /// Returns true if `instrumentExchange` has been explicitly set.
  public var hasInstrumentExchange: Bool {return self._instrumentExchange != nil}
  /// Clears the value of `instrumentExchange`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentExchange() {self._instrumentExchange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrumentStatus: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentStatus? = nil
  fileprivate var _instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType? = nil
}

///Параметры фильтрации опционов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FilterOptionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификатор базового актива опциона.  Обязательный параметр.
  public var basicAssetUid: String {
    get {return _basicAssetUid ?? String()}
    set {_basicAssetUid = newValue}
  }
  /// Returns true if `basicAssetUid` has been explicitly set.
  public var hasBasicAssetUid: Bool {return self._basicAssetUid != nil}
  /// Clears the value of `basicAssetUid`. Subsequent reads from it will return its default value.
  public mutating func clearBasicAssetUid() {self._basicAssetUid = nil}

  ///Идентификатор позиции базового актива опциона.
  public var basicAssetPositionUid: String {
    get {return _basicAssetPositionUid ?? String()}
    set {_basicAssetPositionUid = newValue}
  }
  /// Returns true if `basicAssetPositionUid` has been explicitly set.
  public var hasBasicAssetPositionUid: Bool {return self._basicAssetPositionUid != nil}
  /// Clears the value of `basicAssetPositionUid`. Subsequent reads from it will return its default value.
  public mutating func clearBasicAssetPositionUid() {self._basicAssetPositionUid = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicAssetUid: String? = nil
  fileprivate var _basicAssetPositionUid: String? = nil
}

///Информация об облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_BondResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация об облигации.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Bond {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Bond()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Bond? = nil
}

///Список облигаций.
public struct Tinkoff_Public_Invest_Api_Contract_V1_BondsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив облигаций.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Bond] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос купонов по облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Начало запрашиваемого периода по UTC. Фильтрация по `coupon_date` — дата выплаты купона.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание запрашиваемого периода по UTC. Фильтрация по `coupon_date` — дата выплаты купона.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Купоны по облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var events: [Tinkoff_Public_Invest_Api_Contract_V1_Coupon] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///События по облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Начало запрашиваемого периода по UTC.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание запрашиваемого периода по UTC.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  ///Тип события
  public var type: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum EventType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    ///Неопределенное значение.
    case unspecified // = 0

    /// Купон.
    case cpn // = 1

    /// Опцион (оферта).
    case call // = 2

    /// Погашение.
    case mty // = 3

    /// Конвертация.
    case conv // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .cpn
      case 2: self = .call
      case 3: self = .mty
      case 4: self = .conv
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .cpn: return 1
      case .call: return 2
      case .mty: return 3
      case .conv: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType] = [
    .unspecified,
    .cpn,
    .call,
    .mty,
    .conv,
  ]
}

#endif  // swift(>=4.2)

///Объект передачи информации о событии облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var events: [Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.BondEvent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct BondEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Идентификатор инструмента.
    public var instrumentID: String {
      get {return _storage._instrumentID}
      set {_uniqueStorage()._instrumentID = newValue}
    }

    /// Номер события для данного типа события.
    public var eventNumber: Int32 {
      get {return _storage._eventNumber}
      set {_uniqueStorage()._eventNumber = newValue}
    }

    /// Дата события.
    public var eventDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._eventDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._eventDate = newValue}
    }
    /// Returns true if `eventDate` has been explicitly set.
    public var hasEventDate: Bool {return _storage._eventDate != nil}
    /// Clears the value of `eventDate`. Subsequent reads from it will return its default value.
    public mutating func clearEventDate() {_uniqueStorage()._eventDate = nil}

    /// Тип события.
    public var eventType: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType {
      get {return _storage._eventType}
      set {_uniqueStorage()._eventType = newValue}
    }

    /// Полное количество бумаг, задействованных в событии.
    public var eventTotalVol: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._eventTotalVol ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._eventTotalVol = newValue}
    }
    /// Returns true if `eventTotalVol` has been explicitly set.
    public var hasEventTotalVol: Bool {return _storage._eventTotalVol != nil}
    /// Clears the value of `eventTotalVol`. Subsequent reads from it will return its default value.
    public mutating func clearEventTotalVol() {_uniqueStorage()._eventTotalVol = nil}

    /// Дата фиксации владельцев для участия в событии.
    public var fixDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._fixDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._fixDate = newValue}
    }
    /// Returns true if `fixDate` has been explicitly set.
    public var hasFixDate: Bool {return _storage._fixDate != nil}
    /// Clears the value of `fixDate`. Subsequent reads from it will return its default value.
    public mutating func clearFixDate() {_uniqueStorage()._fixDate = nil}

    /// Дата определения даты или факта события.
    public var rateDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._rateDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._rateDate = newValue}
    }
    /// Returns true if `rateDate` has been explicitly set.
    public var hasRateDate: Bool {return _storage._rateDate != nil}
    /// Clears the value of `rateDate`. Subsequent reads from it will return its default value.
    public mutating func clearRateDate() {_uniqueStorage()._rateDate = nil}

    /// Дата дефолта, если применимо.
    public var defaultDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._defaultDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._defaultDate = newValue}
    }
    /// Returns true if `defaultDate` has been explicitly set.
    public var hasDefaultDate: Bool {return _storage._defaultDate != nil}
    /// Clears the value of `defaultDate`. Subsequent reads from it will return its default value.
    public mutating func clearDefaultDate() {_uniqueStorage()._defaultDate = nil}

    /// Дата реального исполнения обязательства.
    public var realPayDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._realPayDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._realPayDate = newValue}
    }
    /// Returns true if `realPayDate` has been explicitly set.
    public var hasRealPayDate: Bool {return _storage._realPayDate != nil}
    /// Clears the value of `realPayDate`. Subsequent reads from it will return its default value.
    public mutating func clearRealPayDate() {_uniqueStorage()._realPayDate = nil}

    /// Дата выплаты.
    public var payDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._payDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._payDate = newValue}
    }
    /// Returns true if `payDate` has been explicitly set.
    public var hasPayDate: Bool {return _storage._payDate != nil}
    /// Clears the value of `payDate`. Subsequent reads from it will return its default value.
    public mutating func clearPayDate() {_uniqueStorage()._payDate = nil}

    /// Выплата на одну облигацию.
    public var payOneBond: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
      get {return _storage._payOneBond ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
      set {_uniqueStorage()._payOneBond = newValue}
    }
    /// Returns true if `payOneBond` has been explicitly set.
    public var hasPayOneBond: Bool {return _storage._payOneBond != nil}
    /// Clears the value of `payOneBond`. Subsequent reads from it will return its default value.
    public mutating func clearPayOneBond() {_uniqueStorage()._payOneBond = nil}

    /// Выплаты на все бумаги, задействованные в событии.
    public var moneyFlowVal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
      get {return _storage._moneyFlowVal ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
      set {_uniqueStorage()._moneyFlowVal = newValue}
    }
    /// Returns true if `moneyFlowVal` has been explicitly set.
    public var hasMoneyFlowVal: Bool {return _storage._moneyFlowVal != nil}
    /// Clears the value of `moneyFlowVal`. Subsequent reads from it will return its default value.
    public mutating func clearMoneyFlowVal() {_uniqueStorage()._moneyFlowVal = nil}

    /// Признак исполнения.
    public var execution: String {
      get {return _storage._execution}
      set {_uniqueStorage()._execution = newValue}
    }

    /// Тип операции.
    public var operationType: String {
      get {return _storage._operationType}
      set {_uniqueStorage()._operationType = newValue}
    }

    /// Стоимость операции — ставка купона, доля номинала, цена выкупа или коэффициент конвертации.
    public var value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._value ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return _storage._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {_uniqueStorage()._value = nil}

    /// Примечание.
    public var note: String {
      get {return _storage._note}
      set {_uniqueStorage()._note = newValue}
    }

    /// ID выпуска бумаг, в который произведена конвертация (для конвертаций).
    public var convertToFinToolID: String {
      get {return _storage._convertToFinToolID}
      set {_uniqueStorage()._convertToFinToolID = newValue}
    }

    /// Начало купонного периода.
    public var couponStartDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._couponStartDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._couponStartDate = newValue}
    }
    /// Returns true if `couponStartDate` has been explicitly set.
    public var hasCouponStartDate: Bool {return _storage._couponStartDate != nil}
    /// Clears the value of `couponStartDate`. Subsequent reads from it will return its default value.
    public mutating func clearCouponStartDate() {_uniqueStorage()._couponStartDate = nil}

    /// Окончание купонного периода.
    public var couponEndDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._couponEndDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._couponEndDate = newValue}
    }
    /// Returns true if `couponEndDate` has been explicitly set.
    public var hasCouponEndDate: Bool {return _storage._couponEndDate != nil}
    /// Clears the value of `couponEndDate`. Subsequent reads from it will return its default value.
    public mutating func clearCouponEndDate() {_uniqueStorage()._couponEndDate = nil}

    /// Купонный период.
    public var couponPeriod: Int32 {
      get {return _storage._couponPeriod}
      set {_uniqueStorage()._couponPeriod = newValue}
    }

    /// Ставка купона, процентов годовых.
    public var couponInterestRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._couponInterestRate ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._couponInterestRate = newValue}
    }
    /// Returns true if `couponInterestRate` has been explicitly set.
    public var hasCouponInterestRate: Bool {return _storage._couponInterestRate != nil}
    /// Clears the value of `couponInterestRate`. Subsequent reads from it will return its default value.
    public mutating func clearCouponInterestRate() {_uniqueStorage()._couponInterestRate = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

///Объект передачи информации о купоне облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Coupon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Дата выплаты купона.
  public var couponDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _couponDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_couponDate = newValue}
  }
  /// Returns true if `couponDate` has been explicitly set.
  public var hasCouponDate: Bool {return self._couponDate != nil}
  /// Clears the value of `couponDate`. Subsequent reads from it will return its default value.
  public mutating func clearCouponDate() {self._couponDate = nil}

  ///Номер купона.
  public var couponNumber: Int64 = 0

  ///Дата фиксации реестра для выплаты купона — опционально.
  public var fixDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _fixDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_fixDate = newValue}
  }
  /// Returns true if `fixDate` has been explicitly set.
  public var hasFixDate: Bool {return self._fixDate != nil}
  /// Clears the value of `fixDate`. Subsequent reads from it will return its default value.
  public mutating func clearFixDate() {self._fixDate = nil}

  ///Выплата на одну облигацию.
  public var payOneBond: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _payOneBond ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_payOneBond = newValue}
  }
  /// Returns true if `payOneBond` has been explicitly set.
  public var hasPayOneBond: Bool {return self._payOneBond != nil}
  /// Clears the value of `payOneBond`. Subsequent reads from it will return its default value.
  public mutating func clearPayOneBond() {self._payOneBond = nil}

  ///Тип купона.
  public var couponType: Tinkoff_Public_Invest_Api_Contract_V1_CouponType = .unspecified

  ///Начало купонного периода.
  public var couponStartDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _couponStartDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_couponStartDate = newValue}
  }
  /// Returns true if `couponStartDate` has been explicitly set.
  public var hasCouponStartDate: Bool {return self._couponStartDate != nil}
  /// Clears the value of `couponStartDate`. Subsequent reads from it will return its default value.
  public mutating func clearCouponStartDate() {self._couponStartDate = nil}

  ///Окончание купонного периода.
  public var couponEndDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _couponEndDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_couponEndDate = newValue}
  }
  /// Returns true if `couponEndDate` has been explicitly set.
  public var hasCouponEndDate: Bool {return self._couponEndDate != nil}
  /// Clears the value of `couponEndDate`. Subsequent reads from it will return its default value.
  public mutating func clearCouponEndDate() {self._couponEndDate = nil}

  ///Купонный период в днях.
  public var couponPeriod: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _couponDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _fixDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _payOneBond: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
  fileprivate var _couponStartDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _couponEndDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Данные по валюте.
public struct Tinkoff_Public_Invest_Api_Contract_V1_CurrencyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация о валюте.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Currency {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Currency()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Currency? = nil
}

///Данные по валютам.
public struct Tinkoff_Public_Invest_Api_Contract_V1_CurrenciesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив валют.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Currency] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по фонду.
public struct Tinkoff_Public_Invest_Api_Contract_V1_EtfResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация о фонде.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Etf {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Etf()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Etf? = nil
}

///Данные по фондам.
public struct Tinkoff_Public_Invest_Api_Contract_V1_EtfsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив фондов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Etf] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по фьючерсу.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FutureResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация о фьючерсу.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Future {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Future()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Future? = nil
}

///Данные по фьючерсам.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FuturesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив фьючерсов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Future] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по опциону.
public struct Tinkoff_Public_Invest_Api_Contract_V1_OptionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация по опциону.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Option {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Option()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Option? = nil
}

///Данные по опционам.
public struct Tinkoff_Public_Invest_Api_Contract_V1_OptionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив данных по опциону.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Option] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Опцион.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Уникальный идентификатор позиции.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код.
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///Уникальный идентификатор позиции основного инструмента.
  public var basicAssetPositionUid: String {
    get {return _storage._basicAssetPositionUid}
    set {_uniqueStorage()._basicAssetPositionUid = newValue}
  }

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Направление опциона.
  public var direction: Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  ///Тип расчетов по опциону.
  public var paymentType: Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType {
    get {return _storage._paymentType}
    set {_uniqueStorage()._paymentType = newValue}
  }

  ///Стиль опциона.
  public var style: Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle {
    get {return _storage._style}
    set {_uniqueStorage()._style = newValue}
  }

  ///Способ исполнения опциона.
  public var settlementType: Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType {
    get {return _storage._settlementType}
    set {_uniqueStorage()._settlementType = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Валюта.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Валюта, в которой оценивается контракт.
  public var settlementCurrency: String {
    get {return _storage._settlementCurrency}
    set {_uniqueStorage()._settlementCurrency = newValue}
  }

  ///Тип актива.
  public var assetType: String {
    get {return _storage._assetType}
    set {_uniqueStorage()._assetType = newValue}
  }

  ///Основной актив.
  public var basicAsset: String {
    get {return _storage._basicAsset}
    set {_uniqueStorage()._basicAsset = newValue}
  }

  /// Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Код страны рисков.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны рисков.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Сектор экономики.
  public var sector: String {
    get {return _storage._sector}
    set {_uniqueStorage()._sector = newValue}
  }

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Количество бумаг в лоте.
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Размер основного актива.
  public var basicAssetSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._basicAssetSize ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._basicAssetSize = newValue}
  }
  /// Returns true if `basicAssetSize` has been explicitly set.
  public var hasBasicAssetSize: Bool {return _storage._basicAssetSize != nil}
  /// Clears the value of `basicAssetSize`. Subsequent reads from it will return its default value.
  public mutating func clearBasicAssetSize() {_uniqueStorage()._basicAssetSize = nil}

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Минимальный шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Цена страйка.
  public var strikePrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._strikePrice ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._strikePrice = newValue}
  }
  /// Returns true if `strikePrice` has been explicitly set.
  public var hasStrikePrice: Bool {return _storage._strikePrice != nil}
  /// Clears the value of `strikePrice`. Subsequent reads from it will return its default value.
  public mutating func clearStrikePrice() {_uniqueStorage()._strikePrice = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  ///Дата истечения срока в формате UTC.
  public var expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expirationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expirationDate = newValue}
  }
  /// Returns true if `expirationDate` has been explicitly set.
  public var hasExpirationDate: Bool {return _storage._expirationDate != nil}
  /// Clears the value of `expirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationDate() {_uniqueStorage()._expirationDate = nil}

  ///Дата начала обращения контракта в формате UTC.
  public var firstTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._firstTradeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._firstTradeDate = newValue}
  }
  /// Returns true if `firstTradeDate` has been explicitly set.
  public var hasFirstTradeDate: Bool {return _storage._firstTradeDate != nil}
  /// Clears the value of `firstTradeDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirstTradeDate() {_uniqueStorage()._firstTradeDate = nil}

  ///Дата исполнения в формате UTC.
  public var lastTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastTradeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastTradeDate = newValue}
  }
  /// Returns true if `lastTradeDate` has been explicitly set.
  public var hasLastTradeDate: Bool {return _storage._lastTradeDate != nil}
  /// Clears the value of `lastTradeDate`. Subsequent reads from it will return its default value.
  public mutating func clearLastTradeDate() {_uniqueStorage()._lastTradeDate = nil}

  ///Дата первой минутной свечи в формате UTC.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи в формате UTC.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  ///Признак доступности для операций шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Возможность покупки или продажи на ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Данные по акции.
public struct Tinkoff_Public_Invest_Api_Contract_V1_ShareResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Информация об акции.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Share {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Share()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Share? = nil
}

///Данные по акциям.
public struct Tinkoff_Public_Invest_Api_Contract_V1_SharesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив акций.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_Share] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Объект передачи информации об облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Bond {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код (секция торгов).
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///ISIN-идентификатор инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  /// Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций в шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Количество выплат по купонам в год.
  public var couponQuantityPerYear: Int32 {
    get {return _storage._couponQuantityPerYear}
    set {_uniqueStorage()._couponQuantityPerYear = newValue}
  }

  ///Дата погашения облигации по UTC.
  public var maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._maturityDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._maturityDate = newValue}
  }
  /// Returns true if `maturityDate` has been explicitly set.
  public var hasMaturityDate: Bool {return _storage._maturityDate != nil}
  /// Clears the value of `maturityDate`. Subsequent reads from it will return its default value.
  public mutating func clearMaturityDate() {_uniqueStorage()._maturityDate = nil}

  ///Номинал облигации.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Первоначальный номинал облигации.
  public var initialNominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._initialNominal ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._initialNominal = newValue}
  }
  /// Returns true if `initialNominal` has been explicitly set.
  public var hasInitialNominal: Bool {return _storage._initialNominal != nil}
  /// Clears the value of `initialNominal`. Subsequent reads from it will return its default value.
  public mutating func clearInitialNominal() {_uniqueStorage()._initialNominal = nil}

  ///Дата выпуска облигации по UTC.
  public var stateRegDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._stateRegDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._stateRegDate = newValue}
  }
  /// Returns true if `stateRegDate` has been explicitly set.
  public var hasStateRegDate: Bool {return _storage._stateRegDate != nil}
  /// Clears the value of `stateRegDate`. Subsequent reads from it will return its default value.
  public mutating func clearStateRegDate() {_uniqueStorage()._stateRegDate = nil}

  ///Дата размещения по UTC.
  public var placementDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._placementDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._placementDate = newValue}
  }
  /// Returns true if `placementDate` has been explicitly set.
  public var hasPlacementDate: Bool {return _storage._placementDate != nil}
  /// Clears the value of `placementDate`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementDate() {_uniqueStorage()._placementDate = nil}

  ///Цена размещения.
  public var placementPrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._placementPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._placementPrice = newValue}
  }
  /// Returns true if `placementPrice` has been explicitly set.
  public var hasPlacementPrice: Bool {return _storage._placementPrice != nil}
  /// Clears the value of `placementPrice`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementPrice() {_uniqueStorage()._placementPrice = nil}

  ///Значение НКД (накопленного купонного дохода) на дату.
  public var aciValue: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._aciValue ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._aciValue = newValue}
  }
  /// Returns true if `aciValue` has been explicitly set.
  public var hasAciValue: Bool {return _storage._aciValue != nil}
  /// Clears the value of `aciValue`. Subsequent reads from it will return its default value.
  public mutating func clearAciValue() {_uniqueStorage()._aciValue = nil}

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Сектор экономики.
  public var sector: String {
    get {return _storage._sector}
    set {_uniqueStorage()._sector = newValue}
  }

  ///Форма выпуска. Возможные значения: <br/>**documentary** — документарная; <br/>**non_documentary** — бездокументарная.
  public var issueKind: String {
    get {return _storage._issueKind}
    set {_uniqueStorage()._issueKind = newValue}
  }

  ///Размер выпуска.
  public var issueSize: Int64 {
    get {return _storage._issueSize}
    set {_uniqueStorage()._issueSize = newValue}
  }

  ///Плановый размер выпуска.
  public var issueSizePlan: Int64 {
    get {return _storage._issueSizePlan}
    set {_uniqueStorage()._issueSizePlan = newValue}
  }

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Признак облигации с плавающим купоном.
  public var floatingCouponFlag: Bool {
    get {return _storage._floatingCouponFlag}
    set {_uniqueStorage()._floatingCouponFlag = newValue}
  }

  ///Признак бессрочной облигации.
  public var perpetualFlag: Bool {
    get {return _storage._perpetualFlag}
    set {_uniqueStorage()._perpetualFlag = newValue}
  }

  ///Признак облигации с амортизацией долга.
  public var amortizationFlag: Bool {
    get {return _storage._amortizationFlag}
    set {_uniqueStorage()._amortizationFlag = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Параметр указывает на возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов. (биржа)
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Уникальный идентификатор актива.
  public var assetUid: String {
    get {return _storage._assetUid}
    set {_uniqueStorage()._assetUid = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Признак субординированной облигации.
  public var subordinatedFlag: Bool {
    get {return _storage._subordinatedFlag}
    set {_uniqueStorage()._subordinatedFlag = newValue}
  }

  ///Флаг достаточной ликвидности.
  public var liquidityFlag: Bool {
    get {return _storage._liquidityFlag}
    set {_uniqueStorage()._liquidityFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  ///Уровень риска.
  public var riskLevel: Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel {
    get {return _storage._riskLevel}
    set {_uniqueStorage()._riskLevel = newValue}
  }

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  /// Тип облигации.
  public var bondType: Tinkoff_Public_Invest_Api_Contract_V1_BondType {
    get {return _storage._bondType}
    set {_uniqueStorage()._bondType = newValue}
  }

  /// Дата погашения облигации.
  public var callDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._callDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._callDate = newValue}
  }
  /// Returns true if `callDate` has been explicitly set.
  public var hasCallDate: Bool {return _storage._callDate != nil}
  /// Clears the value of `callDate`. Subsequent reads from it will return its default value.
  public mutating func clearCallDate() {_uniqueStorage()._callDate = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Объект передачи информации о валюте.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Currency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код (секция торгов).
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///ISIN-идентификатор инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций в шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Строковый ISO-код валюты.
  public var isoCurrencyName: String {
    get {return _storage._isoCurrencyName}
    set {_uniqueStorage()._isoCurrencyName = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Параметр указывает на возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Объект передачи информации об инвестиционном фонде.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Etf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код (секция торгов).
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///ISIN-идентификатор инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций в шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Размер фиксированной комиссии фонда.
  public var fixedCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._fixedCommission ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._fixedCommission = newValue}
  }
  /// Returns true if `fixedCommission` has been explicitly set.
  public var hasFixedCommission: Bool {return _storage._fixedCommission != nil}
  /// Clears the value of `fixedCommission`. Subsequent reads from it will return its default value.
  public mutating func clearFixedCommission() {_uniqueStorage()._fixedCommission = nil}

  ///Возможные значения: <br/>**equity** — акции;<br/>**fixed_income** — облигации;<br/>**mixed_allocation** — смешанный;<br/>**money_market** — денежный рынок;<br/>**real_estate** — недвижимость;<br/>**commodity** — товары;<br/>**specialty** — специальный;<br/>**private_equity** — private equity;<br/>**alternative_investment** — альтернативные инвестиции.
  public var focusType: String {
    get {return _storage._focusType}
    set {_uniqueStorage()._focusType = newValue}
  }

  ///Дата выпуска по UTC.
  public var releasedDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._releasedDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._releasedDate = newValue}
  }
  /// Returns true if `releasedDate` has been explicitly set.
  public var hasReleasedDate: Bool {return _storage._releasedDate != nil}
  /// Clears the value of `releasedDate`. Subsequent reads from it will return its default value.
  public mutating func clearReleasedDate() {_uniqueStorage()._releasedDate = nil}

  ///Количество паев фонда в обращении.
  public var numShares: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._numShares ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._numShares = newValue}
  }
  /// Returns true if `numShares` has been explicitly set.
  public var hasNumShares: Bool {return _storage._numShares != nil}
  /// Clears the value of `numShares`. Subsequent reads from it will return its default value.
  public mutating func clearNumShares() {_uniqueStorage()._numShares = nil}

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Сектор экономики.
  public var sector: String {
    get {return _storage._sector}
    set {_uniqueStorage()._sector = newValue}
  }

  ///Частота ребалансировки.
  public var rebalancingFreq: String {
    get {return _storage._rebalancingFreq}
    set {_uniqueStorage()._rebalancingFreq = newValue}
  }

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Параметр указывает на возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Уникальный идентификатор актива.
  public var assetUid: String {
    get {return _storage._assetUid}
    set {_uniqueStorage()._assetUid = newValue}
  }

  ///Тип площадки торговли.
  public var instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType {
    get {return _storage._instrumentExchange}
    set {_uniqueStorage()._instrumentExchange = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///ФлагФлаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Флаг достаточной ликвидности.
  public var liquidityFlag: Bool {
    get {return _storage._liquidityFlag}
    set {_uniqueStorage()._liquidityFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Объект передачи информации о фьючерсе.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Future {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код (секция торгов).
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Дата начала обращения контракта по UTC.
  public var firstTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._firstTradeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._firstTradeDate = newValue}
  }
  /// Returns true if `firstTradeDate` has been explicitly set.
  public var hasFirstTradeDate: Bool {return _storage._firstTradeDate != nil}
  /// Clears the value of `firstTradeDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirstTradeDate() {_uniqueStorage()._firstTradeDate = nil}

  ///Дата по UTC, до которой возможно проведение операций с фьючерсом.
  public var lastTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastTradeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastTradeDate = newValue}
  }
  /// Returns true if `lastTradeDate` has been explicitly set.
  public var hasLastTradeDate: Bool {return _storage._lastTradeDate != nil}
  /// Clears the value of `lastTradeDate`. Subsequent reads from it will return its default value.
  public mutating func clearLastTradeDate() {_uniqueStorage()._lastTradeDate = nil}

  ///Тип фьючерса. Возможные значения: <br/>**physical_delivery** — физические поставки; <br/>**cash_settlement** — денежный эквивалент.
  public var futuresType: String {
    get {return _storage._futuresType}
    set {_uniqueStorage()._futuresType = newValue}
  }

  ///Тип актива. Возможные значения: <br/>**commodity** — товар; <br/>**currency** — валюта; <br/>**security** — ценная бумага; <br/>**index** — индекс.
  public var assetType: String {
    get {return _storage._assetType}
    set {_uniqueStorage()._assetType = newValue}
  }

  ///Основной актив.
  public var basicAsset: String {
    get {return _storage._basicAsset}
    set {_uniqueStorage()._basicAsset = newValue}
  }

  ///Размер основного актива.
  public var basicAssetSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._basicAssetSize ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._basicAssetSize = newValue}
  }
  /// Returns true if `basicAssetSize` has been explicitly set.
  public var hasBasicAssetSize: Bool {return _storage._basicAssetSize != nil}
  /// Clears the value of `basicAssetSize`. Subsequent reads from it will return its default value.
  public mutating func clearBasicAssetSize() {_uniqueStorage()._basicAssetSize = nil}

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Сектор экономики.
  public var sector: String {
    get {return _storage._sector}
    set {_uniqueStorage()._sector = newValue}
  }

  ///Дата истечения срока в часов поясе UTC.
  public var expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expirationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expirationDate = newValue}
  }
  /// Returns true if `expirationDate` has been explicitly set.
  public var hasExpirationDate: Bool {return _storage._expirationDate != nil}
  /// Clears the value of `expirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationDate() {_uniqueStorage()._expirationDate = nil}

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Параметр указывает на возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Уникальный идентификатор позиции основного инструмента.
  public var basicAssetPositionUid: String {
    get {return _storage._basicAssetPositionUid}
    set {_uniqueStorage()._basicAssetPositionUid = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  ///Гарантийное обеспечение при покупке.
  public var initialMarginOnBuy: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._initialMarginOnBuy ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._initialMarginOnBuy = newValue}
  }
  /// Returns true if `initialMarginOnBuy` has been explicitly set.
  public var hasInitialMarginOnBuy: Bool {return _storage._initialMarginOnBuy != nil}
  /// Clears the value of `initialMarginOnBuy`. Subsequent reads from it will return its default value.
  public mutating func clearInitialMarginOnBuy() {_uniqueStorage()._initialMarginOnBuy = nil}

  ///Гарантийное обеспечение при продаже.
  public var initialMarginOnSell: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._initialMarginOnSell ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._initialMarginOnSell = newValue}
  }
  /// Returns true if `initialMarginOnSell` has been explicitly set.
  public var hasInitialMarginOnSell: Bool {return _storage._initialMarginOnSell != nil}
  /// Clears the value of `initialMarginOnSell`. Subsequent reads from it will return its default value.
  public mutating func clearInitialMarginOnSell() {_uniqueStorage()._initialMarginOnSell = nil}

  ///Стоимость шага цены.
  public var minPriceIncrementAmount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrementAmount ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrementAmount = newValue}
  }
  /// Returns true if `minPriceIncrementAmount` has been explicitly set.
  public var hasMinPriceIncrementAmount: Bool {return _storage._minPriceIncrementAmount != nil}
  /// Clears the value of `minPriceIncrementAmount`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrementAmount() {_uniqueStorage()._minPriceIncrementAmount = nil}

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Объект передачи информации об акции.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Share {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код (секция торгов).
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///ISIN-идентификатор инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot)
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций в шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Дата IPO акции по UTC.
  public var ipoDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._ipoDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._ipoDate = newValue}
  }
  /// Returns true if `ipoDate` has been explicitly set.
  public var hasIpoDate: Bool {return _storage._ipoDate != nil}
  /// Clears the value of `ipoDate`. Subsequent reads from it will return its default value.
  public mutating func clearIpoDate() {_uniqueStorage()._ipoDate = nil}

  ///Размер выпуска.
  public var issueSize: Int64 {
    get {return _storage._issueSize}
    set {_uniqueStorage()._issueSize = newValue}
  }

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Сектор экономики.
  public var sector: String {
    get {return _storage._sector}
    set {_uniqueStorage()._sector = newValue}
  }

  ///Плановый размер выпуска.
  public var issueSizePlan: Int64 {
    get {return _storage._issueSizePlan}
    set {_uniqueStorage()._issueSizePlan = newValue}
  }

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Признак наличия дивидендной доходности.
  public var divYieldFlag: Bool {
    get {return _storage._divYieldFlag}
    set {_uniqueStorage()._divYieldFlag = newValue}
  }

  ///Тип акции. Возможные значения — `[ShareType](./instruments#sharetype)`.
  public var shareType: Tinkoff_Public_Invest_Api_Contract_V1_ShareType {
    get {return _storage._shareType}
    set {_uniqueStorage()._shareType = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Уникальный идентификатор актива.
  public var assetUid: String {
    get {return _storage._assetUid}
    set {_uniqueStorage()._assetUid = newValue}
  }

  ///Тип площадки торговли.
  public var instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType {
    get {return _storage._instrumentExchange}
    set {_uniqueStorage()._instrumentExchange = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Флаг достаточной ликвидности.
  public var liquidityFlag: Bool {
    get {return _storage._liquidityFlag}
    set {_uniqueStorage()._liquidityFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос НКД по облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Начало запрашиваемого периода по UTC.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание запрашиваемого периода по UTC.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///НКД облигации.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив операций начисления купонов.
  public var accruedInterests: [Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Операция начисления купонов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Дата и время выплаты по UTC.
  public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {self._date = nil}

  ///Величина выплаты.
  public var value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _value ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  ///Величина выплаты в процентах от номинала.
  public var valuePercent: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _valuePercent ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_valuePercent = newValue}
  }
  /// Returns true if `valuePercent` has been explicitly set.
  public var hasValuePercent: Bool {return self._valuePercent != nil}
  /// Clears the value of `valuePercent`. Subsequent reads from it will return its default value.
  public mutating func clearValuePercent() {self._valuePercent = nil}

  ///Номинал облигации.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return self._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {self._nominal = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  fileprivate var _valuePercent: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  fileprivate var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
}

///Запрос информации о фьючерсе
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Идентификатор инструмента.
  public var figi: String = String()

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по фьючерсу
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Гарантийное обеспечение при покупке.
  public var initialMarginOnBuy: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _initialMarginOnBuy ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_initialMarginOnBuy = newValue}
  }
  /// Returns true if `initialMarginOnBuy` has been explicitly set.
  public var hasInitialMarginOnBuy: Bool {return self._initialMarginOnBuy != nil}
  /// Clears the value of `initialMarginOnBuy`. Subsequent reads from it will return its default value.
  public mutating func clearInitialMarginOnBuy() {self._initialMarginOnBuy = nil}

  ///Гарантийное обеспечение при продаже.
  public var initialMarginOnSell: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _initialMarginOnSell ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_initialMarginOnSell = newValue}
  }
  /// Returns true if `initialMarginOnSell` has been explicitly set.
  public var hasInitialMarginOnSell: Bool {return self._initialMarginOnSell != nil}
  /// Clears the value of `initialMarginOnSell`. Subsequent reads from it will return its default value.
  public mutating func clearInitialMarginOnSell() {self._initialMarginOnSell = nil}

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return self._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {self._minPriceIncrement = nil}

  ///Стоимость шага цены.
  public var minPriceIncrementAmount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _minPriceIncrementAmount ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_minPriceIncrementAmount = newValue}
  }
  /// Returns true if `minPriceIncrementAmount` has been explicitly set.
  public var hasMinPriceIncrementAmount: Bool {return self._minPriceIncrementAmount != nil}
  /// Clears the value of `minPriceIncrementAmount`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrementAmount() {self._minPriceIncrementAmount = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _initialMarginOnBuy: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
  fileprivate var _initialMarginOnSell: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
  fileprivate var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  fileprivate var _minPriceIncrementAmount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
}

///Данные по инструменту.
public struct Tinkoff_Public_Invest_Api_Contract_V1_InstrumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Основная информация об инструменте.
  public var instrument: Tinkoff_Public_Invest_Api_Contract_V1_Instrument {
    get {return _instrument ?? Tinkoff_Public_Invest_Api_Contract_V1_Instrument()}
    set {_instrument = newValue}
  }
  /// Returns true if `instrument` has been explicitly set.
  public var hasInstrument: Bool {return self._instrument != nil}
  /// Clears the value of `instrument`. Subsequent reads from it will return its default value.
  public mutating func clearInstrument() {self._instrument = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrument: Tinkoff_Public_Invest_Api_Contract_V1_Instrument? = nil
}

///Объект передачи основной информации об инструменте.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Instrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Тикер инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///Класс-код инструмента.
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///ISIN-идентификатор инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  ///Валюта расчетов.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._klong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._klong = newValue}
  }
  /// Returns true if `klong` has been explicitly set.
  public var hasKlong: Bool {return _storage._klong != nil}
  /// Clears the value of `klong`. Subsequent reads from it will return its default value.
  public mutating func clearKlong() {_uniqueStorage()._klong = nil}

  ///Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
  public var kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._kshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._kshort = newValue}
  }
  /// Returns true if `kshort` has been explicitly set.
  public var hasKshort: Bool {return _storage._kshort != nil}
  /// Clears the value of `kshort`. Subsequent reads from it will return its default value.
  public mutating func clearKshort() {_uniqueStorage()._kshort = nil}

  ///Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlong ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlong = newValue}
  }
  /// Returns true if `dlong` has been explicitly set.
  public var hasDlong: Bool {return _storage._dlong != nil}
  /// Clears the value of `dlong`. Subsequent reads from it will return its default value.
  public mutating func clearDlong() {_uniqueStorage()._dlong = nil}

  ///Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshort ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshort = newValue}
  }
  /// Returns true if `dshort` has been explicitly set.
  public var hasDshort: Bool {return _storage._dshort != nil}
  /// Clears the value of `dshort`. Subsequent reads from it will return its default value.
  public mutating func clearDshort() {_uniqueStorage()._dshort = nil}

  ///Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongMin = newValue}
  }
  /// Returns true if `dlongMin` has been explicitly set.
  public var hasDlongMin: Bool {return _storage._dlongMin != nil}
  /// Clears the value of `dlongMin`. Subsequent reads from it will return its default value.
  public mutating func clearDlongMin() {_uniqueStorage()._dlongMin = nil}

  ///Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortMin ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortMin = newValue}
  }
  /// Returns true if `dshortMin` has been explicitly set.
  public var hasDshortMin: Bool {return _storage._dshortMin != nil}
  /// Clears the value of `dshortMin`. Subsequent reads from it will return its default value.
  public mutating func clearDshortMin() {_uniqueStorage()._dshortMin = nil}

  ///Признак доступности для операций в шорт.
  public var shortEnabledFlag: Bool {
    get {return _storage._shortEnabledFlag}
    set {_uniqueStorage()._shortEnabledFlag = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Tорговая площадка (секция биржи).
  public var exchange: String {
    get {return _storage._exchange}
    set {_uniqueStorage()._exchange = newValue}
  }

  ///Код страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRisk: String {
    get {return _storage._countryOfRisk}
    set {_uniqueStorage()._countryOfRisk = newValue}
  }

  ///Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
  public var countryOfRiskName: String {
    get {return _storage._countryOfRiskName}
    set {_uniqueStorage()._countryOfRiskName = newValue}
  }

  ///Тип инструмента.
  public var instrumentType: String {
    get {return _storage._instrumentType}
    set {_uniqueStorage()._instrumentType = newValue}
  }

  ///Текущий режим торгов инструмента.
  public var tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus {
    get {return _storage._tradingStatus}
    set {_uniqueStorage()._tradingStatus = newValue}
  }

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool {
    get {return _storage._otcFlag}
    set {_uniqueStorage()._otcFlag = newValue}
  }

  ///Признак доступности для покупки.
  public var buyAvailableFlag: Bool {
    get {return _storage._buyAvailableFlag}
    set {_uniqueStorage()._buyAvailableFlag = newValue}
  }

  ///Признак доступности для продажи.
  public var sellAvailableFlag: Bool {
    get {return _storage._sellAvailableFlag}
    set {_uniqueStorage()._sellAvailableFlag = newValue}
  }

  ///Шаг цены.
  public var minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._minPriceIncrement ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._minPriceIncrement = newValue}
  }
  /// Returns true if `minPriceIncrement` has been explicitly set.
  public var hasMinPriceIncrement: Bool {return _storage._minPriceIncrement != nil}
  /// Clears the value of `minPriceIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearMinPriceIncrement() {_uniqueStorage()._minPriceIncrement = nil}

  ///Параметр указывает на возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Реальная площадка исполнения расчетов (биржа).
  public var realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange {
    get {return _storage._realExchange}
    set {_uniqueStorage()._realExchange = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Уникальный идентификатор актива.
  public var assetUid: String {
    get {return _storage._assetUid}
    set {_uniqueStorage()._assetUid = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType {
    get {return _storage._instrumentKind}
    set {_uniqueStorage()._instrumentKind = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  /// Информация о бренде.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_BrandData()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dlongClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dlongClient = newValue}
  }
  /// Returns true if `dlongClient` has been explicitly set.
  public var hasDlongClient: Bool {return _storage._dlongClient != nil}
  /// Clears the value of `dlongClient`. Subsequent reads from it will return its default value.
  public mutating func clearDlongClient() {_uniqueStorage()._dlongClient = nil}

  ///Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
  public var dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dshortClient ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dshortClient = newValue}
  }
  /// Returns true if `dshortClient` has been explicitly set.
  public var hasDshortClient: Bool {return _storage._dshortClient != nil}
  /// Clears the value of `dshortClient`. Subsequent reads from it will return its default value.
  public mutating func clearDshortClient() {_uniqueStorage()._dshortClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос дивидендов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Начало запрашиваемого периода по UTC. Фильтрация происходит по параметру `record_date` — дата фиксации реестра.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание запрашиваемого периода по UTC. Фильтрация происходит по параметру `record_date` — дата фиксации реестра.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Дивиденды.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dividends: [Tinkoff_Public_Invest_Api_Contract_V1_Dividend] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Информация о выплате.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Dividend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Величина дивиденда на 1 ценную бумагу (включая валюту).
  public var dividendNet: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._dividendNet ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._dividendNet = newValue}
  }
  /// Returns true if `dividendNet` has been explicitly set.
  public var hasDividendNet: Bool {return _storage._dividendNet != nil}
  /// Clears the value of `dividendNet`. Subsequent reads from it will return its default value.
  public mutating func clearDividendNet() {_uniqueStorage()._dividendNet = nil}

  ///Дата фактических выплат по UTC.
  public var paymentDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._paymentDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._paymentDate = newValue}
  }
  /// Returns true if `paymentDate` has been explicitly set.
  public var hasPaymentDate: Bool {return _storage._paymentDate != nil}
  /// Clears the value of `paymentDate`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentDate() {_uniqueStorage()._paymentDate = nil}

  ///Дата объявления дивидендов по UTC.
  public var declaredDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._declaredDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._declaredDate = newValue}
  }
  /// Returns true if `declaredDate` has been explicitly set.
  public var hasDeclaredDate: Bool {return _storage._declaredDate != nil}
  /// Clears the value of `declaredDate`. Subsequent reads from it will return its default value.
  public mutating func clearDeclaredDate() {_uniqueStorage()._declaredDate = nil}

  ///Последний день (включительно) покупки для получения выплаты по UTC.
  public var lastBuyDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastBuyDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastBuyDate = newValue}
  }
  /// Returns true if `lastBuyDate` has been explicitly set.
  public var hasLastBuyDate: Bool {return _storage._lastBuyDate != nil}
  /// Clears the value of `lastBuyDate`. Subsequent reads from it will return its default value.
  public mutating func clearLastBuyDate() {_uniqueStorage()._lastBuyDate = nil}

  ///Тип выплаты. Возможные значения: `Regular Cash` – регулярные выплаты, `Cancelled` – выплата отменена, `Daily Accrual` – ежедневное начисление, `Return of Capital` – возврат капитала, прочие типы выплат.
  public var dividendType: String {
    get {return _storage._dividendType}
    set {_uniqueStorage()._dividendType = newValue}
  }

  ///Дата фиксации реестра по UTC.
  public var recordDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._recordDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._recordDate = newValue}
  }
  /// Returns true if `recordDate` has been explicitly set.
  public var hasRecordDate: Bool {return _storage._recordDate != nil}
  /// Clears the value of `recordDate`. Subsequent reads from it will return its default value.
  public mutating func clearRecordDate() {_uniqueStorage()._recordDate = nil}

  ///Регулярность выплаты. Возможные значения: `Annual` – ежегодная, `Semi-Anl` – каждые полгода, прочие типы выплат.
  public var regularity: String {
    get {return _storage._regularity}
    set {_uniqueStorage()._regularity = newValue}
  }

  ///Цена закрытия инструмента на момент `ex_dividend_date`.
  public var closePrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue {
    get {return _storage._closePrice ?? Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue()}
    set {_uniqueStorage()._closePrice = newValue}
  }
  /// Returns true if `closePrice` has been explicitly set.
  public var hasClosePrice: Bool {return _storage._closePrice != nil}
  /// Clears the value of `closePrice`. Subsequent reads from it will return its default value.
  public mutating func clearClosePrice() {_uniqueStorage()._closePrice = nil}

  ///Величина доходности.
  public var yieldValue: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._yieldValue ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._yieldValue = newValue}
  }
  /// Returns true if `yieldValue` has been explicitly set.
  public var hasYieldValue: Bool {return _storage._yieldValue != nil}
  /// Clears the value of `yieldValue`. Subsequent reads from it will return its default value.
  public mutating func clearYieldValue() {_uniqueStorage()._yieldValue = nil}

  ///Дата и время создания записи по UTC.
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос актива по идентификатору.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///UID-идентификатор актива.
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные по активу.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Актив.
  public var asset: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull {
    get {return _asset ?? Tinkoff_Public_Invest_Api_Contract_V1_AssetFull()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  public var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  public mutating func clearAsset() {self._asset = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _asset: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull? = nil
}

///Запрос списка активов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var instrumentType: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType {
    get {return _instrumentType ?? .unspecified}
    set {_instrumentType = newValue}
  }
  /// Returns true if `instrumentType` has been explicitly set.
  public var hasInstrumentType: Bool {return self._instrumentType != nil}
  /// Clears the value of `instrumentType`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentType() {self._instrumentType = nil}

  ///Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
  public var instrumentStatus: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentStatus {
    get {return _instrumentStatus ?? .unspecified}
    set {_instrumentStatus = newValue}
  }
  /// Returns true if `instrumentStatus` has been explicitly set.
  public var hasInstrumentStatus: Bool {return self._instrumentStatus != nil}
  /// Clears the value of `instrumentStatus`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentStatus() {self._instrumentStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrumentType: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType? = nil
  fileprivate var _instrumentStatus: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentStatus? = nil
}

///Список активов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Активы.
  public var assets: [Tinkoff_Public_Invest_Api_Contract_V1_Asset] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetFull {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор актива.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Тип актива.
  public var type: Tinkoff_Public_Invest_Api_Contract_V1_AssetType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///Наименование актива.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Короткое наименование актива.
  public var nameBrief: String {
    get {return _storage._nameBrief}
    set {_uniqueStorage()._nameBrief = newValue}
  }

  ///Описание актива.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  ///Дата и время удаления актива.
  public var deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deletedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deletedAt = newValue}
  }
  /// Returns true if `deletedAt` has been explicitly set.
  public var hasDeletedAt: Bool {return _storage._deletedAt != nil}
  /// Clears the value of `deletedAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeletedAt() {_uniqueStorage()._deletedAt = nil}

  ///Тестирование клиентов.
  public var requiredTests: [String] {
    get {return _storage._requiredTests}
    set {_uniqueStorage()._requiredTests = newValue}
  }

  public var ext: OneOf_Ext? {
    get {return _storage._ext}
    set {_uniqueStorage()._ext = newValue}
  }

  ///Валюта. Обязательно и заполняется только для `type = ASSET_TYPE_CURRENCY`.
  public var currency: Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency {
    get {
      if case .currency(let v)? = _storage._ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency()
    }
    set {_uniqueStorage()._ext = .currency(newValue)}
  }

  ///Ценная бумага. Обязательно и заполняется только для `type = ASSET_TYPE_SECURITY`.
  public var security: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity {
    get {
      if case .security(let v)? = _storage._ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity()
    }
    set {_uniqueStorage()._ext = .security(newValue)}
  }

  ///Номер государственной регистрации.
  public var gosRegCode: String {
    get {return _storage._gosRegCode}
    set {_uniqueStorage()._gosRegCode = newValue}
  }

  ///Код CFI.
  public var cfi: String {
    get {return _storage._cfi}
    set {_uniqueStorage()._cfi = newValue}
  }

  ///Код НРД инструмента.
  public var codeNsd: String {
    get {return _storage._codeNsd}
    set {_uniqueStorage()._codeNsd = newValue}
  }

  ///Статус актива.
  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  ///Бренд.
  public var brand: Tinkoff_Public_Invest_Api_Contract_V1_Brand {
    get {return _storage._brand ?? Tinkoff_Public_Invest_Api_Contract_V1_Brand()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_uniqueStorage()._brand = nil}

  ///Дата и время последнего обновления записи.
  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  ///Код типа ц.б. по классификации Банка России.
  public var brCode: String {
    get {return _storage._brCode}
    set {_uniqueStorage()._brCode = newValue}
  }

  ///Наименование кода типа ц.б. по классификации Банка России.
  public var brCodeName: String {
    get {return _storage._brCodeName}
    set {_uniqueStorage()._brCodeName = newValue}
  }

  ///Массив идентификаторов инструментов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument] {
    get {return _storage._instruments}
    set {_uniqueStorage()._instruments = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Ext: Equatable {
    ///Валюта. Обязательно и заполняется только для `type = ASSET_TYPE_CURRENCY`.
    case currency(Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency)
    ///Ценная бумага. Обязательно и заполняется только для `type = ASSET_TYPE_SECURITY`.
    case security(Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity)

  #if !swift(>=4.1)
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull.OneOf_Ext, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull.OneOf_Ext) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.currency, .currency): return {
        guard case .currency(let l) = lhs, case .currency(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.security, .security): return {
        guard case .security(let l) = lhs, case .security(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Информация об активе.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Asset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор актива.
  public var uid: String = String()

  ///Тип актива.
  public var type: Tinkoff_Public_Invest_Api_Contract_V1_AssetType = .unspecified

  ///Наименование актива.
  public var name: String = String()

  ///Массив идентификаторов инструментов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Валюта.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///ISO-код валюты.
  public var baseCurrency: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Ценная бумага.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///ISIN-идентификатор ценной бумаги.
  public var isin: String = String()

  ///Тип ценной бумаги.
  public var type: String = String()

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified

  public var ext: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity.OneOf_Ext? = nil

  ///Акция. Заполняется только для акций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = share`.
  public var share: Tinkoff_Public_Invest_Api_Contract_V1_AssetShare {
    get {
      if case .share(let v)? = ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetShare()
    }
    set {ext = .share(newValue)}
  }

  ///Облигация. Заполняется только для облигаций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = bond`.
  public var bond: Tinkoff_Public_Invest_Api_Contract_V1_AssetBond {
    get {
      if case .bond(let v)? = ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetBond()
    }
    set {ext = .bond(newValue)}
  }

  ///Структурная нота. Заполняется только для структурных продуктов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = sp`.
  public var sp: Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct {
    get {
      if case .sp(let v)? = ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct()
    }
    set {ext = .sp(newValue)}
  }

  /// Фонд. Заполняется только для фондов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = etf`.
  public var etf: Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf {
    get {
      if case .etf(let v)? = ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf()
    }
    set {ext = .etf(newValue)}
  }

  /// Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов — тип актива `asset.type = ASSET_TYPE_SECURITY` и security.type = `clearing_certificate`.
  public var clearingCertificate: Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate {
    get {
      if case .clearingCertificate(let v)? = ext {return v}
      return Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate()
    }
    set {ext = .clearingCertificate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Ext: Equatable {
    ///Акция. Заполняется только для акций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = share`.
    case share(Tinkoff_Public_Invest_Api_Contract_V1_AssetShare)
    ///Облигация. Заполняется только для облигаций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = bond`.
    case bond(Tinkoff_Public_Invest_Api_Contract_V1_AssetBond)
    ///Структурная нота. Заполняется только для структурных продуктов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = sp`.
    case sp(Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct)
    /// Фонд. Заполняется только для фондов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = etf`.
    case etf(Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf)
    /// Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов — тип актива `asset.type = ASSET_TYPE_SECURITY` и security.type = `clearing_certificate`.
    case clearingCertificate(Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate)

  #if !swift(>=4.1)
    public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity.OneOf_Ext, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity.OneOf_Ext) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.share, .share): return {
        guard case .share(let l) = lhs, case .share(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bond, .bond): return {
        guard case .bond(let l) = lhs, case .bond(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sp, .sp): return {
        guard case .sp(let l) = lhs, case .sp(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.etf, .etf): return {
        guard case .etf(let l) = lhs, case .etf(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.clearingCertificate, .clearingCertificate): return {
        guard case .clearingCertificate(let l) = lhs, case .clearingCertificate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

///Акция.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetShare {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Тип акции.
  public var type: Tinkoff_Public_Invest_Api_Contract_V1_ShareType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///Объем выпуска (шт.).
  public var issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSize ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSize = newValue}
  }
  /// Returns true if `issueSize` has been explicitly set.
  public var hasIssueSize: Bool {return _storage._issueSize != nil}
  /// Clears the value of `issueSize`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSize() {_uniqueStorage()._issueSize = nil}

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Валюта номинала.
  public var nominalCurrency: String {
    get {return _storage._nominalCurrency}
    set {_uniqueStorage()._nominalCurrency = newValue}
  }

  ///Индекс (Bloomberg).
  public var primaryIndex: String {
    get {return _storage._primaryIndex}
    set {_uniqueStorage()._primaryIndex = newValue}
  }

  ///Ставка дивиденда (для привилегированных акций).
  public var dividendRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._dividendRate ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._dividendRate = newValue}
  }
  /// Returns true if `dividendRate` has been explicitly set.
  public var hasDividendRate: Bool {return _storage._dividendRate != nil}
  /// Clears the value of `dividendRate`. Subsequent reads from it will return its default value.
  public mutating func clearDividendRate() {_uniqueStorage()._dividendRate = nil}

  ///Тип привилегированных акций.
  public var preferredShareType: String {
    get {return _storage._preferredShareType}
    set {_uniqueStorage()._preferredShareType = newValue}
  }

  ///Дата IPO.
  public var ipoDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._ipoDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._ipoDate = newValue}
  }
  /// Returns true if `ipoDate` has been explicitly set.
  public var hasIpoDate: Bool {return _storage._ipoDate != nil}
  /// Clears the value of `ipoDate`. Subsequent reads from it will return its default value.
  public mutating func clearIpoDate() {_uniqueStorage()._ipoDate = nil}

  ///Дата регистрации.
  public var registryDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._registryDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._registryDate = newValue}
  }
  /// Returns true if `registryDate` has been explicitly set.
  public var hasRegistryDate: Bool {return _storage._registryDate != nil}
  /// Clears the value of `registryDate`. Subsequent reads from it will return its default value.
  public mutating func clearRegistryDate() {_uniqueStorage()._registryDate = nil}

  ///Признак наличия дивидендной доходности.
  public var divYieldFlag: Bool {
    get {return _storage._divYieldFlag}
    set {_uniqueStorage()._divYieldFlag = newValue}
  }

  ///Форма выпуска ФИ.
  public var issueKind: String {
    get {return _storage._issueKind}
    set {_uniqueStorage()._issueKind = newValue}
  }

  ///Дата размещения акции.
  public var placementDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._placementDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._placementDate = newValue}
  }
  /// Returns true if `placementDate` has been explicitly set.
  public var hasPlacementDate: Bool {return _storage._placementDate != nil}
  /// Clears the value of `placementDate`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementDate() {_uniqueStorage()._placementDate = nil}

  ///ISIN базового актива.
  public var represIsin: String {
    get {return _storage._represIsin}
    set {_uniqueStorage()._represIsin = newValue}
  }

  ///Объявленное количество, шт.
  public var issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSizePlan ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSizePlan = newValue}
  }
  /// Returns true if `issueSizePlan` has been explicitly set.
  public var hasIssueSizePlan: Bool {return _storage._issueSizePlan != nil}
  /// Clears the value of `issueSizePlan`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSizePlan() {_uniqueStorage()._issueSizePlan = nil}

  ///Количество акций в свободном обращении.
  public var totalFloat: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._totalFloat ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._totalFloat = newValue}
  }
  /// Returns true if `totalFloat` has been explicitly set.
  public var hasTotalFloat: Bool {return _storage._totalFloat != nil}
  /// Clears the value of `totalFloat`. Subsequent reads from it will return its default value.
  public mutating func clearTotalFloat() {_uniqueStorage()._totalFloat = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Облигация.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetBond {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Текущий номинал.
  public var currentNominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._currentNominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._currentNominal = newValue}
  }
  /// Returns true if `currentNominal` has been explicitly set.
  public var hasCurrentNominal: Bool {return _storage._currentNominal != nil}
  /// Clears the value of `currentNominal`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentNominal() {_uniqueStorage()._currentNominal = nil}

  ///Наименование заемщика.
  public var borrowName: String {
    get {return _storage._borrowName}
    set {_uniqueStorage()._borrowName = newValue}
  }

  ///Объем эмиссии облигации (стоимость).
  public var issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSize ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSize = newValue}
  }
  /// Returns true if `issueSize` has been explicitly set.
  public var hasIssueSize: Bool {return _storage._issueSize != nil}
  /// Clears the value of `issueSize`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSize() {_uniqueStorage()._issueSize = nil}

  ///Номинал облигации.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Валюта номинала.
  public var nominalCurrency: String {
    get {return _storage._nominalCurrency}
    set {_uniqueStorage()._nominalCurrency = newValue}
  }

  ///Форма выпуска облигации.
  public var issueKind: String {
    get {return _storage._issueKind}
    set {_uniqueStorage()._issueKind = newValue}
  }

  ///Форма дохода облигации.
  public var interestKind: String {
    get {return _storage._interestKind}
    set {_uniqueStorage()._interestKind = newValue}
  }

  ///Количество выплат в год.
  public var couponQuantityPerYear: Int32 {
    get {return _storage._couponQuantityPerYear}
    set {_uniqueStorage()._couponQuantityPerYear = newValue}
  }

  ///Признак облигации с индексируемым номиналом.
  public var indexedNominalFlag: Bool {
    get {return _storage._indexedNominalFlag}
    set {_uniqueStorage()._indexedNominalFlag = newValue}
  }

  ///Признак субординированной облигации.
  public var subordinatedFlag: Bool {
    get {return _storage._subordinatedFlag}
    set {_uniqueStorage()._subordinatedFlag = newValue}
  }

  ///Признак обеспеченной облигации.
  public var collateralFlag: Bool {
    get {return _storage._collateralFlag}
    set {_uniqueStorage()._collateralFlag = newValue}
  }

  ///Признак показывает, что купоны облигации не облагаются налогом — для mass market.
  public var taxFreeFlag: Bool {
    get {return _storage._taxFreeFlag}
    set {_uniqueStorage()._taxFreeFlag = newValue}
  }

  ///Признак облигации с амортизацией долга.
  public var amortizationFlag: Bool {
    get {return _storage._amortizationFlag}
    set {_uniqueStorage()._amortizationFlag = newValue}
  }

  ///Признак облигации с плавающим купоном.
  public var floatingCouponFlag: Bool {
    get {return _storage._floatingCouponFlag}
    set {_uniqueStorage()._floatingCouponFlag = newValue}
  }

  ///Признак бессрочной облигации.
  public var perpetualFlag: Bool {
    get {return _storage._perpetualFlag}
    set {_uniqueStorage()._perpetualFlag = newValue}
  }

  ///Дата погашения облигации.
  public var maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._maturityDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._maturityDate = newValue}
  }
  /// Returns true if `maturityDate` has been explicitly set.
  public var hasMaturityDate: Bool {return _storage._maturityDate != nil}
  /// Clears the value of `maturityDate`. Subsequent reads from it will return its default value.
  public mutating func clearMaturityDate() {_uniqueStorage()._maturityDate = nil}

  ///Описание и условия получения дополнительного дохода.
  public var returnCondition: String {
    get {return _storage._returnCondition}
    set {_uniqueStorage()._returnCondition = newValue}
  }

  ///Дата выпуска облигации.
  public var stateRegDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._stateRegDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._stateRegDate = newValue}
  }
  /// Returns true if `stateRegDate` has been explicitly set.
  public var hasStateRegDate: Bool {return _storage._stateRegDate != nil}
  /// Clears the value of `stateRegDate`. Subsequent reads from it will return its default value.
  public mutating func clearStateRegDate() {_uniqueStorage()._stateRegDate = nil}

  ///Дата размещения облигации.
  public var placementDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._placementDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._placementDate = newValue}
  }
  /// Returns true if `placementDate` has been explicitly set.
  public var hasPlacementDate: Bool {return _storage._placementDate != nil}
  /// Clears the value of `placementDate`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementDate() {_uniqueStorage()._placementDate = nil}

  ///Цена размещения облигации.
  public var placementPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._placementPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._placementPrice = newValue}
  }
  /// Returns true if `placementPrice` has been explicitly set.
  public var hasPlacementPrice: Bool {return _storage._placementPrice != nil}
  /// Clears the value of `placementPrice`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementPrice() {_uniqueStorage()._placementPrice = nil}

  ///Объявленное количество, шт.
  public var issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSizePlan ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSizePlan = newValue}
  }
  /// Returns true if `issueSizePlan` has been explicitly set.
  public var hasIssueSizePlan: Bool {return _storage._issueSizePlan != nil}
  /// Clears the value of `issueSizePlan`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSizePlan() {_uniqueStorage()._issueSizePlan = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Структурная нота.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Наименование заемщика.
  public var borrowName: String {
    get {return _storage._borrowName}
    set {_uniqueStorage()._borrowName = newValue}
  }

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Валюта номинала.
  public var nominalCurrency: String {
    get {return _storage._nominalCurrency}
    set {_uniqueStorage()._nominalCurrency = newValue}
  }

  ///Тип структурной ноты.
  public var type: Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///Стратегия портфеля.
  public var logicPortfolio: String {
    get {return _storage._logicPortfolio}
    set {_uniqueStorage()._logicPortfolio = newValue}
  }

  ///Тип базового актива.
  public var assetType: Tinkoff_Public_Invest_Api_Contract_V1_AssetType {
    get {return _storage._assetType}
    set {_uniqueStorage()._assetType = newValue}
  }

  ///Вид базового актива в зависимости от типа базового актива.
  public var basicAsset: String {
    get {return _storage._basicAsset}
    set {_uniqueStorage()._basicAsset = newValue}
  }

  ///Барьер сохранности в процентах.
  public var safetyBarrier: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._safetyBarrier ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._safetyBarrier = newValue}
  }
  /// Returns true if `safetyBarrier` has been explicitly set.
  public var hasSafetyBarrier: Bool {return _storage._safetyBarrier != nil}
  /// Clears the value of `safetyBarrier`. Subsequent reads from it will return its default value.
  public mutating func clearSafetyBarrier() {_uniqueStorage()._safetyBarrier = nil}

  ///Дата погашения.
  public var maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._maturityDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._maturityDate = newValue}
  }
  /// Returns true if `maturityDate` has been explicitly set.
  public var hasMaturityDate: Bool {return _storage._maturityDate != nil}
  /// Clears the value of `maturityDate`. Subsequent reads from it will return its default value.
  public mutating func clearMaturityDate() {_uniqueStorage()._maturityDate = nil}

  ///Объявленное количество, шт.
  public var issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSizePlan ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSizePlan = newValue}
  }
  /// Returns true if `issueSizePlan` has been explicitly set.
  public var hasIssueSizePlan: Bool {return _storage._issueSizePlan != nil}
  /// Clears the value of `issueSizePlan`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSizePlan() {_uniqueStorage()._issueSizePlan = nil}

  ///Объем размещения.
  public var issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._issueSize ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._issueSize = newValue}
  }
  /// Returns true if `issueSize` has been explicitly set.
  public var hasIssueSize: Bool {return _storage._issueSize != nil}
  /// Clears the value of `issueSize`. Subsequent reads from it will return its default value.
  public mutating func clearIssueSize() {_uniqueStorage()._issueSize = nil}

  ///Дата размещения ноты.
  public var placementDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._placementDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._placementDate = newValue}
  }
  /// Returns true if `placementDate` has been explicitly set.
  public var hasPlacementDate: Bool {return _storage._placementDate != nil}
  /// Clears the value of `placementDate`. Subsequent reads from it will return its default value.
  public mutating func clearPlacementDate() {_uniqueStorage()._placementDate = nil}

  ///Форма выпуска.
  public var issueKind: String {
    get {return _storage._issueKind}
    set {_uniqueStorage()._issueKind = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Фонд.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Суммарные расходы фонда в процентах.
  public var totalExpense: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._totalExpense ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._totalExpense = newValue}
  }
  /// Returns true if `totalExpense` has been explicitly set.
  public var hasTotalExpense: Bool {return _storage._totalExpense != nil}
  /// Clears the value of `totalExpense`. Subsequent reads from it will return its default value.
  public mutating func clearTotalExpense() {_uniqueStorage()._totalExpense = nil}

  ///Барьерная ставка доходности, после которой фонд имеет право на perfomance fee — в процентах.
  public var hurdleRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._hurdleRate ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._hurdleRate = newValue}
  }
  /// Returns true if `hurdleRate` has been explicitly set.
  public var hasHurdleRate: Bool {return _storage._hurdleRate != nil}
  /// Clears the value of `hurdleRate`. Subsequent reads from it will return its default value.
  public mutating func clearHurdleRate() {_uniqueStorage()._hurdleRate = nil}

  ///Комиссия за успешные результаты фонда в процентах.
  public var performanceFee: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._performanceFee ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._performanceFee = newValue}
  }
  /// Returns true if `performanceFee` has been explicitly set.
  public var hasPerformanceFee: Bool {return _storage._performanceFee != nil}
  /// Clears the value of `performanceFee`. Subsequent reads from it will return its default value.
  public mutating func clearPerformanceFee() {_uniqueStorage()._performanceFee = nil}

  ///Фиксированная комиссия за управление в процентах.
  public var fixedCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._fixedCommission ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._fixedCommission = newValue}
  }
  /// Returns true if `fixedCommission` has been explicitly set.
  public var hasFixedCommission: Bool {return _storage._fixedCommission != nil}
  /// Clears the value of `fixedCommission`. Subsequent reads from it will return its default value.
  public mutating func clearFixedCommission() {_uniqueStorage()._fixedCommission = nil}

  ///Тип распределения доходов от выплат по бумагам.
  public var paymentType: String {
    get {return _storage._paymentType}
    set {_uniqueStorage()._paymentType = newValue}
  }

  ///Признак необходимости выхода фонда в плюс для получения комиссии.
  public var watermarkFlag: Bool {
    get {return _storage._watermarkFlag}
    set {_uniqueStorage()._watermarkFlag = newValue}
  }

  ///Премия (надбавка к цене) при покупке доли в фонде — в процентах.
  public var buyPremium: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._buyPremium ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._buyPremium = newValue}
  }
  /// Returns true if `buyPremium` has been explicitly set.
  public var hasBuyPremium: Bool {return _storage._buyPremium != nil}
  /// Clears the value of `buyPremium`. Subsequent reads from it will return its default value.
  public mutating func clearBuyPremium() {_uniqueStorage()._buyPremium = nil}

  ///Ставка дисконта (вычет из цены) при продаже доли в фонде — в процентах.
  public var sellDiscount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._sellDiscount ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._sellDiscount = newValue}
  }
  /// Returns true if `sellDiscount` has been explicitly set.
  public var hasSellDiscount: Bool {return _storage._sellDiscount != nil}
  /// Clears the value of `sellDiscount`. Subsequent reads from it will return its default value.
  public mutating func clearSellDiscount() {_uniqueStorage()._sellDiscount = nil}

  ///Признак ребалансируемости портфеля фонда.
  public var rebalancingFlag: Bool {
    get {return _storage._rebalancingFlag}
    set {_uniqueStorage()._rebalancingFlag = newValue}
  }

  ///Периодичность ребалансировки.
  public var rebalancingFreq: String {
    get {return _storage._rebalancingFreq}
    set {_uniqueStorage()._rebalancingFreq = newValue}
  }

  ///Тип управления.
  public var managementType: String {
    get {return _storage._managementType}
    set {_uniqueStorage()._managementType = newValue}
  }

  ///Индекс, который реплицирует (старается копировать) фонд.
  public var primaryIndex: String {
    get {return _storage._primaryIndex}
    set {_uniqueStorage()._primaryIndex = newValue}
  }

  ///База ETF.
  public var focusType: String {
    get {return _storage._focusType}
    set {_uniqueStorage()._focusType = newValue}
  }

  ///Признак использования заемных активов (плечо).
  public var leveragedFlag: Bool {
    get {return _storage._leveragedFlag}
    set {_uniqueStorage()._leveragedFlag = newValue}
  }

  ///Количество акций в обращении.
  public var numShare: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._numShare ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._numShare = newValue}
  }
  /// Returns true if `numShare` has been explicitly set.
  public var hasNumShare: Bool {return _storage._numShare != nil}
  /// Clears the value of `numShare`. Subsequent reads from it will return its default value.
  public mutating func clearNumShare() {_uniqueStorage()._numShare = nil}

  ///Признак обязательства по отчетности перед регулятором.
  public var ucitsFlag: Bool {
    get {return _storage._ucitsFlag}
    set {_uniqueStorage()._ucitsFlag = newValue}
  }

  ///Дата выпуска.
  public var releasedDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._releasedDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._releasedDate = newValue}
  }
  /// Returns true if `releasedDate` has been explicitly set.
  public var hasReleasedDate: Bool {return _storage._releasedDate != nil}
  /// Clears the value of `releasedDate`. Subsequent reads from it will return its default value.
  public mutating func clearReleasedDate() {_uniqueStorage()._releasedDate = nil}

  ///Описание фонда.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  ///Описание индекса, за которым следует фонд.
  public var primaryIndexDescription: String {
    get {return _storage._primaryIndexDescription}
    set {_uniqueStorage()._primaryIndexDescription = newValue}
  }

  ///Основные компании, в которые вкладывается фонд.
  public var primaryIndexCompany: String {
    get {return _storage._primaryIndexCompany}
    set {_uniqueStorage()._primaryIndexCompany = newValue}
  }

  ///Срок восстановления индекса после просадки.
  public var indexRecoveryPeriod: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._indexRecoveryPeriod ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._indexRecoveryPeriod = newValue}
  }
  /// Returns true if `indexRecoveryPeriod` has been explicitly set.
  public var hasIndexRecoveryPeriod: Bool {return _storage._indexRecoveryPeriod != nil}
  /// Clears the value of `indexRecoveryPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearIndexRecoveryPeriod() {_uniqueStorage()._indexRecoveryPeriod = nil}

  ///IVAV-код.
  public var inavCode: String {
    get {return _storage._inavCode}
    set {_uniqueStorage()._inavCode = newValue}
  }

  ///Признак наличия дивидендной доходности.
  public var divYieldFlag: Bool {
    get {return _storage._divYieldFlag}
    set {_uniqueStorage()._divYieldFlag = newValue}
  }

  ///Комиссия на покрытие расходов фонда в процентах.
  public var expenseCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._expenseCommission ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._expenseCommission = newValue}
  }
  /// Returns true if `expenseCommission` has been explicitly set.
  public var hasExpenseCommission: Bool {return _storage._expenseCommission != nil}
  /// Clears the value of `expenseCommission`. Subsequent reads from it will return its default value.
  public mutating func clearExpenseCommission() {_uniqueStorage()._expenseCommission = nil}

  ///Ошибка следования за индексом в процентах.
  public var primaryIndexTrackingError: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._primaryIndexTrackingError ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._primaryIndexTrackingError = newValue}
  }
  /// Returns true if `primaryIndexTrackingError` has been explicitly set.
  public var hasPrimaryIndexTrackingError: Bool {return _storage._primaryIndexTrackingError != nil}
  /// Clears the value of `primaryIndexTrackingError`. Subsequent reads from it will return its default value.
  public mutating func clearPrimaryIndexTrackingError() {_uniqueStorage()._primaryIndexTrackingError = nil}

  ///Плановая ребалансировка портфеля.
  public var rebalancingPlan: String {
    get {return _storage._rebalancingPlan}
    set {_uniqueStorage()._rebalancingPlan = newValue}
  }

  ///Ставки налогообложения дивидендов и купонов.
  public var taxRate: String {
    get {return _storage._taxRate}
    set {_uniqueStorage()._taxRate = newValue}
  }

  ///Даты ребалансировок.
  public var rebalancingDates: [SwiftProtobuf.Google_Protobuf_Timestamp] {
    get {return _storage._rebalancingDates}
    set {_uniqueStorage()._rebalancingDates = newValue}
  }

  ///Форма выпуска.
  public var issueKind: String {
    get {return _storage._issueKind}
    set {_uniqueStorage()._issueKind = newValue}
  }

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _storage._nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_uniqueStorage()._nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return _storage._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {_uniqueStorage()._nominal = nil}

  ///Валюта номинала.
  public var nominalCurrency: String {
    get {return _storage._nominalCurrency}
    set {_uniqueStorage()._nominalCurrency = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Клиринговый сертификат участия.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Номинал.
  public var nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
    get {return _nominal ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
    set {_nominal = newValue}
  }
  /// Returns true if `nominal` has been explicitly set.
  public var hasNominal: Bool {return self._nominal != nil}
  /// Clears the value of `nominal`. Subsequent reads from it will return its default value.
  public mutating func clearNominal() {self._nominal = nil}

  ///Валюта номинала.
  public var nominalCurrency: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
}

///Бренд.
public struct Tinkoff_Public_Invest_Api_Contract_V1_Brand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///UID-идентификатор бренда.
  public var uid: String = String()

  ///Наименование бренда.
  public var name: String = String()

  ///Описание.
  public var description_p: String = String()

  ///Информация о бренде.
  public var info: String = String()

  ///Компания.
  public var company: String = String()

  ///Сектор.
  public var sector: String = String()

  ///Код страны риска.
  public var countryOfRisk: String = String()

  ///Наименование страны риска.
  public var countryOfRiskName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Идентификаторы инструмента.
public struct Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///UID-идентификатор инструмента.
  public var uid: String = String()

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Тип инструмента.
  public var instrumentType: String = String()

  ///Тикер инструмента.
  public var ticker: String = String()

  ///Класс-код (секция торгов).
  public var classCode: String = String()

  ///Массив связанных инструментов.
  public var links: [Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink] = []

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified

  ///ID позиции.
  public var positionUid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Связь с другим инструментом.
public struct Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Тип связи.
  public var type: String = String()

  ///UID-идентификатор связанного инструмента.
  public var instrumentUid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос списка избранных инструментов, входные параметры не требуются.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор группы.
  public var groupID: String {
    get {return _groupID ?? String()}
    set {_groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  public var hasGroupID: Bool {return self._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  public mutating func clearGroupID() {self._groupID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupID: String? = nil
}

///В ответ передается список избранных инструментов в качестве массива.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив инструментов.
  public var favoriteInstruments: [Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument] = []

  ///Уникальный идентификатор группы.
  public var groupID: String {
    get {return _groupID ?? String()}
    set {_groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  public var hasGroupID: Bool {return self._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  public mutating func clearGroupID() {self._groupID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupID: String? = nil
}

///Массив избранных инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String = String()

  ///Тикер инструмента.
  public var ticker: String = String()

  ///Класс-код инструмента.
  public var classCode: String = String()

  ///ISIN-идентификатор инструмента.
  public var isin: String = String()

  ///Тип инструмента.
  public var instrumentType: String = String()

  ///Название инструмента.
  public var name: String = String()

  ///Уникальный идентификатор инструмента.
  public var uid: String = String()

  ///Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
  public var otcFlag: Bool = false

  ///Возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool = false

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос редактирования списка избранных инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив инструментов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument] = []

  ///Тип действия со списком.
  public var actionType: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType = .unspecified

  ///Уникальный идентификатор группы.
  public var groupID: String {
    get {return _groupID ?? String()}
    set {_groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  public var hasGroupID: Bool {return self._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  public mutating func clearGroupID() {self._groupID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupID: String? = nil
}

///Массив инструментов для редактирования списка избранных инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///FIGI-идентификатор инструмента.
  public var figi: String {
    get {return _figi ?? String()}
    set {_figi = newValue}
  }
  /// Returns true if `figi` has been explicitly set.
  public var hasFigi: Bool {return self._figi != nil}
  /// Clears the value of `figi`. Subsequent reads from it will return its default value.
  public mutating func clearFigi() {self._figi = nil}

  ///Идентификатор инструмента — `figi` или `instrument_uid`.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _figi: String? = nil
}

///Результат редактирования списка избранных инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив инструментов.
  public var favoriteInstruments: [Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument] = []

  ///Уникальный идентификатор группы.
  public var groupID: String {
    get {return _groupID ?? String()}
    set {_groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  public var hasGroupID: Bool {return self._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  public mutating func clearGroupID() {self._groupID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupID: String? = nil
}

///Запрос создания новой группы избранных инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Название группы, не более 255 символов.
  public var groupName: String = String()

  ///Цвет группы. Принимает значения в HEX-формате, от "000000" до "FFFFFF"
  public var groupColor: String = String()

  ///Описание
  public var note: String {
    get {return _note ?? String()}
    set {_note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  public var hasNote: Bool {return self._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  public mutating func clearNote() {self._note = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _note: String? = nil
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор группы.
  public var groupID: String = String()

  ///Название группы.
  public var groupName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Уникальный идентификатор группы.
  public var groupID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив идентификаторов инструментов. Принимает значение `figi` или `instrument_uid`. Если в группе будет хотя бы один из инструментов массива, то в ответе у группы вернется признак `containsInstrument = true`.
  public var instrumentID: [String] = []

  ///Массив идентификаторов групп, которые необходимо исключить из ответа.
  public var excludedGroupID: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив групп избранных списков инструментов.
  public var groups: [Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.FavoriteGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct FavoriteGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    ///Уникальный идентификатор группы.
    public var groupID: String = String()

    ///Название группы.
    public var groupName: String = String()

    ///Цвет группы в HEX-формате.
    public var color: String = String()

    ///Количество инструментов в группе.
    public var size: Int32 = 0

    ///Признак наличия в группе хотя бы одного инструмента из запроса.
    public var containsInstrument: Bool {
      get {return _containsInstrument ?? false}
      set {_containsInstrument = newValue}
    }
    /// Returns true if `containsInstrument` has been explicitly set.
    public var hasContainsInstrument: Bool {return self._containsInstrument != nil}
    /// Clears the value of `containsInstrument`. Subsequent reads from it will return its default value.
    public mutating func clearContainsInstrument() {self._containsInstrument = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _containsInstrument: Bool? = nil
  }

  public init() {}
}

///Запрос справочника стран.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Справочник стран.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив стран.
  public var countries: [Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос справочника индексов и товаров
public struct Tinkoff_Public_Invest_Api_Contract_V1_IndicativesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Справочник индексов и товаров
public struct Tinkoff_Public_Invest_Api_Contract_V1_IndicativesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Массив инструментов.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Индикатив
public struct Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// FIGI-идентификатор инструмента.
  public var figi: String = String()

  /// Тикер инструмента.
  public var ticker: String = String()

  /// Класс-код инструмента.
  public var classCode: String = String()

  /// Валюта расчетов.
  public var currency: String = String()

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified

  /// Название инструмента.
  public var name: String = String()

  /// Tорговая площадка (секция биржи).
  public var exchange: String = String()

  /// Уникальный идентификатор инструмента.
  public var uid: String = String()

  /// Признак доступности для покупки.
  public var buyAvailableFlag: Bool = false

  /// Признак доступности для продажи.
  public var sellAvailableFlag: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Данные о стране.
public struct Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Двухбуквенный код страны.
  public var alfaTwo: String = String()

  ///Трехбуквенный код страны.
  public var alfaThree: String = String()

  ///Наименование страны.
  public var name: String = String()

  ///Краткое наименование страны.
  public var nameBrief: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос на поиск инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Строка поиска.
  public var query: String = String()

  ///Фильтр по типу инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType {
    get {return _instrumentKind ?? .unspecified}
    set {_instrumentKind = newValue}
  }
  /// Returns true if `instrumentKind` has been explicitly set.
  public var hasInstrumentKind: Bool {return self._instrumentKind != nil}
  /// Clears the value of `instrumentKind`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentKind() {self._instrumentKind = nil}

  ///Фильтр для отображения только торговых инструментов.
  public var apiTradeAvailableFlag: Bool {
    get {return _apiTradeAvailableFlag ?? false}
    set {_apiTradeAvailableFlag = newValue}
  }
  /// Returns true if `apiTradeAvailableFlag` has been explicitly set.
  public var hasApiTradeAvailableFlag: Bool {return self._apiTradeAvailableFlag != nil}
  /// Clears the value of `apiTradeAvailableFlag`. Subsequent reads from it will return its default value.
  public mutating func clearApiTradeAvailableFlag() {self._apiTradeAvailableFlag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType? = nil
  fileprivate var _apiTradeAvailableFlag: Bool? = nil
}

///Результат поиска инструментов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив инструментов, удовлетворяющих условиям поиска.
  public var instruments: [Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Краткая информация об инструменте.
public struct Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///ISIN инструмента.
  public var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  ///FIGI инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Ticker инструмента.
  public var ticker: String {
    get {return _storage._ticker}
    set {_uniqueStorage()._ticker = newValue}
  }

  ///ClassCode инструмента.
  public var classCode: String {
    get {return _storage._classCode}
    set {_uniqueStorage()._classCode = newValue}
  }

  ///Тип инструмента.
  public var instrumentType: String {
    get {return _storage._instrumentType}
    set {_uniqueStorage()._instrumentType = newValue}
  }

  ///Название инструмента.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///Уникальный идентификатор инструмента.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  ///Уникальный идентификатор позиции инструмента.
  public var positionUid: String {
    get {return _storage._positionUid}
    set {_uniqueStorage()._positionUid = newValue}
  }

  ///Тип инструмента.
  public var instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType {
    get {return _storage._instrumentKind}
    set {_uniqueStorage()._instrumentKind = newValue}
  }

  ///Возможность торговать инструментом через API.
  public var apiTradeAvailableFlag: Bool {
    get {return _storage._apiTradeAvailableFlag}
    set {_uniqueStorage()._apiTradeAvailableFlag = newValue}
  }

  ///Признак доступности для ИИС.
  public var forIisFlag: Bool {
    get {return _storage._forIisFlag}
    set {_uniqueStorage()._forIisFlag = newValue}
  }

  ///Дата первой минутной свечи.
  public var first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1MinCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1MinCandleDate = newValue}
  }
  /// Returns true if `first1MinCandleDate` has been explicitly set.
  public var hasFirst1MinCandleDate: Bool {return _storage._first1MinCandleDate != nil}
  /// Clears the value of `first1MinCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1MinCandleDate() {_uniqueStorage()._first1MinCandleDate = nil}

  ///Дата первой дневной свечи.
  public var first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._first1DayCandleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._first1DayCandleDate = newValue}
  }
  /// Returns true if `first1DayCandleDate` has been explicitly set.
  public var hasFirst1DayCandleDate: Bool {return _storage._first1DayCandleDate != nil}
  /// Clears the value of `first1DayCandleDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirst1DayCandleDate() {_uniqueStorage()._first1DayCandleDate = nil}

  ///Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
  public var forQualInvestorFlag: Bool {
    get {return _storage._forQualInvestorFlag}
    set {_uniqueStorage()._forQualInvestorFlag = newValue}
  }

  ///Флаг, отображающий доступность торговли инструментом по выходным.
  public var weekendFlag: Bool {
    get {return _storage._weekendFlag}
    set {_uniqueStorage()._weekendFlag = newValue}
  }

  ///Флаг заблокированного ТКС.
  public var blockedTcaFlag: Bool {
    get {return _storage._blockedTcaFlag}
    set {_uniqueStorage()._blockedTcaFlag = newValue}
  }

  ///Количество бумаг в лоте.
  public var lot: Int32 {
    get {return _storage._lot}
    set {_uniqueStorage()._lot = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос списка брендов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Настройки пагинации.
  public var paging: Tinkoff_Public_Invest_Api_Contract_V1_Page {
    get {return _paging ?? Tinkoff_Public_Invest_Api_Contract_V1_Page()}
    set {_paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return self._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {self._paging = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paging: Tinkoff_Public_Invest_Api_Contract_V1_Page? = nil
}

///Запрос бренда.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBrandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///UID-идентификатор бренда.
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Список брендов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив брендов.
  public var brands: [Tinkoff_Public_Invest_Api_Contract_V1_Brand] = []

  ///Данные по пагинации.
  public var paging: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse {
    get {return _paging ?? Tinkoff_Public_Invest_Api_Contract_V1_PageResponse()}
    set {_paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return self._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {self._paging = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paging: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse? = nil
}

///Запрос фундаментальных показателей
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив идентификаторов активов, не более 100 шт.
  public var assets: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Фундаментальные показатели
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fundamentals: [Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.StatisticResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  ///Фундаментальные показатели по активу
  public struct StatisticResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    ///Идентификатор актива.
    public var assetUid: String {
      get {return _storage._assetUid}
      set {_uniqueStorage()._assetUid = newValue}
    }

    ///Валюта.
    public var currency: String {
      get {return _storage._currency}
      set {_uniqueStorage()._currency = newValue}
    }

    ///Рыночная капитализация.
    public var marketCapitalization: Double {
      get {return _storage._marketCapitalization}
      set {_uniqueStorage()._marketCapitalization = newValue}
    }

    ///Максимум за год.
    public var highPriceLast52Weeks: Double {
      get {return _storage._highPriceLast52Weeks}
      set {_uniqueStorage()._highPriceLast52Weeks = newValue}
    }

    ///Минимум за год.
    public var lowPriceLast52Weeks: Double {
      get {return _storage._lowPriceLast52Weeks}
      set {_uniqueStorage()._lowPriceLast52Weeks = newValue}
    }

    ///Средний объем торгов за 10 дней.
    public var averageDailyVolumeLast10Days: Double {
      get {return _storage._averageDailyVolumeLast10Days}
      set {_uniqueStorage()._averageDailyVolumeLast10Days = newValue}
    }

    ///Средний объем торгов за месяц.
    public var averageDailyVolumeLast4Weeks: Double {
      get {return _storage._averageDailyVolumeLast4Weeks}
      set {_uniqueStorage()._averageDailyVolumeLast4Weeks = newValue}
    }

    public var beta: Double {
      get {return _storage._beta}
      set {_uniqueStorage()._beta = newValue}
    }

    ///Доля акций в свободном обращении.
    public var freeFloat: Double {
      get {return _storage._freeFloat}
      set {_uniqueStorage()._freeFloat = newValue}
    }

    ///Процент форвардной дивидендной доходности по отношению к цене акций.
    public var forwardAnnualDividendYield: Double {
      get {return _storage._forwardAnnualDividendYield}
      set {_uniqueStorage()._forwardAnnualDividendYield = newValue}
    }

    ///Количество акций в обращении.
    public var sharesOutstanding: Double {
      get {return _storage._sharesOutstanding}
      set {_uniqueStorage()._sharesOutstanding = newValue}
    }

    ///Выручка.
    public var revenueTtm: Double {
      get {return _storage._revenueTtm}
      set {_uniqueStorage()._revenueTtm = newValue}
    }

    ///EBITDA — прибыль до вычета процентов, налогов, износа и амортизации.
    public var ebitdaTtm: Double {
      get {return _storage._ebitdaTtm}
      set {_uniqueStorage()._ebitdaTtm = newValue}
    }

    ///Чистая прибыль.
    public var netIncomeTtm: Double {
      get {return _storage._netIncomeTtm}
      set {_uniqueStorage()._netIncomeTtm = newValue}
    }

    ///EPS — величина чистой прибыли компании, которая приходится на каждую обыкновенную акцию.
    public var epsTtm: Double {
      get {return _storage._epsTtm}
      set {_uniqueStorage()._epsTtm = newValue}
    }

    ///EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции.
    public var dilutedEpsTtm: Double {
      get {return _storage._dilutedEpsTtm}
      set {_uniqueStorage()._dilutedEpsTtm = newValue}
    }

    ///Свободный денежный поток.
    public var freeCashFlowTtm: Double {
      get {return _storage._freeCashFlowTtm}
      set {_uniqueStorage()._freeCashFlowTtm = newValue}
    }

    ///Среднегодовой  рocт выручки за 5 лет.
    public var fiveYearAnnualRevenueGrowthRate: Double {
      get {return _storage._fiveYearAnnualRevenueGrowthRate}
      set {_uniqueStorage()._fiveYearAnnualRevenueGrowthRate = newValue}
    }

    ///Среднегодовой  рocт выручки за 3 года.
    public var threeYearAnnualRevenueGrowthRate: Double {
      get {return _storage._threeYearAnnualRevenueGrowthRate}
      set {_uniqueStorage()._threeYearAnnualRevenueGrowthRate = newValue}
    }

    ///Соотношение рыночной капитализации компании к ее чистой прибыли.
    public var peRatioTtm: Double {
      get {return _storage._peRatioTtm}
      set {_uniqueStorage()._peRatioTtm = newValue}
    }

    ///Соотношение рыночной капитализации компании к ее выручке.
    public var priceToSalesTtm: Double {
      get {return _storage._priceToSalesTtm}
      set {_uniqueStorage()._priceToSalesTtm = newValue}
    }

    ///Соотношение рыночной капитализации компании к ее балансовой стоимости.
    public var priceToBookTtm: Double {
      get {return _storage._priceToBookTtm}
      set {_uniqueStorage()._priceToBookTtm = newValue}
    }

    ///Соотношение рыночной капитализации компании к ее свободному денежному потоку.
    public var priceToFreeCashFlowTtm: Double {
      get {return _storage._priceToFreeCashFlowTtm}
      set {_uniqueStorage()._priceToFreeCashFlowTtm = newValue}
    }

    ///Рыночная стоимость компании.
    public var totalEnterpriseValueMrq: Double {
      get {return _storage._totalEnterpriseValueMrq}
      set {_uniqueStorage()._totalEnterpriseValueMrq = newValue}
    }

    ///Соотношение EV и EBITDA.
    public var evToEbitdaMrq: Double {
      get {return _storage._evToEbitdaMrq}
      set {_uniqueStorage()._evToEbitdaMrq = newValue}
    }

    ///Маржа чистой прибыли.
    public var netMarginMrq: Double {
      get {return _storage._netMarginMrq}
      set {_uniqueStorage()._netMarginMrq = newValue}
    }

    ///Рентабельность чистой прибыли.
    public var netInterestMarginMrq: Double {
      get {return _storage._netInterestMarginMrq}
      set {_uniqueStorage()._netInterestMarginMrq = newValue}
    }

    ///Рентабельность собственного капитала.
    public var roe: Double {
      get {return _storage._roe}
      set {_uniqueStorage()._roe = newValue}
    }

    ///Рентабельность активов.
    public var roa: Double {
      get {return _storage._roa}
      set {_uniqueStorage()._roa = newValue}
    }

    ///Рентабельность активов.
    public var roic: Double {
      get {return _storage._roic}
      set {_uniqueStorage()._roic = newValue}
    }

    ///Сумма краткосрочных и долгосрочных обязательств компании.
    public var totalDebtMrq: Double {
      get {return _storage._totalDebtMrq}
      set {_uniqueStorage()._totalDebtMrq = newValue}
    }

    ///Соотношение долга к собственному капиталу.
    public var totalDebtToEquityMrq: Double {
      get {return _storage._totalDebtToEquityMrq}
      set {_uniqueStorage()._totalDebtToEquityMrq = newValue}
    }

    ///Total Debt/EBITDA.
    public var totalDebtToEbitdaMrq: Double {
      get {return _storage._totalDebtToEbitdaMrq}
      set {_uniqueStorage()._totalDebtToEbitdaMrq = newValue}
    }

    ///Отношение свободногоо кэша к стоимости.
    public var freeCashFlowToPrice: Double {
      get {return _storage._freeCashFlowToPrice}
      set {_uniqueStorage()._freeCashFlowToPrice = newValue}
    }

    ///Отношение чистого долга к EBITDA.
    public var netDebtToEbitda: Double {
      get {return _storage._netDebtToEbitda}
      set {_uniqueStorage()._netDebtToEbitda = newValue}
    }

    ///Коэффициент текущей ликвидности.
    public var currentRatioMrq: Double {
      get {return _storage._currentRatioMrq}
      set {_uniqueStorage()._currentRatioMrq = newValue}
    }

    ///Коэффициент покрытия фиксированных платежей — FCCR.
    public var fixedChargeCoverageRatioFy: Double {
      get {return _storage._fixedChargeCoverageRatioFy}
      set {_uniqueStorage()._fixedChargeCoverageRatioFy = newValue}
    }

    ///Дивидендная доходность за 12 месяцев.
    public var dividendYieldDailyTtm: Double {
      get {return _storage._dividendYieldDailyTtm}
      set {_uniqueStorage()._dividendYieldDailyTtm = newValue}
    }

    ///Выплаченные дивиденды за 12 месяцев.
    public var dividendRateTtm: Double {
      get {return _storage._dividendRateTtm}
      set {_uniqueStorage()._dividendRateTtm = newValue}
    }

    ///Значение дивидендов на акцию.
    public var dividendsPerShare: Double {
      get {return _storage._dividendsPerShare}
      set {_uniqueStorage()._dividendsPerShare = newValue}
    }

    ///Средняя дивидендная доходность за 5 лет.
    public var fiveYearsAverageDividendYield: Double {
      get {return _storage._fiveYearsAverageDividendYield}
      set {_uniqueStorage()._fiveYearsAverageDividendYield = newValue}
    }

    ///Среднегодовой рост дивидендов за 5 лет.
    public var fiveYearAnnualDividendGrowthRate: Double {
      get {return _storage._fiveYearAnnualDividendGrowthRate}
      set {_uniqueStorage()._fiveYearAnnualDividendGrowthRate = newValue}
    }

    ///Процент чистой прибыли, уходящий на выплату дивидендов.
    public var dividendPayoutRatioFy: Double {
      get {return _storage._dividendPayoutRatioFy}
      set {_uniqueStorage()._dividendPayoutRatioFy = newValue}
    }

    ///Деньги, потраченные на обратный выкуп акций.
    public var buyBackTtm: Double {
      get {return _storage._buyBackTtm}
      set {_uniqueStorage()._buyBackTtm = newValue}
    }

    ///Рост выручки за 1 год.
    public var oneYearAnnualRevenueGrowthRate: Double {
      get {return _storage._oneYearAnnualRevenueGrowthRate}
      set {_uniqueStorage()._oneYearAnnualRevenueGrowthRate = newValue}
    }

    ///Код страны.
    public var domicileIndicatorCode: String {
      get {return _storage._domicileIndicatorCode}
      set {_uniqueStorage()._domicileIndicatorCode = newValue}
    }

    ///Соотношение депозитарной расписки к акциям.
    public var adrToCommonShareRatio: Double {
      get {return _storage._adrToCommonShareRatio}
      set {_uniqueStorage()._adrToCommonShareRatio = newValue}
    }

    ///Количество сотрудников.
    public var numberOfEmployees: Double {
      get {return _storage._numberOfEmployees}
      set {_uniqueStorage()._numberOfEmployees = newValue}
    }

    public var exDividendDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._exDividendDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._exDividendDate = newValue}
    }
    /// Returns true if `exDividendDate` has been explicitly set.
    public var hasExDividendDate: Bool {return _storage._exDividendDate != nil}
    /// Clears the value of `exDividendDate`. Subsequent reads from it will return its default value.
    public mutating func clearExDividendDate() {_uniqueStorage()._exDividendDate = nil}

    ///Начало фискального периода.
    public var fiscalPeriodStartDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._fiscalPeriodStartDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._fiscalPeriodStartDate = newValue}
    }
    /// Returns true if `fiscalPeriodStartDate` has been explicitly set.
    public var hasFiscalPeriodStartDate: Bool {return _storage._fiscalPeriodStartDate != nil}
    /// Clears the value of `fiscalPeriodStartDate`. Subsequent reads from it will return its default value.
    public mutating func clearFiscalPeriodStartDate() {_uniqueStorage()._fiscalPeriodStartDate = nil}

    ///Окончание фискального периода.
    public var fiscalPeriodEndDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._fiscalPeriodEndDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._fiscalPeriodEndDate = newValue}
    }
    /// Returns true if `fiscalPeriodEndDate` has been explicitly set.
    public var hasFiscalPeriodEndDate: Bool {return _storage._fiscalPeriodEndDate != nil}
    /// Clears the value of `fiscalPeriodEndDate`. Subsequent reads from it will return its default value.
    public mutating func clearFiscalPeriodEndDate() {_uniqueStorage()._fiscalPeriodEndDate = nil}

    ///Изменение общего дохода за 5 лет.
    public var revenueChangeFiveYears: Double {
      get {return _storage._revenueChangeFiveYears}
      set {_uniqueStorage()._revenueChangeFiveYears = newValue}
    }

    ///Изменение EPS за 5 лет.
    public var epsChangeFiveYears: Double {
      get {return _storage._epsChangeFiveYears}
      set {_uniqueStorage()._epsChangeFiveYears = newValue}
    }

    ///Изменение EBIDTA за 5 лет.
    public var ebitdaChangeFiveYears: Double {
      get {return _storage._ebitdaChangeFiveYears}
      set {_uniqueStorage()._ebitdaChangeFiveYears = newValue}
    }

    ///Изменение общей задолжности за 5 лет.
    public var totalDebtChangeFiveYears: Double {
      get {return _storage._totalDebtChangeFiveYears}
      set {_uniqueStorage()._totalDebtChangeFiveYears = newValue}
    }

    ///Отношение EV к выручке.
    public var evToSales: Double {
      get {return _storage._evToSales}
      set {_uniqueStorage()._evToSales = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

///Запрос отчетов эмитентов
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификатор инструмента в формате UID.
  public var instrumentID: String = String()

  ///Начало запрашиваемого периода по UTC.
  public var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  ///Окончание запрашиваемого периода по UTC.
  public var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Отчеты эмитентов
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Массив событий по облигации.
  public var events: [Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.GetAssetReportsEvent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AssetReportPeriodType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Не указан.
    case periodTypeUnspecified // = 0

    /// Квартальный.
    case periodTypeQuarter // = 1

    /// Полугодовой.
    case periodTypeSemiannual // = 2

    /// Годовой.
    case periodTypeAnnual // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .periodTypeUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .periodTypeUnspecified
      case 1: self = .periodTypeQuarter
      case 2: self = .periodTypeSemiannual
      case 3: self = .periodTypeAnnual
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .periodTypeUnspecified: return 0
      case .periodTypeQuarter: return 1
      case .periodTypeSemiannual: return 2
      case .periodTypeAnnual: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  ///Отчет
  public struct GetAssetReportsEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Идентификатор инструмента.
    public var instrumentID: String = String()

    /// Дата публикации отчета.
    public var reportDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _reportDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_reportDate = newValue}
    }
    /// Returns true if `reportDate` has been explicitly set.
    public var hasReportDate: Bool {return self._reportDate != nil}
    /// Clears the value of `reportDate`. Subsequent reads from it will return its default value.
    public mutating func clearReportDate() {self._reportDate = nil}

    /// Год периода отчета.
    public var periodYear: Int32 = 0

    /// Номер периода.
    public var periodNum: Int32 = 0

    /// Тип отчета.
    public var periodType: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.AssetReportPeriodType = .periodTypeUnspecified

    /// Дата создания записи.
    public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    public var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    public mutating func clearCreatedAt() {self._createdAt = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _reportDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.AssetReportPeriodType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.AssetReportPeriodType] = [
    .periodTypeUnspecified,
    .periodTypeQuarter,
    .periodTypeSemiannual,
    .periodTypeAnnual,
  ]
}

#endif  // swift(>=4.2)

///Запрос консенсус-прогнозов
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Настройки пагинации.
  public var paging: Tinkoff_Public_Invest_Api_Contract_V1_Page {
    get {return _paging ?? Tinkoff_Public_Invest_Api_Contract_V1_Page()}
    set {_paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return self._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {self._paging = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paging: Tinkoff_Public_Invest_Api_Contract_V1_Page? = nil
}

///Консенсус-прогнозы
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Массив прогнозов.
  public var items: [Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.ConsensusForecastsItem] = []

  ///Данные по пагинации.
  public var page: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse {
    get {return _page ?? Tinkoff_Public_Invest_Api_Contract_V1_PageResponse()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  ///Прогноз
  public struct ConsensusForecastsItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// UID-идентификатор.
    public var uid: String {
      get {return _storage._uid}
      set {_uniqueStorage()._uid = newValue}
    }

    /// UID-идентификатор актива.
    public var assetUid: String {
      get {return _storage._assetUid}
      set {_uniqueStorage()._assetUid = newValue}
    }

    /// Дата и время создания записи.
    public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    public var hasCreatedAt: Bool {return _storage._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

    /// Целевая цена на 12 месяцев.
    public var bestTargetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._bestTargetPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._bestTargetPrice = newValue}
    }
    /// Returns true if `bestTargetPrice` has been explicitly set.
    public var hasBestTargetPrice: Bool {return _storage._bestTargetPrice != nil}
    /// Clears the value of `bestTargetPrice`. Subsequent reads from it will return its default value.
    public mutating func clearBestTargetPrice() {_uniqueStorage()._bestTargetPrice = nil}

    /// Минимальная прогнозная цена.
    public var bestTargetLow: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._bestTargetLow ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._bestTargetLow = newValue}
    }
    /// Returns true if `bestTargetLow` has been explicitly set.
    public var hasBestTargetLow: Bool {return _storage._bestTargetLow != nil}
    /// Clears the value of `bestTargetLow`. Subsequent reads from it will return its default value.
    public mutating func clearBestTargetLow() {_uniqueStorage()._bestTargetLow = nil}

    /// Максимальная прогнозная цена.
    public var bestTargetHigh: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _storage._bestTargetHigh ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_uniqueStorage()._bestTargetHigh = newValue}
    }
    /// Returns true if `bestTargetHigh` has been explicitly set.
    public var hasBestTargetHigh: Bool {return _storage._bestTargetHigh != nil}
    /// Clears the value of `bestTargetHigh`. Subsequent reads from it will return its default value.
    public mutating func clearBestTargetHigh() {_uniqueStorage()._bestTargetHigh = nil}

    /// Количество аналитиков рекомендующих покупать.
    public var totalBuyRecommend: Int32 {
      get {return _storage._totalBuyRecommend}
      set {_uniqueStorage()._totalBuyRecommend = newValue}
    }

    /// Количество аналитиков рекомендующих держать.
    public var totalHoldRecommend: Int32 {
      get {return _storage._totalHoldRecommend}
      set {_uniqueStorage()._totalHoldRecommend = newValue}
    }

    /// Количество аналитиков рекомендующих продавать.
    public var totalSellRecommend: Int32 {
      get {return _storage._totalSellRecommend}
      set {_uniqueStorage()._totalSellRecommend = newValue}
    }

    /// Валюта прогнозов инструмента.
    public var currency: String {
      get {return _storage._currency}
      set {_uniqueStorage()._currency = newValue}
    }

    /// Консенсус-прогноз.
    public var consensus: Tinkoff_Public_Invest_Api_Contract_V1_Recommendation {
      get {return _storage._consensus}
      set {_uniqueStorage()._consensus = newValue}
    }

    /// Дата прогноза.
    public var prognosisDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._prognosisDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._prognosisDate = newValue}
    }
    /// Returns true if `prognosisDate` has been explicitly set.
    public var hasPrognosisDate: Bool {return _storage._prognosisDate != nil}
    /// Clears the value of `prognosisDate`. Subsequent reads from it will return its default value.
    public mutating func clearPrognosisDate() {_uniqueStorage()._prognosisDate = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _page: Tinkoff_Public_Invest_Api_Contract_V1_PageResponse? = nil
}

///Запрос прогнозов инвестдомов.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetForecastRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Идентификатор инструмента.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Прогнозы инвестдомов по инструменту.
public struct Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив прогнозов.
  public var targets: [Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem] {
    get {return _storage._targets}
    set {_uniqueStorage()._targets = newValue}
  }

  /// Согласованный прогноз.
  public var consensus: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem {
    get {return _storage._consensus ?? Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem()}
    set {_uniqueStorage()._consensus = newValue}
  }
  /// Returns true if `consensus` has been explicitly set.
  public var hasConsensus: Bool {return _storage._consensus != nil}
  /// Clears the value of `consensus`. Subsequent reads from it will return its default value.
  public mutating func clearConsensus() {_uniqueStorage()._consensus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  ///Прогноз
  public struct TargetItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Уникальный идентификатор инструмента.
    public var uid: String = String()

    /// Тикер инструмента.
    public var ticker: String = String()

    /// Название компании, давшей прогноз.
    public var company: String = String()

    /// Прогноз.
    public var recommendation: Tinkoff_Public_Invest_Api_Contract_V1_Recommendation = .unspecified

    ///Дата прогноза.
    public var recommendationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _recommendationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_recommendationDate = newValue}
    }
    /// Returns true if `recommendationDate` has been explicitly set.
    public var hasRecommendationDate: Bool {return self._recommendationDate != nil}
    /// Clears the value of `recommendationDate`. Subsequent reads from it will return its default value.
    public mutating func clearRecommendationDate() {self._recommendationDate = nil}

    /// Валюта.
    public var currency: String = String()

    /// Текущая цена.
    public var currentPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _currentPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_currentPrice = newValue}
    }
    /// Returns true if `currentPrice` has been explicitly set.
    public var hasCurrentPrice: Bool {return self._currentPrice != nil}
    /// Clears the value of `currentPrice`. Subsequent reads from it will return its default value.
    public mutating func clearCurrentPrice() {self._currentPrice = nil}

    /// Прогнозируемая цена.
    public var targetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _targetPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_targetPrice = newValue}
    }
    /// Returns true if `targetPrice` has been explicitly set.
    public var hasTargetPrice: Bool {return self._targetPrice != nil}
    /// Clears the value of `targetPrice`. Subsequent reads from it will return its default value.
    public mutating func clearTargetPrice() {self._targetPrice = nil}

    /// Изменение цены.
    public var priceChange: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _priceChange ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_priceChange = newValue}
    }
    /// Returns true if `priceChange` has been explicitly set.
    public var hasPriceChange: Bool {return self._priceChange != nil}
    /// Clears the value of `priceChange`. Subsequent reads from it will return its default value.
    public mutating func clearPriceChange() {self._priceChange = nil}

    /// Относительное изменение цены.
    public var priceChangeRel: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _priceChangeRel ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_priceChangeRel = newValue}
    }
    /// Returns true if `priceChangeRel` has been explicitly set.
    public var hasPriceChangeRel: Bool {return self._priceChangeRel != nil}
    /// Clears the value of `priceChangeRel`. Subsequent reads from it will return its default value.
    public mutating func clearPriceChangeRel() {self._priceChangeRel = nil}

    /// Наименование инструмента.
    public var showName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _recommendationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _currentPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _targetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _priceChange: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _priceChangeRel: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  }

  ///Консенсус-прогноз.
  public struct ConsensusItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Уникальный идентификатор инструмента.
    public var uid: String = String()

    /// Тикер инструмента.
    public var ticker: String = String()

    /// Прогноз.
    public var recommendation: Tinkoff_Public_Invest_Api_Contract_V1_Recommendation = .unspecified

    /// Валюта.
    public var currency: String = String()

    /// Текущая цена.
    public var currentPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _currentPrice ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_currentPrice = newValue}
    }
    /// Returns true if `currentPrice` has been explicitly set.
    public var hasCurrentPrice: Bool {return self._currentPrice != nil}
    /// Clears the value of `currentPrice`. Subsequent reads from it will return its default value.
    public mutating func clearCurrentPrice() {self._currentPrice = nil}

    /// Прогнозируемая цена.
    public var consensus: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _consensus ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_consensus = newValue}
    }
    /// Returns true if `consensus` has been explicitly set.
    public var hasConsensus: Bool {return self._consensus != nil}
    /// Clears the value of `consensus`. Subsequent reads from it will return its default value.
    public mutating func clearConsensus() {self._consensus = nil}

    /// Минимальная цена прогноза.
    public var minTarget: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _minTarget ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_minTarget = newValue}
    }
    /// Returns true if `minTarget` has been explicitly set.
    public var hasMinTarget: Bool {return self._minTarget != nil}
    /// Clears the value of `minTarget`. Subsequent reads from it will return its default value.
    public mutating func clearMinTarget() {self._minTarget = nil}

    /// Максимальная цена прогноза.
    public var maxTarget: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _maxTarget ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_maxTarget = newValue}
    }
    /// Returns true if `maxTarget` has been explicitly set.
    public var hasMaxTarget: Bool {return self._maxTarget != nil}
    /// Clears the value of `maxTarget`. Subsequent reads from it will return its default value.
    public mutating func clearMaxTarget() {self._maxTarget = nil}

    /// Изменение цены.
    public var priceChange: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _priceChange ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_priceChange = newValue}
    }
    /// Returns true if `priceChange` has been explicitly set.
    public var hasPriceChange: Bool {return self._priceChange != nil}
    /// Clears the value of `priceChange`. Subsequent reads from it will return its default value.
    public mutating func clearPriceChange() {self._priceChange = nil}

    /// Относительное изменение цены.
    public var priceChangeRel: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _priceChangeRel ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_priceChangeRel = newValue}
    }
    /// Returns true if `priceChangeRel` has been explicitly set.
    public var hasPriceChangeRel: Bool {return self._priceChangeRel != nil}
    /// Clears the value of `priceChangeRel`. Subsequent reads from it will return its default value.
    public mutating func clearPriceChangeRel() {self._priceChangeRel = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _currentPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _consensus: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _minTarget: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _maxTarget: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _priceChange: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    fileprivate var _priceChangeRel: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Идентификаторы инструментов.
  public var instrumentID: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var instrumentRiskRates: [Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRateResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct RiskRateResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var instrumentUid: String = String()

    /// Ставка риска пользователя  в шорт
    public var shortRiskRate: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate {
      get {return _shortRiskRate ?? Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate()}
      set {_shortRiskRate = newValue}
    }
    /// Returns true if `shortRiskRate` has been explicitly set.
    public var hasShortRiskRate: Bool {return self._shortRiskRate != nil}
    /// Clears the value of `shortRiskRate`. Subsequent reads from it will return its default value.
    public mutating func clearShortRiskRate() {self._shortRiskRate = nil}

    /// Ставка риска пользователя в лонг
    public var longRiskRate: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate {
      get {return _longRiskRate ?? Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate()}
      set {_longRiskRate = newValue}
    }
    /// Returns true if `longRiskRate` has been explicitly set.
    public var hasLongRiskRate: Bool {return self._longRiskRate != nil}
    /// Clears the value of `longRiskRate`. Subsequent reads from it will return its default value.
    public mutating func clearLongRiskRate() {self._longRiskRate = nil}

    ///Доступные ставки риска в шорт
    public var shortRiskRates: [Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate] = []

    ///Доступные ставки риска в лонг
    public var longRiskRates: [Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate] = []

    /// Ошибка.
    public var error: String {
      get {return _error ?? String()}
      set {_error = newValue}
    }
    /// Returns true if `error` has been explicitly set.
    public var hasError: Bool {return self._error != nil}
    /// Clears the value of `error`. Subsequent reads from it will return its default value.
    public mutating func clearError() {self._error = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _shortRiskRate: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate? = nil
    fileprivate var _longRiskRate: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate? = nil
    fileprivate var _error: String? = nil
  }

  public struct RiskRate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Категория риска.
    public var riskLevelCode: String = String()

    /// Значение ставки риска.
    public var value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation {
      get {return _value ?? Tinkoff_Public_Invest_Api_Contract_V1_Quotation()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
  }

  public init() {}
}

public struct Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Название интервала.
  public var type: String = String()

  ///Интервал.
  public var interval: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval {
    get {return _interval ?? Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval()}
    set {_interval = newValue}
  }
  /// Returns true if `interval` has been explicitly set.
  public var hasInterval: Bool {return self._interval != nil}
  /// Clears the value of `interval`. Subsequent reads from it will return its default value.
  public mutating func clearInterval() {self._interval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct TimeInterval {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Время начала интервала.
    public var startTs: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _startTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_startTs = newValue}
    }
    /// Returns true if `startTs` has been explicitly set.
    public var hasStartTs: Bool {return self._startTs != nil}
    /// Clears the value of `startTs`. Subsequent reads from it will return its default value.
    public mutating func clearStartTs() {self._startTs = nil}

    /// Время окончания интервала.
    public var endTs: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _endTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_endTs = newValue}
    }
    /// Returns true if `endTs` has been explicitly set.
    public var hasEndTs: Bool {return self._endTs != nil}
    /// Clears the value of `endTs`. Subsequent reads from it will return its default value.
    public mutating func clearEndTs() {self._endTs = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _startTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _endTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}

  fileprivate var _interval: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tinkoff_Public_Invest_Api_Contract_V1_CouponType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_ShareType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RealExchange: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Recommendation: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_BondType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingDay: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FilterOptionsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_BondResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_BondsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.BondEvent: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Coupon: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_CurrencyResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_CurrenciesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EtfResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EtfsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FutureResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FuturesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_OptionsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Option: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_ShareResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_SharesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Bond: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Currency: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Etf: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Future: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Share: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Instrument: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Dividend: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetFull: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetFull.OneOf_Ext: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Asset: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity.OneOf_Ext: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetShare: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetBond: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_Brand: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.FavoriteGroup: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.StatisticResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.AssetReportPeriodType: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.GetAssetReportsEvent: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.ConsensusForecastsItem: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesRequest: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRateResult: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval: @unchecked Sendable {}
extension Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tinkoff.public.invest.api.contract.v1"

extension Tinkoff_Public_Invest_Api_Contract_V1_CouponType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COUPON_TYPE_UNSPECIFIED"),
    1: .same(proto: "COUPON_TYPE_CONSTANT"),
    2: .same(proto: "COUPON_TYPE_FLOATING"),
    3: .same(proto: "COUPON_TYPE_DISCOUNT"),
    4: .same(proto: "COUPON_TYPE_MORTGAGE"),
    5: .same(proto: "COUPON_TYPE_FIX"),
    6: .same(proto: "COUPON_TYPE_VARIABLE"),
    7: .same(proto: "COUPON_TYPE_OTHER"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPTION_DIRECTION_UNSPECIFIED"),
    1: .same(proto: "OPTION_DIRECTION_PUT"),
    2: .same(proto: "OPTION_DIRECTION_CALL"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPTION_PAYMENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "OPTION_PAYMENT_TYPE_PREMIUM"),
    2: .same(proto: "OPTION_PAYMENT_TYPE_MARGINAL"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPTION_STYLE_UNSPECIFIED"),
    1: .same(proto: "OPTION_STYLE_AMERICAN"),
    2: .same(proto: "OPTION_STYLE_EUROPEAN"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPTION_EXECUTION_TYPE_UNSPECIFIED"),
    1: .same(proto: "OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY"),
    2: .same(proto: "OPTION_EXECUTION_TYPE_CASH_SETTLEMENT"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentIdType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INSTRUMENT_ID_UNSPECIFIED"),
    1: .same(proto: "INSTRUMENT_ID_TYPE_FIGI"),
    2: .same(proto: "INSTRUMENT_ID_TYPE_TICKER"),
    3: .same(proto: "INSTRUMENT_ID_TYPE_UID"),
    4: .same(proto: "INSTRUMENT_ID_TYPE_POSITION_UID"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_ShareType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SHARE_TYPE_UNSPECIFIED"),
    1: .same(proto: "SHARE_TYPE_COMMON"),
    2: .same(proto: "SHARE_TYPE_PREFERRED"),
    3: .same(proto: "SHARE_TYPE_ADR"),
    4: .same(proto: "SHARE_TYPE_GDR"),
    5: .same(proto: "SHARE_TYPE_MLP"),
    6: .same(proto: "SHARE_TYPE_NY_REG_SHRS"),
    7: .same(proto: "SHARE_TYPE_CLOSED_END_FUND"),
    8: .same(proto: "SHARE_TYPE_REIT"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASSET_TYPE_UNSPECIFIED"),
    1: .same(proto: "ASSET_TYPE_CURRENCY"),
    2: .same(proto: "ASSET_TYPE_COMMODITY"),
    3: .same(proto: "ASSET_TYPE_INDEX"),
    4: .same(proto: "ASSET_TYPE_SECURITY"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SP_TYPE_UNSPECIFIED"),
    1: .same(proto: "SP_TYPE_DELIVERABLE"),
    2: .same(proto: "SP_TYPE_NON_DELIVERABLE"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesActionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED"),
    1: .same(proto: "EDIT_FAVORITES_ACTION_TYPE_ADD"),
    2: .same(proto: "EDIT_FAVORITES_ACTION_TYPE_DEL"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RealExchange: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REAL_EXCHANGE_UNSPECIFIED"),
    1: .same(proto: "REAL_EXCHANGE_MOEX"),
    2: .same(proto: "REAL_EXCHANGE_RTS"),
    3: .same(proto: "REAL_EXCHANGE_OTC"),
    4: .same(proto: "REAL_EXCHANGE_DEALER"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Recommendation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RECOMMENDATION_UNSPECIFIED"),
    1: .same(proto: "RECOMMENDATION_BUY"),
    2: .same(proto: "RECOMMENDATION_HOLD"),
    3: .same(proto: "RECOMMENDATION_SELL"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RISK_LEVEL_UNSPECIFIED"),
    1: .same(proto: "RISK_LEVEL_LOW"),
    2: .same(proto: "RISK_LEVEL_MODERATE"),
    3: .same(proto: "RISK_LEVEL_HIGH"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_BondType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BOND_TYPE_UNSPECIFIED"),
    1: .same(proto: "BOND_TYPE_REPLACED"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INSTRUMENT_EXCHANGE_UNSPECIFIED"),
    1: .same(proto: "INSTRUMENT_EXCHANGE_DEALER"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingSchedulesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exchange"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._exchange) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._exchange {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesRequest) -> Bool {
    if lhs._exchange != rhs._exchange {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingSchedulesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exchanges"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.exchanges) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.exchanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exchanges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedulesResponse) -> Bool {
    if lhs.exchanges != rhs.exchanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingSchedule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exchange"),
    2: .same(proto: "days"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.exchange) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.days) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.exchange.isEmpty {
      try visitor.visitSingularStringField(value: self.exchange, fieldNumber: 1)
    }
    if !self.days.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.days, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingSchedule) -> Bool {
    if lhs.exchange != rhs.exchange {return false}
    if lhs.days != rhs.days {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingDay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingDay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .standard(proto: "is_trading_day"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "end_time"),
    7: .standard(proto: "opening_auction_start_time"),
    8: .standard(proto: "closing_auction_end_time"),
    9: .standard(proto: "evening_opening_auction_start_time"),
    10: .standard(proto: "evening_start_time"),
    11: .standard(proto: "evening_end_time"),
    12: .standard(proto: "clearing_start_time"),
    13: .standard(proto: "clearing_end_time"),
    14: .standard(proto: "premarket_start_time"),
    15: .standard(proto: "premarket_end_time"),
    16: .standard(proto: "closing_auction_start_time"),
    17: .standard(proto: "opening_auction_end_time"),
    18: .same(proto: "intervals"),
  ]

  fileprivate class _StorageClass {
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _isTradingDay: Bool = false
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _openingAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _closingAuctionEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eveningOpeningAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eveningStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eveningEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _clearingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _clearingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _premarketStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _premarketEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _closingAuctionStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _openingAuctionEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _intervals: [Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _isTradingDay = source._isTradingDay
      _startTime = source._startTime
      _endTime = source._endTime
      _openingAuctionStartTime = source._openingAuctionStartTime
      _closingAuctionEndTime = source._closingAuctionEndTime
      _eveningOpeningAuctionStartTime = source._eveningOpeningAuctionStartTime
      _eveningStartTime = source._eveningStartTime
      _eveningEndTime = source._eveningEndTime
      _clearingStartTime = source._clearingStartTime
      _clearingEndTime = source._clearingEndTime
      _premarketStartTime = source._premarketStartTime
      _premarketEndTime = source._premarketEndTime
      _closingAuctionStartTime = source._closingAuctionStartTime
      _openingAuctionEndTime = source._openingAuctionEndTime
      _intervals = source._intervals
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._date) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._isTradingDay) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._openingAuctionStartTime) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._closingAuctionEndTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._eveningOpeningAuctionStartTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._eveningStartTime) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._eveningEndTime) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._clearingStartTime) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._clearingEndTime) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._premarketStartTime) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._premarketEndTime) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._closingAuctionStartTime) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._openingAuctionEndTime) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._intervals) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._isTradingDay != false {
        try visitor.visitSingularBoolField(value: _storage._isTradingDay, fieldNumber: 2)
      }
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._openingAuctionStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._closingAuctionEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._eveningOpeningAuctionStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._eveningStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._eveningEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._clearingStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._clearingEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._premarketStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._premarketEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._closingAuctionStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._openingAuctionEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._intervals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._intervals, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingDay, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingDay) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._date != rhs_storage._date {return false}
        if _storage._isTradingDay != rhs_storage._isTradingDay {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._openingAuctionStartTime != rhs_storage._openingAuctionStartTime {return false}
        if _storage._closingAuctionEndTime != rhs_storage._closingAuctionEndTime {return false}
        if _storage._eveningOpeningAuctionStartTime != rhs_storage._eveningOpeningAuctionStartTime {return false}
        if _storage._eveningStartTime != rhs_storage._eveningStartTime {return false}
        if _storage._eveningEndTime != rhs_storage._eveningEndTime {return false}
        if _storage._clearingStartTime != rhs_storage._clearingStartTime {return false}
        if _storage._clearingEndTime != rhs_storage._clearingEndTime {return false}
        if _storage._premarketStartTime != rhs_storage._premarketStartTime {return false}
        if _storage._premarketEndTime != rhs_storage._premarketEndTime {return false}
        if _storage._closingAuctionStartTime != rhs_storage._closingAuctionStartTime {return false}
        if _storage._openingAuctionEndTime != rhs_storage._openingAuctionEndTime {return false}
        if _storage._intervals != rhs_storage._intervals {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "id_type"),
    2: .standard(proto: "class_code"),
    3: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.idType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._classCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idType != .instrumentIDUnspecified {
      try visitor.visitSingularEnumField(value: self.idType, fieldNumber: 1)
    }
    try { if let v = self._classCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentRequest) -> Bool {
    if lhs.idType != rhs.idType {return false}
    if lhs._classCode != rhs._classCode {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_status"),
    2: .standard(proto: "instrument_exchange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._instrumentStatus) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._instrumentExchange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrumentStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._instrumentExchange {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentsRequest) -> Bool {
    if lhs._instrumentStatus != rhs._instrumentStatus {return false}
    if lhs._instrumentExchange != rhs._instrumentExchange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FilterOptionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterOptionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_asset_uid"),
    2: .standard(proto: "basic_asset_position_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._basicAssetUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._basicAssetPositionUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._basicAssetUid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._basicAssetPositionUid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FilterOptionsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FilterOptionsRequest) -> Bool {
    if lhs._basicAssetUid != rhs._basicAssetUid {return false}
    if lhs._basicAssetPositionUid != rhs._basicAssetPositionUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_BondResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BondResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_BondResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_BondResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_BondsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BondsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_BondsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_BondsResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBondCouponsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsRequest) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBondCouponsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondCouponsResponse) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBondEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .standard(proto: "instrument_id"),
    5: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 4)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest) -> Bool {
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "EVENT_TYPE_CPN"),
    2: .same(proto: "EVENT_TYPE_CALL"),
    3: .same(proto: "EVENT_TYPE_MTY"),
    4: .same(proto: "EVENT_TYPE_CONV"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBondEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.BondEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.protoMessageName + ".BondEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "instrument_id"),
    3: .standard(proto: "event_number"),
    4: .standard(proto: "event_date"),
    5: .standard(proto: "event_type"),
    6: .standard(proto: "event_total_vol"),
    7: .standard(proto: "fix_date"),
    8: .standard(proto: "rate_date"),
    9: .standard(proto: "default_date"),
    10: .standard(proto: "real_pay_date"),
    11: .standard(proto: "pay_date"),
    12: .standard(proto: "pay_one_bond"),
    13: .standard(proto: "money_flow_val"),
    14: .same(proto: "execution"),
    15: .standard(proto: "operation_type"),
    16: .same(proto: "value"),
    17: .same(proto: "note"),
    18: .standard(proto: "convert_to_fin_tool_id"),
    19: .standard(proto: "coupon_start_date"),
    20: .standard(proto: "coupon_end_date"),
    21: .standard(proto: "coupon_period"),
    22: .standard(proto: "coupon_interest_rate"),
  ]

  fileprivate class _StorageClass {
    var _instrumentID: String = String()
    var _eventNumber: Int32 = 0
    var _eventDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eventType: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsRequest.EventType = .unspecified
    var _eventTotalVol: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _fixDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _rateDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _defaultDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _realPayDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _payDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _payOneBond: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _moneyFlowVal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _execution: String = String()
    var _operationType: String = String()
    var _value: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _note: String = String()
    var _convertToFinToolID: String = String()
    var _couponStartDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _couponEndDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _couponPeriod: Int32 = 0
    var _couponInterestRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _instrumentID = source._instrumentID
      _eventNumber = source._eventNumber
      _eventDate = source._eventDate
      _eventType = source._eventType
      _eventTotalVol = source._eventTotalVol
      _fixDate = source._fixDate
      _rateDate = source._rateDate
      _defaultDate = source._defaultDate
      _realPayDate = source._realPayDate
      _payDate = source._payDate
      _payOneBond = source._payOneBond
      _moneyFlowVal = source._moneyFlowVal
      _execution = source._execution
      _operationType = source._operationType
      _value = source._value
      _note = source._note
      _convertToFinToolID = source._convertToFinToolID
      _couponStartDate = source._couponStartDate
      _couponEndDate = source._couponEndDate
      _couponPeriod = source._couponPeriod
      _couponInterestRate = source._couponInterestRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._instrumentID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._eventNumber) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._eventDate) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._eventTotalVol) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._fixDate) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._rateDate) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._defaultDate) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._realPayDate) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._payDate) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._payOneBond) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._moneyFlowVal) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._execution) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._operationType) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._value) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._note) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._convertToFinToolID) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._couponStartDate) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._couponEndDate) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._couponPeriod) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._couponInterestRate) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._instrumentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentID, fieldNumber: 2)
      }
      if _storage._eventNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._eventNumber, fieldNumber: 3)
      }
      try { if let v = _storage._eventDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 5)
      }
      try { if let v = _storage._eventTotalVol {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._fixDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._rateDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._defaultDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._realPayDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._payDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._payOneBond {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._moneyFlowVal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._execution.isEmpty {
        try visitor.visitSingularStringField(value: _storage._execution, fieldNumber: 14)
      }
      if !_storage._operationType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operationType, fieldNumber: 15)
      }
      try { if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._note.isEmpty {
        try visitor.visitSingularStringField(value: _storage._note, fieldNumber: 17)
      }
      if !_storage._convertToFinToolID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._convertToFinToolID, fieldNumber: 18)
      }
      try { if let v = _storage._couponStartDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._couponEndDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if _storage._couponPeriod != 0 {
        try visitor.visitSingularInt32Field(value: _storage._couponPeriod, fieldNumber: 21)
      }
      try { if let v = _storage._couponInterestRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.BondEvent, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBondEventsResponse.BondEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._instrumentID != rhs_storage._instrumentID {return false}
        if _storage._eventNumber != rhs_storage._eventNumber {return false}
        if _storage._eventDate != rhs_storage._eventDate {return false}
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._eventTotalVol != rhs_storage._eventTotalVol {return false}
        if _storage._fixDate != rhs_storage._fixDate {return false}
        if _storage._rateDate != rhs_storage._rateDate {return false}
        if _storage._defaultDate != rhs_storage._defaultDate {return false}
        if _storage._realPayDate != rhs_storage._realPayDate {return false}
        if _storage._payDate != rhs_storage._payDate {return false}
        if _storage._payOneBond != rhs_storage._payOneBond {return false}
        if _storage._moneyFlowVal != rhs_storage._moneyFlowVal {return false}
        if _storage._execution != rhs_storage._execution {return false}
        if _storage._operationType != rhs_storage._operationType {return false}
        if _storage._value != rhs_storage._value {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._convertToFinToolID != rhs_storage._convertToFinToolID {return false}
        if _storage._couponStartDate != rhs_storage._couponStartDate {return false}
        if _storage._couponEndDate != rhs_storage._couponEndDate {return false}
        if _storage._couponPeriod != rhs_storage._couponPeriod {return false}
        if _storage._couponInterestRate != rhs_storage._couponInterestRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Coupon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Coupon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .standard(proto: "coupon_date"),
    3: .standard(proto: "coupon_number"),
    4: .standard(proto: "fix_date"),
    5: .standard(proto: "pay_one_bond"),
    6: .standard(proto: "coupon_type"),
    7: .standard(proto: "coupon_start_date"),
    8: .standard(proto: "coupon_end_date"),
    9: .standard(proto: "coupon_period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._couponDate) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.couponNumber) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fixDate) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._payOneBond) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.couponType) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._couponStartDate) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._couponEndDate) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.couponPeriod) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    try { if let v = self._couponDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.couponNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.couponNumber, fieldNumber: 3)
    }
    try { if let v = self._fixDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._payOneBond {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.couponType != .unspecified {
      try visitor.visitSingularEnumField(value: self.couponType, fieldNumber: 6)
    }
    try { if let v = self._couponStartDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._couponEndDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.couponPeriod != 0 {
      try visitor.visitSingularInt32Field(value: self.couponPeriod, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Coupon, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Coupon) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs._couponDate != rhs._couponDate {return false}
    if lhs.couponNumber != rhs.couponNumber {return false}
    if lhs._fixDate != rhs._fixDate {return false}
    if lhs._payOneBond != rhs._payOneBond {return false}
    if lhs.couponType != rhs.couponType {return false}
    if lhs._couponStartDate != rhs._couponStartDate {return false}
    if lhs._couponEndDate != rhs._couponEndDate {return false}
    if lhs.couponPeriod != rhs.couponPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_CurrencyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CurrencyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_CurrencyResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_CurrencyResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_CurrenciesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CurrenciesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_CurrenciesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_CurrenciesResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EtfResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EtfResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_EtfResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_EtfResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EtfsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EtfsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_EtfsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_EtfsResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FutureResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FutureResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FutureResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FutureResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FuturesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FuturesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FuturesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FuturesResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_OptionResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_OptionResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_OptionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_OptionsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_OptionsResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Option"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "position_uid"),
    3: .same(proto: "ticker"),
    4: .standard(proto: "class_code"),
    5: .standard(proto: "basic_asset_position_uid"),
    21: .standard(proto: "trading_status"),
    31: .standard(proto: "real_exchange"),
    41: .same(proto: "direction"),
    42: .standard(proto: "payment_type"),
    43: .same(proto: "style"),
    44: .standard(proto: "settlement_type"),
    101: .same(proto: "name"),
    111: .same(proto: "currency"),
    112: .standard(proto: "settlement_currency"),
    131: .standard(proto: "asset_type"),
    132: .standard(proto: "basic_asset"),
    141: .same(proto: "exchange"),
    151: .standard(proto: "country_of_risk"),
    152: .standard(proto: "country_of_risk_name"),
    161: .same(proto: "sector"),
    162: .same(proto: "brand"),
    201: .same(proto: "lot"),
    211: .standard(proto: "basic_asset_size"),
    221: .same(proto: "klong"),
    222: .same(proto: "kshort"),
    223: .same(proto: "dlong"),
    224: .same(proto: "dshort"),
    225: .standard(proto: "dlong_min"),
    226: .standard(proto: "dshort_min"),
    231: .standard(proto: "min_price_increment"),
    241: .standard(proto: "strike_price"),
    290: .standard(proto: "dlong_client"),
    291: .standard(proto: "dshort_client"),
    301: .standard(proto: "expiration_date"),
    311: .standard(proto: "first_trade_date"),
    312: .standard(proto: "last_trade_date"),
    321: .standard(proto: "first_1min_candle_date"),
    322: .standard(proto: "first_1day_candle_date"),
    401: .standard(proto: "short_enabled_flag"),
    402: .standard(proto: "for_iis_flag"),
    403: .standard(proto: "otc_flag"),
    404: .standard(proto: "buy_available_flag"),
    405: .standard(proto: "sell_available_flag"),
    406: .standard(proto: "for_qual_investor_flag"),
    407: .standard(proto: "weekend_flag"),
    408: .standard(proto: "blocked_tca_flag"),
    409: .standard(proto: "api_trade_available_flag"),
  ]

  fileprivate class _StorageClass {
    var _uid: String = String()
    var _positionUid: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _basicAssetPositionUid: String = String()
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _direction: Tinkoff_Public_Invest_Api_Contract_V1_OptionDirection = .unspecified
    var _paymentType: Tinkoff_Public_Invest_Api_Contract_V1_OptionPaymentType = .unspecified
    var _style: Tinkoff_Public_Invest_Api_Contract_V1_OptionStyle = .unspecified
    var _settlementType: Tinkoff_Public_Invest_Api_Contract_V1_OptionSettlementType = .optionExecutionTypeUnspecified
    var _name: String = String()
    var _currency: String = String()
    var _settlementCurrency: String = String()
    var _assetType: String = String()
    var _basicAsset: String = String()
    var _exchange: String = String()
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _sector: String = String()
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _lot: Int32 = 0
    var _basicAssetSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _strikePrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _firstTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _shortEnabledFlag: Bool = false
    var _forIisFlag: Bool = false
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _apiTradeAvailableFlag: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _positionUid = source._positionUid
      _ticker = source._ticker
      _classCode = source._classCode
      _basicAssetPositionUid = source._basicAssetPositionUid
      _tradingStatus = source._tradingStatus
      _realExchange = source._realExchange
      _direction = source._direction
      _paymentType = source._paymentType
      _style = source._style
      _settlementType = source._settlementType
      _name = source._name
      _currency = source._currency
      _settlementCurrency = source._settlementCurrency
      _assetType = source._assetType
      _basicAsset = source._basicAsset
      _exchange = source._exchange
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _sector = source._sector
      _brand = source._brand
      _lot = source._lot
      _basicAssetSize = source._basicAssetSize
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _minPriceIncrement = source._minPriceIncrement
      _strikePrice = source._strikePrice
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
      _expirationDate = source._expirationDate
      _firstTradeDate = source._firstTradeDate
      _lastTradeDate = source._lastTradeDate
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _shortEnabledFlag = source._shortEnabledFlag
      _forIisFlag = source._forIisFlag
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._basicAssetPositionUid) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 41: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 42: try { try decoder.decodeSingularEnumField(value: &_storage._paymentType) }()
        case 43: try { try decoder.decodeSingularEnumField(value: &_storage._style) }()
        case 44: try { try decoder.decodeSingularEnumField(value: &_storage._settlementType) }()
        case 101: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 111: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 112: try { try decoder.decodeSingularStringField(value: &_storage._settlementCurrency) }()
        case 131: try { try decoder.decodeSingularStringField(value: &_storage._assetType) }()
        case 132: try { try decoder.decodeSingularStringField(value: &_storage._basicAsset) }()
        case 141: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 151: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 152: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 161: try { try decoder.decodeSingularStringField(value: &_storage._sector) }()
        case 162: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 201: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 211: try { try decoder.decodeSingularMessageField(value: &_storage._basicAssetSize) }()
        case 221: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 222: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 223: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 224: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 225: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 226: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 231: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 241: try { try decoder.decodeSingularMessageField(value: &_storage._strikePrice) }()
        case 290: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 291: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        case 301: try { try decoder.decodeSingularMessageField(value: &_storage._expirationDate) }()
        case 311: try { try decoder.decodeSingularMessageField(value: &_storage._firstTradeDate) }()
        case 312: try { try decoder.decodeSingularMessageField(value: &_storage._lastTradeDate) }()
        case 321: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 322: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 401: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 402: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 403: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 404: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 405: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 406: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 407: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 408: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 409: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 1)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 2)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 3)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 4)
      }
      if !_storage._basicAssetPositionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basicAssetPositionUid, fieldNumber: 5)
      }
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 21)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 31)
      }
      if _storage._direction != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 41)
      }
      if _storage._paymentType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._paymentType, fieldNumber: 42)
      }
      if _storage._style != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._style, fieldNumber: 43)
      }
      if _storage._settlementType != .optionExecutionTypeUnspecified {
        try visitor.visitSingularEnumField(value: _storage._settlementType, fieldNumber: 44)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 101)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 111)
      }
      if !_storage._settlementCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._settlementCurrency, fieldNumber: 112)
      }
      if !_storage._assetType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetType, fieldNumber: 131)
      }
      if !_storage._basicAsset.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basicAsset, fieldNumber: 132)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 141)
      }
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 151)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 152)
      }
      if !_storage._sector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sector, fieldNumber: 161)
      }
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 162)
      } }()
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 201)
      }
      try { if let v = _storage._basicAssetSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 211)
      } }()
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 221)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 222)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 223)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 224)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 225)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 226)
      } }()
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 231)
      } }()
      try { if let v = _storage._strikePrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 241)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 290)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 291)
      } }()
      try { if let v = _storage._expirationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      } }()
      try { if let v = _storage._firstTradeDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 311)
      } }()
      try { if let v = _storage._lastTradeDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 312)
      } }()
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 321)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 322)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 401)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 402)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 403)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 404)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 405)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 406)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 407)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 408)
      }
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 409)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Option, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Option) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._basicAssetPositionUid != rhs_storage._basicAssetPositionUid {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._paymentType != rhs_storage._paymentType {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._settlementType != rhs_storage._settlementType {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._settlementCurrency != rhs_storage._settlementCurrency {return false}
        if _storage._assetType != rhs_storage._assetType {return false}
        if _storage._basicAsset != rhs_storage._basicAsset {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._sector != rhs_storage._sector {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._basicAssetSize != rhs_storage._basicAssetSize {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._strikePrice != rhs_storage._strikePrice {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        if _storage._expirationDate != rhs_storage._expirationDate {return false}
        if _storage._firstTradeDate != rhs_storage._firstTradeDate {return false}
        if _storage._lastTradeDate != rhs_storage._lastTradeDate {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_ShareResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShareResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_ShareResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_ShareResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_SharesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SharesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_SharesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_SharesResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Bond: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Bond"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    5: .same(proto: "lot"),
    6: .same(proto: "currency"),
    7: .same(proto: "klong"),
    8: .same(proto: "kshort"),
    9: .same(proto: "dlong"),
    10: .same(proto: "dshort"),
    11: .standard(proto: "dlong_min"),
    12: .standard(proto: "dshort_min"),
    13: .standard(proto: "short_enabled_flag"),
    15: .same(proto: "name"),
    16: .same(proto: "exchange"),
    17: .standard(proto: "coupon_quantity_per_year"),
    18: .standard(proto: "maturity_date"),
    19: .same(proto: "nominal"),
    20: .standard(proto: "initial_nominal"),
    21: .standard(proto: "state_reg_date"),
    22: .standard(proto: "placement_date"),
    23: .standard(proto: "placement_price"),
    24: .standard(proto: "aci_value"),
    25: .standard(proto: "country_of_risk"),
    26: .standard(proto: "country_of_risk_name"),
    27: .same(proto: "sector"),
    28: .standard(proto: "issue_kind"),
    29: .standard(proto: "issue_size"),
    30: .standard(proto: "issue_size_plan"),
    31: .standard(proto: "trading_status"),
    32: .standard(proto: "otc_flag"),
    33: .standard(proto: "buy_available_flag"),
    34: .standard(proto: "sell_available_flag"),
    35: .standard(proto: "floating_coupon_flag"),
    36: .standard(proto: "perpetual_flag"),
    37: .standard(proto: "amortization_flag"),
    38: .standard(proto: "min_price_increment"),
    39: .standard(proto: "api_trade_available_flag"),
    40: .same(proto: "uid"),
    41: .standard(proto: "real_exchange"),
    42: .standard(proto: "position_uid"),
    43: .standard(proto: "asset_uid"),
    51: .standard(proto: "for_iis_flag"),
    52: .standard(proto: "for_qual_investor_flag"),
    53: .standard(proto: "weekend_flag"),
    54: .standard(proto: "blocked_tca_flag"),
    55: .standard(proto: "subordinated_flag"),
    56: .standard(proto: "liquidity_flag"),
    61: .standard(proto: "first_1min_candle_date"),
    62: .standard(proto: "first_1day_candle_date"),
    63: .standard(proto: "risk_level"),
    64: .same(proto: "brand"),
    65: .standard(proto: "bond_type"),
    69: .standard(proto: "call_date"),
    90: .standard(proto: "dlong_client"),
    91: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _isin: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _couponQuantityPerYear: Int32 = 0
    var _maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _initialNominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _stateRegDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _placementDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _placementPrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _aciValue: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _sector: String = String()
    var _issueKind: String = String()
    var _issueSize: Int64 = 0
    var _issueSizePlan: Int64 = 0
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _floatingCouponFlag: Bool = false
    var _perpetualFlag: Bool = false
    var _amortizationFlag: Bool = false
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _assetUid: String = String()
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _subordinatedFlag: Bool = false
    var _liquidityFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _riskLevel: Tinkoff_Public_Invest_Api_Contract_V1_RiskLevel = .unspecified
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _bondType: Tinkoff_Public_Invest_Api_Contract_V1_BondType = .unspecified
    var _callDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _isin = source._isin
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _couponQuantityPerYear = source._couponQuantityPerYear
      _maturityDate = source._maturityDate
      _nominal = source._nominal
      _initialNominal = source._initialNominal
      _stateRegDate = source._stateRegDate
      _placementDate = source._placementDate
      _placementPrice = source._placementPrice
      _aciValue = source._aciValue
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _sector = source._sector
      _issueKind = source._issueKind
      _issueSize = source._issueSize
      _issueSizePlan = source._issueSizePlan
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _floatingCouponFlag = source._floatingCouponFlag
      _perpetualFlag = source._perpetualFlag
      _amortizationFlag = source._amortizationFlag
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _assetUid = source._assetUid
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _subordinatedFlag = source._subordinatedFlag
      _liquidityFlag = source._liquidityFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _riskLevel = source._riskLevel
      _brand = source._brand
      _bondType = source._bondType
      _callDate = source._callDate
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._couponQuantityPerYear) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._maturityDate) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._initialNominal) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._stateRegDate) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._placementDate) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._placementPrice) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._aciValue) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._sector) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._issueKind) }()
        case 29: try { try decoder.decodeSingularInt64Field(value: &_storage._issueSize) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._issueSizePlan) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._floatingCouponFlag) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._perpetualFlag) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._amortizationFlag) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 40: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 41: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 42: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 43: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 51: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 52: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 54: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 55: try { try decoder.decodeSingularBoolField(value: &_storage._subordinatedFlag) }()
        case 56: try { try decoder.decodeSingularBoolField(value: &_storage._liquidityFlag) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 62: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 63: try { try decoder.decodeSingularEnumField(value: &_storage._riskLevel) }()
        case 64: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 65: try { try decoder.decodeSingularEnumField(value: &_storage._bondType) }()
        case 69: try { try decoder.decodeSingularMessageField(value: &_storage._callDate) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 4)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 5)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 6)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 13)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 15)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 16)
      }
      if _storage._couponQuantityPerYear != 0 {
        try visitor.visitSingularInt32Field(value: _storage._couponQuantityPerYear, fieldNumber: 17)
      }
      try { if let v = _storage._maturityDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._initialNominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._stateRegDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._placementDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._placementPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._aciValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 25)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 26)
      }
      if !_storage._sector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sector, fieldNumber: 27)
      }
      if !_storage._issueKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issueKind, fieldNumber: 28)
      }
      if _storage._issueSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._issueSize, fieldNumber: 29)
      }
      if _storage._issueSizePlan != 0 {
        try visitor.visitSingularInt64Field(value: _storage._issueSizePlan, fieldNumber: 30)
      }
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 31)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 32)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 33)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 34)
      }
      if _storage._floatingCouponFlag != false {
        try visitor.visitSingularBoolField(value: _storage._floatingCouponFlag, fieldNumber: 35)
      }
      if _storage._perpetualFlag != false {
        try visitor.visitSingularBoolField(value: _storage._perpetualFlag, fieldNumber: 36)
      }
      if _storage._amortizationFlag != false {
        try visitor.visitSingularBoolField(value: _storage._amortizationFlag, fieldNumber: 37)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 39)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 40)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 41)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 42)
      }
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 43)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 51)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 52)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 53)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 54)
      }
      if _storage._subordinatedFlag != false {
        try visitor.visitSingularBoolField(value: _storage._subordinatedFlag, fieldNumber: 55)
      }
      if _storage._liquidityFlag != false {
        try visitor.visitSingularBoolField(value: _storage._liquidityFlag, fieldNumber: 56)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      } }()
      if _storage._riskLevel != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._riskLevel, fieldNumber: 63)
      }
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      } }()
      if _storage._bondType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._bondType, fieldNumber: 65)
      }
      try { if let v = _storage._callDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Bond, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Bond) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._couponQuantityPerYear != rhs_storage._couponQuantityPerYear {return false}
        if _storage._maturityDate != rhs_storage._maturityDate {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._initialNominal != rhs_storage._initialNominal {return false}
        if _storage._stateRegDate != rhs_storage._stateRegDate {return false}
        if _storage._placementDate != rhs_storage._placementDate {return false}
        if _storage._placementPrice != rhs_storage._placementPrice {return false}
        if _storage._aciValue != rhs_storage._aciValue {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._sector != rhs_storage._sector {return false}
        if _storage._issueKind != rhs_storage._issueKind {return false}
        if _storage._issueSize != rhs_storage._issueSize {return false}
        if _storage._issueSizePlan != rhs_storage._issueSizePlan {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._floatingCouponFlag != rhs_storage._floatingCouponFlag {return false}
        if _storage._perpetualFlag != rhs_storage._perpetualFlag {return false}
        if _storage._amortizationFlag != rhs_storage._amortizationFlag {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._subordinatedFlag != rhs_storage._subordinatedFlag {return false}
        if _storage._liquidityFlag != rhs_storage._liquidityFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._riskLevel != rhs_storage._riskLevel {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._bondType != rhs_storage._bondType {return false}
        if _storage._callDate != rhs_storage._callDate {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Currency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Currency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    5: .same(proto: "lot"),
    6: .same(proto: "currency"),
    7: .same(proto: "klong"),
    8: .same(proto: "kshort"),
    9: .same(proto: "dlong"),
    10: .same(proto: "dshort"),
    11: .standard(proto: "dlong_min"),
    12: .standard(proto: "dshort_min"),
    13: .standard(proto: "short_enabled_flag"),
    15: .same(proto: "name"),
    16: .same(proto: "exchange"),
    17: .same(proto: "nominal"),
    18: .standard(proto: "country_of_risk"),
    19: .standard(proto: "country_of_risk_name"),
    20: .standard(proto: "trading_status"),
    21: .standard(proto: "otc_flag"),
    22: .standard(proto: "buy_available_flag"),
    23: .standard(proto: "sell_available_flag"),
    24: .standard(proto: "iso_currency_name"),
    25: .standard(proto: "min_price_increment"),
    26: .standard(proto: "api_trade_available_flag"),
    27: .same(proto: "uid"),
    28: .standard(proto: "real_exchange"),
    29: .standard(proto: "position_uid"),
    41: .standard(proto: "for_iis_flag"),
    52: .standard(proto: "for_qual_investor_flag"),
    53: .standard(proto: "weekend_flag"),
    54: .standard(proto: "blocked_tca_flag"),
    56: .standard(proto: "first_1min_candle_date"),
    57: .standard(proto: "first_1day_candle_date"),
    60: .same(proto: "brand"),
    90: .standard(proto: "dlong_client"),
    91: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _isin: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _isoCurrencyName: String = String()
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _isin = source._isin
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _nominal = source._nominal
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _isoCurrencyName = source._isoCurrencyName
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _brand = source._brand
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._isoCurrencyName) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 52: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 54: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 4)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 5)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 6)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 13)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 15)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 16)
      }
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 18)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 19)
      }
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 20)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 21)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 22)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 23)
      }
      if !_storage._isoCurrencyName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isoCurrencyName, fieldNumber: 24)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 26)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 27)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 28)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 29)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 41)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 52)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 53)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 54)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Currency, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Currency) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._isoCurrencyName != rhs_storage._isoCurrencyName {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Etf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Etf"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    5: .same(proto: "lot"),
    6: .same(proto: "currency"),
    7: .same(proto: "klong"),
    8: .same(proto: "kshort"),
    9: .same(proto: "dlong"),
    10: .same(proto: "dshort"),
    11: .standard(proto: "dlong_min"),
    12: .standard(proto: "dshort_min"),
    13: .standard(proto: "short_enabled_flag"),
    15: .same(proto: "name"),
    16: .same(proto: "exchange"),
    17: .standard(proto: "fixed_commission"),
    18: .standard(proto: "focus_type"),
    19: .standard(proto: "released_date"),
    20: .standard(proto: "num_shares"),
    21: .standard(proto: "country_of_risk"),
    22: .standard(proto: "country_of_risk_name"),
    23: .same(proto: "sector"),
    24: .standard(proto: "rebalancing_freq"),
    25: .standard(proto: "trading_status"),
    26: .standard(proto: "otc_flag"),
    27: .standard(proto: "buy_available_flag"),
    28: .standard(proto: "sell_available_flag"),
    29: .standard(proto: "min_price_increment"),
    30: .standard(proto: "api_trade_available_flag"),
    31: .same(proto: "uid"),
    32: .standard(proto: "real_exchange"),
    33: .standard(proto: "position_uid"),
    34: .standard(proto: "asset_uid"),
    35: .standard(proto: "instrument_exchange"),
    41: .standard(proto: "for_iis_flag"),
    42: .standard(proto: "for_qual_investor_flag"),
    43: .standard(proto: "weekend_flag"),
    44: .standard(proto: "blocked_tca_flag"),
    45: .standard(proto: "liquidity_flag"),
    56: .standard(proto: "first_1min_candle_date"),
    57: .standard(proto: "first_1day_candle_date"),
    60: .same(proto: "brand"),
    90: .standard(proto: "dlong_client"),
    91: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _isin: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _fixedCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _focusType: String = String()
    var _releasedDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _numShares: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _sector: String = String()
    var _rebalancingFreq: String = String()
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _assetUid: String = String()
    var _instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType = .instrumentExchangeUnspecified
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _liquidityFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _isin = source._isin
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _fixedCommission = source._fixedCommission
      _focusType = source._focusType
      _releasedDate = source._releasedDate
      _numShares = source._numShares
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _sector = source._sector
      _rebalancingFreq = source._rebalancingFreq
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _assetUid = source._assetUid
      _instrumentExchange = source._instrumentExchange
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _liquidityFlag = source._liquidityFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _brand = source._brand
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._fixedCommission) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._focusType) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._releasedDate) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._numShares) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._sector) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._rebalancingFreq) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 35: try { try decoder.decodeSingularEnumField(value: &_storage._instrumentExchange) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 43: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 45: try { try decoder.decodeSingularBoolField(value: &_storage._liquidityFlag) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 4)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 5)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 6)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 13)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 15)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 16)
      }
      try { if let v = _storage._fixedCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._focusType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._focusType, fieldNumber: 18)
      }
      try { if let v = _storage._releasedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._numShares {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 21)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 22)
      }
      if !_storage._sector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sector, fieldNumber: 23)
      }
      if !_storage._rebalancingFreq.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rebalancingFreq, fieldNumber: 24)
      }
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 25)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 26)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 27)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 28)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 30)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 31)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 32)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 33)
      }
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 34)
      }
      if _storage._instrumentExchange != .instrumentExchangeUnspecified {
        try visitor.visitSingularEnumField(value: _storage._instrumentExchange, fieldNumber: 35)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 41)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 42)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 43)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 44)
      }
      if _storage._liquidityFlag != false {
        try visitor.visitSingularBoolField(value: _storage._liquidityFlag, fieldNumber: 45)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Etf, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Etf) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._fixedCommission != rhs_storage._fixedCommission {return false}
        if _storage._focusType != rhs_storage._focusType {return false}
        if _storage._releasedDate != rhs_storage._releasedDate {return false}
        if _storage._numShares != rhs_storage._numShares {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._sector != rhs_storage._sector {return false}
        if _storage._rebalancingFreq != rhs_storage._rebalancingFreq {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._instrumentExchange != rhs_storage._instrumentExchange {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._liquidityFlag != rhs_storage._liquidityFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Future: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Future"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "lot"),
    5: .same(proto: "currency"),
    6: .same(proto: "klong"),
    7: .same(proto: "kshort"),
    8: .same(proto: "dlong"),
    9: .same(proto: "dshort"),
    10: .standard(proto: "dlong_min"),
    11: .standard(proto: "dshort_min"),
    12: .standard(proto: "short_enabled_flag"),
    13: .same(proto: "name"),
    14: .same(proto: "exchange"),
    15: .standard(proto: "first_trade_date"),
    16: .standard(proto: "last_trade_date"),
    17: .standard(proto: "futures_type"),
    18: .standard(proto: "asset_type"),
    19: .standard(proto: "basic_asset"),
    20: .standard(proto: "basic_asset_size"),
    21: .standard(proto: "country_of_risk"),
    22: .standard(proto: "country_of_risk_name"),
    23: .same(proto: "sector"),
    24: .standard(proto: "expiration_date"),
    25: .standard(proto: "trading_status"),
    26: .standard(proto: "otc_flag"),
    27: .standard(proto: "buy_available_flag"),
    28: .standard(proto: "sell_available_flag"),
    29: .standard(proto: "min_price_increment"),
    30: .standard(proto: "api_trade_available_flag"),
    31: .same(proto: "uid"),
    32: .standard(proto: "real_exchange"),
    33: .standard(proto: "position_uid"),
    34: .standard(proto: "basic_asset_position_uid"),
    41: .standard(proto: "for_iis_flag"),
    42: .standard(proto: "for_qual_investor_flag"),
    43: .standard(proto: "weekend_flag"),
    44: .standard(proto: "blocked_tca_flag"),
    56: .standard(proto: "first_1min_candle_date"),
    57: .standard(proto: "first_1day_candle_date"),
    61: .standard(proto: "initial_margin_on_buy"),
    62: .standard(proto: "initial_margin_on_sell"),
    63: .standard(proto: "min_price_increment_amount"),
    64: .same(proto: "brand"),
    90: .standard(proto: "dlong_client"),
    91: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _firstTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastTradeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _futuresType: String = String()
    var _assetType: String = String()
    var _basicAsset: String = String()
    var _basicAssetSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _sector: String = String()
    var _expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _basicAssetPositionUid: String = String()
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _initialMarginOnBuy: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _initialMarginOnSell: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _minPriceIncrementAmount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _firstTradeDate = source._firstTradeDate
      _lastTradeDate = source._lastTradeDate
      _futuresType = source._futuresType
      _assetType = source._assetType
      _basicAsset = source._basicAsset
      _basicAssetSize = source._basicAssetSize
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _sector = source._sector
      _expirationDate = source._expirationDate
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _basicAssetPositionUid = source._basicAssetPositionUid
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _initialMarginOnBuy = source._initialMarginOnBuy
      _initialMarginOnSell = source._initialMarginOnSell
      _minPriceIncrementAmount = source._minPriceIncrementAmount
      _brand = source._brand
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._firstTradeDate) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._lastTradeDate) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._futuresType) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._assetType) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._basicAsset) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._basicAssetSize) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._sector) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._expirationDate) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._basicAssetPositionUid) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 43: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._initialMarginOnBuy) }()
        case 62: try { try decoder.decodeSingularMessageField(value: &_storage._initialMarginOnSell) }()
        case 63: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrementAmount) }()
        case 64: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 4)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 5)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 12)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 13)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 14)
      }
      try { if let v = _storage._firstTradeDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._lastTradeDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._futuresType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._futuresType, fieldNumber: 17)
      }
      if !_storage._assetType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetType, fieldNumber: 18)
      }
      if !_storage._basicAsset.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basicAsset, fieldNumber: 19)
      }
      try { if let v = _storage._basicAssetSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 21)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 22)
      }
      if !_storage._sector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sector, fieldNumber: 23)
      }
      try { if let v = _storage._expirationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 25)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 26)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 27)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 28)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 30)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 31)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 32)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 33)
      }
      if !_storage._basicAssetPositionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basicAssetPositionUid, fieldNumber: 34)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 41)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 42)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 43)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 44)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._initialMarginOnBuy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      } }()
      try { if let v = _storage._initialMarginOnSell {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      } }()
      try { if let v = _storage._minPriceIncrementAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      } }()
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Future, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Future) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._firstTradeDate != rhs_storage._firstTradeDate {return false}
        if _storage._lastTradeDate != rhs_storage._lastTradeDate {return false}
        if _storage._futuresType != rhs_storage._futuresType {return false}
        if _storage._assetType != rhs_storage._assetType {return false}
        if _storage._basicAsset != rhs_storage._basicAsset {return false}
        if _storage._basicAssetSize != rhs_storage._basicAssetSize {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._sector != rhs_storage._sector {return false}
        if _storage._expirationDate != rhs_storage._expirationDate {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._basicAssetPositionUid != rhs_storage._basicAssetPositionUid {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._initialMarginOnBuy != rhs_storage._initialMarginOnBuy {return false}
        if _storage._initialMarginOnSell != rhs_storage._initialMarginOnSell {return false}
        if _storage._minPriceIncrementAmount != rhs_storage._minPriceIncrementAmount {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Share: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Share"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    5: .same(proto: "lot"),
    6: .same(proto: "currency"),
    7: .same(proto: "klong"),
    8: .same(proto: "kshort"),
    9: .same(proto: "dlong"),
    10: .same(proto: "dshort"),
    11: .standard(proto: "dlong_min"),
    12: .standard(proto: "dshort_min"),
    13: .standard(proto: "short_enabled_flag"),
    15: .same(proto: "name"),
    16: .same(proto: "exchange"),
    17: .standard(proto: "ipo_date"),
    18: .standard(proto: "issue_size"),
    19: .standard(proto: "country_of_risk"),
    20: .standard(proto: "country_of_risk_name"),
    21: .same(proto: "sector"),
    22: .standard(proto: "issue_size_plan"),
    23: .same(proto: "nominal"),
    25: .standard(proto: "trading_status"),
    26: .standard(proto: "otc_flag"),
    27: .standard(proto: "buy_available_flag"),
    28: .standard(proto: "sell_available_flag"),
    29: .standard(proto: "div_yield_flag"),
    30: .standard(proto: "share_type"),
    31: .standard(proto: "min_price_increment"),
    32: .standard(proto: "api_trade_available_flag"),
    33: .same(proto: "uid"),
    34: .standard(proto: "real_exchange"),
    35: .standard(proto: "position_uid"),
    36: .standard(proto: "asset_uid"),
    37: .standard(proto: "instrument_exchange"),
    46: .standard(proto: "for_iis_flag"),
    47: .standard(proto: "for_qual_investor_flag"),
    48: .standard(proto: "weekend_flag"),
    49: .standard(proto: "blocked_tca_flag"),
    50: .standard(proto: "liquidity_flag"),
    56: .standard(proto: "first_1min_candle_date"),
    57: .standard(proto: "first_1day_candle_date"),
    60: .same(proto: "brand"),
    90: .standard(proto: "dlong_client"),
    91: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _isin: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _ipoDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _issueSize: Int64 = 0
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _sector: String = String()
    var _issueSizePlan: Int64 = 0
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _divYieldFlag: Bool = false
    var _shareType: Tinkoff_Public_Invest_Api_Contract_V1_ShareType = .unspecified
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _assetUid: String = String()
    var _instrumentExchange: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentExchangeType = .instrumentExchangeUnspecified
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _liquidityFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _isin = source._isin
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _ipoDate = source._ipoDate
      _issueSize = source._issueSize
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _sector = source._sector
      _issueSizePlan = source._issueSizePlan
      _nominal = source._nominal
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _divYieldFlag = source._divYieldFlag
      _shareType = source._shareType
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _assetUid = source._assetUid
      _instrumentExchange = source._instrumentExchange
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _liquidityFlag = source._liquidityFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _brand = source._brand
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._ipoDate) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._issueSize) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._sector) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._issueSizePlan) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._divYieldFlag) }()
        case 30: try { try decoder.decodeSingularEnumField(value: &_storage._shareType) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 34: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 35: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 37: try { try decoder.decodeSingularEnumField(value: &_storage._instrumentExchange) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 47: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 48: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 49: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._liquidityFlag) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 4)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 5)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 6)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 13)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 15)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 16)
      }
      try { if let v = _storage._ipoDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._issueSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._issueSize, fieldNumber: 18)
      }
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 19)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 20)
      }
      if !_storage._sector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sector, fieldNumber: 21)
      }
      if _storage._issueSizePlan != 0 {
        try visitor.visitSingularInt64Field(value: _storage._issueSizePlan, fieldNumber: 22)
      }
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 25)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 26)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 27)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 28)
      }
      if _storage._divYieldFlag != false {
        try visitor.visitSingularBoolField(value: _storage._divYieldFlag, fieldNumber: 29)
      }
      if _storage._shareType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._shareType, fieldNumber: 30)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 32)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 33)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 34)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 35)
      }
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 36)
      }
      if _storage._instrumentExchange != .instrumentExchangeUnspecified {
        try visitor.visitSingularEnumField(value: _storage._instrumentExchange, fieldNumber: 37)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 46)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 47)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 48)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 49)
      }
      if _storage._liquidityFlag != false {
        try visitor.visitSingularBoolField(value: _storage._liquidityFlag, fieldNumber: 50)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Share, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Share) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._ipoDate != rhs_storage._ipoDate {return false}
        if _storage._issueSize != rhs_storage._issueSize {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._sector != rhs_storage._sector {return false}
        if _storage._issueSizePlan != rhs_storage._issueSizePlan {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._divYieldFlag != rhs_storage._divYieldFlag {return false}
        if _storage._shareType != rhs_storage._shareType {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._instrumentExchange != rhs_storage._instrumentExchange {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._liquidityFlag != rhs_storage._liquidityFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccruedInterestsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsRequest) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccruedInterestsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "accrued_interests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.accruedInterests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accruedInterests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accruedInterests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAccruedInterestsResponse) -> Bool {
    if lhs.accruedInterests != rhs.accruedInterests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccruedInterest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "value"),
    3: .standard(proto: "value_percent"),
    4: .same(proto: "nominal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._date) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._valuePercent) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._nominal) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._date {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._valuePercent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._nominal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AccruedInterest) -> Bool {
    if lhs._date != rhs._date {return false}
    if lhs._value != rhs._value {return false}
    if lhs._valuePercent != rhs._valuePercent {return false}
    if lhs._nominal != rhs._nominal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFuturesMarginRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    4: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginRequest) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFuturesMarginResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "initial_margin_on_buy"),
    2: .standard(proto: "initial_margin_on_sell"),
    3: .standard(proto: "min_price_increment"),
    4: .standard(proto: "min_price_increment_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._initialMarginOnBuy) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._initialMarginOnSell) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._minPriceIncrement) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._minPriceIncrementAmount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._initialMarginOnBuy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._initialMarginOnSell {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._minPriceIncrement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._minPriceIncrementAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFuturesMarginResponse) -> Bool {
    if lhs._initialMarginOnBuy != rhs._initialMarginOnBuy {return false}
    if lhs._initialMarginOnSell != rhs._initialMarginOnSell {return false}
    if lhs._minPriceIncrement != rhs._minPriceIncrement {return false}
    if lhs._minPriceIncrementAmount != rhs._minPriceIncrementAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentResponse) -> Bool {
    if lhs._instrument != rhs._instrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Instrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instrument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    5: .same(proto: "lot"),
    6: .same(proto: "currency"),
    7: .same(proto: "klong"),
    8: .same(proto: "kshort"),
    9: .same(proto: "dlong"),
    10: .same(proto: "dshort"),
    11: .standard(proto: "dlong_min"),
    12: .standard(proto: "dshort_min"),
    13: .standard(proto: "short_enabled_flag"),
    14: .same(proto: "name"),
    15: .same(proto: "exchange"),
    16: .standard(proto: "country_of_risk"),
    17: .standard(proto: "country_of_risk_name"),
    18: .standard(proto: "instrument_type"),
    19: .standard(proto: "trading_status"),
    20: .standard(proto: "otc_flag"),
    21: .standard(proto: "buy_available_flag"),
    22: .standard(proto: "sell_available_flag"),
    23: .standard(proto: "min_price_increment"),
    24: .standard(proto: "api_trade_available_flag"),
    25: .same(proto: "uid"),
    26: .standard(proto: "real_exchange"),
    27: .standard(proto: "position_uid"),
    28: .standard(proto: "asset_uid"),
    36: .standard(proto: "for_iis_flag"),
    37: .standard(proto: "for_qual_investor_flag"),
    38: .standard(proto: "weekend_flag"),
    39: .standard(proto: "blocked_tca_flag"),
    40: .standard(proto: "instrument_kind"),
    56: .standard(proto: "first_1min_candle_date"),
    57: .standard(proto: "first_1day_candle_date"),
    60: .same(proto: "brand"),
    490: .standard(proto: "dlong_client"),
    491: .standard(proto: "dshort_client"),
  ]

  fileprivate class _StorageClass {
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _isin: String = String()
    var _lot: Int32 = 0
    var _currency: String = String()
    var _klong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _kshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlong: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshort: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dlongMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortMin: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _shortEnabledFlag: Bool = false
    var _name: String = String()
    var _exchange: String = String()
    var _countryOfRisk: String = String()
    var _countryOfRiskName: String = String()
    var _instrumentType: String = String()
    var _tradingStatus: Tinkoff_Public_Invest_Api_Contract_V1_SecurityTradingStatus = .unspecified
    var _otcFlag: Bool = false
    var _buyAvailableFlag: Bool = false
    var _sellAvailableFlag: Bool = false
    var _minPriceIncrement: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _apiTradeAvailableFlag: Bool = false
    var _uid: String = String()
    var _realExchange: Tinkoff_Public_Invest_Api_Contract_V1_RealExchange = .unspecified
    var _positionUid: String = String()
    var _assetUid: String = String()
    var _forIisFlag: Bool = false
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_BrandData? = nil
    var _dlongClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _dshortClient: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _isin = source._isin
      _lot = source._lot
      _currency = source._currency
      _klong = source._klong
      _kshort = source._kshort
      _dlong = source._dlong
      _dshort = source._dshort
      _dlongMin = source._dlongMin
      _dshortMin = source._dshortMin
      _shortEnabledFlag = source._shortEnabledFlag
      _name = source._name
      _exchange = source._exchange
      _countryOfRisk = source._countryOfRisk
      _countryOfRiskName = source._countryOfRiskName
      _instrumentType = source._instrumentType
      _tradingStatus = source._tradingStatus
      _otcFlag = source._otcFlag
      _buyAvailableFlag = source._buyAvailableFlag
      _sellAvailableFlag = source._sellAvailableFlag
      _minPriceIncrement = source._minPriceIncrement
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _uid = source._uid
      _realExchange = source._realExchange
      _positionUid = source._positionUid
      _assetUid = source._assetUid
      _forIisFlag = source._forIisFlag
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _instrumentKind = source._instrumentKind
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _brand = source._brand
      _dlongClient = source._dlongClient
      _dshortClient = source._dshortClient
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._klong) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._kshort) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dlong) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dshort) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dlongMin) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._dshortMin) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._shortEnabledFlag) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._exchange) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRisk) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._countryOfRiskName) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._instrumentType) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._tradingStatus) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._otcFlag) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._buyAvailableFlag) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._sellAvailableFlag) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._minPriceIncrement) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._realExchange) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 40: try { try decoder.decodeSingularEnumField(value: &_storage._instrumentKind) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 490: try { try decoder.decodeSingularMessageField(value: &_storage._dlongClient) }()
        case 491: try { try decoder.decodeSingularMessageField(value: &_storage._dshortClient) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 1)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 2)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 3)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 4)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 5)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 6)
      }
      try { if let v = _storage._klong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._kshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dlong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._dshort {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._dlongMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._dshortMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._shortEnabledFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shortEnabledFlag, fieldNumber: 13)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 14)
      }
      if !_storage._exchange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exchange, fieldNumber: 15)
      }
      if !_storage._countryOfRisk.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRisk, fieldNumber: 16)
      }
      if !_storage._countryOfRiskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryOfRiskName, fieldNumber: 17)
      }
      if !_storage._instrumentType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentType, fieldNumber: 18)
      }
      if _storage._tradingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tradingStatus, fieldNumber: 19)
      }
      if _storage._otcFlag != false {
        try visitor.visitSingularBoolField(value: _storage._otcFlag, fieldNumber: 20)
      }
      if _storage._buyAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._buyAvailableFlag, fieldNumber: 21)
      }
      if _storage._sellAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._sellAvailableFlag, fieldNumber: 22)
      }
      try { if let v = _storage._minPriceIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 24)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 25)
      }
      if _storage._realExchange != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._realExchange, fieldNumber: 26)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 27)
      }
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 28)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 36)
      }
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 37)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 38)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 39)
      }
      if _storage._instrumentKind != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._instrumentKind, fieldNumber: 40)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._dlongClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 490)
      } }()
      try { if let v = _storage._dshortClient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 491)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Instrument, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Instrument) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._lot != rhs_storage._lot {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._klong != rhs_storage._klong {return false}
        if _storage._kshort != rhs_storage._kshort {return false}
        if _storage._dlong != rhs_storage._dlong {return false}
        if _storage._dshort != rhs_storage._dshort {return false}
        if _storage._dlongMin != rhs_storage._dlongMin {return false}
        if _storage._dshortMin != rhs_storage._dshortMin {return false}
        if _storage._shortEnabledFlag != rhs_storage._shortEnabledFlag {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._exchange != rhs_storage._exchange {return false}
        if _storage._countryOfRisk != rhs_storage._countryOfRisk {return false}
        if _storage._countryOfRiskName != rhs_storage._countryOfRiskName {return false}
        if _storage._instrumentType != rhs_storage._instrumentType {return false}
        if _storage._tradingStatus != rhs_storage._tradingStatus {return false}
        if _storage._otcFlag != rhs_storage._otcFlag {return false}
        if _storage._buyAvailableFlag != rhs_storage._buyAvailableFlag {return false}
        if _storage._sellAvailableFlag != rhs_storage._sellAvailableFlag {return false}
        if _storage._minPriceIncrement != rhs_storage._minPriceIncrement {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._realExchange != rhs_storage._realExchange {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._instrumentKind != rhs_storage._instrumentKind {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._dlongClient != rhs_storage._dlongClient {return false}
        if _storage._dshortClient != rhs_storage._dshortClient {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDividendsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsRequest) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDividendsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dividends"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dividends) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dividends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dividends, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetDividendsResponse) -> Bool {
    if lhs.dividends != rhs.dividends {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Dividend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dividend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dividend_net"),
    2: .standard(proto: "payment_date"),
    3: .standard(proto: "declared_date"),
    4: .standard(proto: "last_buy_date"),
    5: .standard(proto: "dividend_type"),
    6: .standard(proto: "record_date"),
    7: .same(proto: "regularity"),
    8: .standard(proto: "close_price"),
    9: .standard(proto: "yield_value"),
    10: .standard(proto: "created_at"),
  ]

  fileprivate class _StorageClass {
    var _dividendNet: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _paymentDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _declaredDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastBuyDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dividendType: String = String()
    var _recordDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _regularity: String = String()
    var _closePrice: Tinkoff_Public_Invest_Api_Contract_V1_MoneyValue? = nil
    var _yieldValue: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dividendNet = source._dividendNet
      _paymentDate = source._paymentDate
      _declaredDate = source._declaredDate
      _lastBuyDate = source._lastBuyDate
      _dividendType = source._dividendType
      _recordDate = source._recordDate
      _regularity = source._regularity
      _closePrice = source._closePrice
      _yieldValue = source._yieldValue
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._dividendNet) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._paymentDate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._declaredDate) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lastBuyDate) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._dividendType) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._recordDate) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._regularity) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._closePrice) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._yieldValue) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._dividendNet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._paymentDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._declaredDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lastBuyDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._dividendType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dividendType, fieldNumber: 5)
      }
      try { if let v = _storage._recordDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._regularity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._regularity, fieldNumber: 7)
      }
      try { if let v = _storage._closePrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._yieldValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Dividend, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Dividend) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dividendNet != rhs_storage._dividendNet {return false}
        if _storage._paymentDate != rhs_storage._paymentDate {return false}
        if _storage._declaredDate != rhs_storage._declaredDate {return false}
        if _storage._lastBuyDate != rhs_storage._lastBuyDate {return false}
        if _storage._dividendType != rhs_storage._dividendType {return false}
        if _storage._recordDate != rhs_storage._recordDate {return false}
        if _storage._regularity != rhs_storage._regularity {return false}
        if _storage._closePrice != rhs_storage._closePrice {return false}
        if _storage._yieldValue != rhs_storage._yieldValue {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetResponse) -> Bool {
    if lhs._asset != rhs._asset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_type"),
    2: .standard(proto: "instrument_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._instrumentType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._instrumentStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._instrumentType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._instrumentStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetsRequest) -> Bool {
    if lhs._instrumentType != rhs._instrumentType {return false}
    if lhs._instrumentStatus != rhs._instrumentStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetsResponse) -> Bool {
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetFull: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetFull"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .standard(proto: "name_brief"),
    5: .same(proto: "description"),
    6: .standard(proto: "deleted_at"),
    7: .standard(proto: "required_tests"),
    8: .same(proto: "currency"),
    9: .same(proto: "security"),
    10: .standard(proto: "gos_reg_code"),
    11: .same(proto: "cfi"),
    12: .standard(proto: "code_nsd"),
    13: .same(proto: "status"),
    14: .same(proto: "brand"),
    15: .standard(proto: "updated_at"),
    16: .standard(proto: "br_code"),
    17: .standard(proto: "br_code_name"),
    18: .same(proto: "instruments"),
  ]

  fileprivate class _StorageClass {
    var _uid: String = String()
    var _type: Tinkoff_Public_Invest_Api_Contract_V1_AssetType = .unspecified
    var _name: String = String()
    var _nameBrief: String = String()
    var _description_p: String = String()
    var _deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _requiredTests: [String] = []
    var _ext: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull.OneOf_Ext?
    var _gosRegCode: String = String()
    var _cfi: String = String()
    var _codeNsd: String = String()
    var _status: String = String()
    var _brand: Tinkoff_Public_Invest_Api_Contract_V1_Brand? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _brCode: String = String()
    var _brCodeName: String = String()
    var _instruments: [Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _type = source._type
      _name = source._name
      _nameBrief = source._nameBrief
      _description_p = source._description_p
      _deletedAt = source._deletedAt
      _requiredTests = source._requiredTests
      _ext = source._ext
      _gosRegCode = source._gosRegCode
      _cfi = source._cfi
      _codeNsd = source._codeNsd
      _status = source._status
      _brand = source._brand
      _updatedAt = source._updatedAt
      _brCode = source._brCode
      _brCodeName = source._brCodeName
      _instruments = source._instruments
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._nameBrief) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._deletedAt) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._requiredTests) }()
        case 8: try {
          var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency?
          var hadOneofValue = false
          if let current = _storage._ext {
            hadOneofValue = true
            if case .currency(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ext = .currency(v)
          }
        }()
        case 9: try {
          var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity?
          var hadOneofValue = false
          if let current = _storage._ext {
            hadOneofValue = true
            if case .security(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ext = .security(v)
          }
        }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._gosRegCode) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._cfi) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._codeNsd) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._brand) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._brCode) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._brCodeName) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._instruments) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 1)
      }
      if _storage._type != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._nameBrief.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nameBrief, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      try { if let v = _storage._deletedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._requiredTests.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._requiredTests, fieldNumber: 7)
      }
      switch _storage._ext {
      case .currency?: try {
        guard case .currency(let v)? = _storage._ext else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .security?: try {
        guard case .security(let v)? = _storage._ext else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case nil: break
      }
      if !_storage._gosRegCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gosRegCode, fieldNumber: 10)
      }
      if !_storage._cfi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cfi, fieldNumber: 11)
      }
      if !_storage._codeNsd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeNsd, fieldNumber: 12)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 13)
      }
      try { if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._brCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brCode, fieldNumber: 16)
      }
      if !_storage._brCodeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brCodeName, fieldNumber: 17)
      }
      if !_storage._instruments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._instruments, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetFull) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._nameBrief != rhs_storage._nameBrief {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._deletedAt != rhs_storage._deletedAt {return false}
        if _storage._requiredTests != rhs_storage._requiredTests {return false}
        if _storage._ext != rhs_storage._ext {return false}
        if _storage._gosRegCode != rhs_storage._gosRegCode {return false}
        if _storage._cfi != rhs_storage._cfi {return false}
        if _storage._codeNsd != rhs_storage._codeNsd {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._brCode != rhs_storage._brCode {return false}
        if _storage._brCodeName != rhs_storage._brCodeName {return false}
        if _storage._instruments != rhs_storage._instruments {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Asset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Asset, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Asset) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetCurrency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_currency"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.baseCurrency) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.baseCurrency.isEmpty {
      try visitor.visitSingularStringField(value: self.baseCurrency, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetCurrency) -> Bool {
    if lhs.baseCurrency != rhs.baseCurrency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetSecurity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isin"),
    2: .same(proto: "type"),
    10: .standard(proto: "instrument_kind"),
    3: .same(proto: "share"),
    4: .same(proto: "bond"),
    5: .same(proto: "sp"),
    6: .same(proto: "etf"),
    7: .standard(proto: "clearing_certificate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.isin) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try {
        var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetShare?
        var hadOneofValue = false
        if let current = self.ext {
          hadOneofValue = true
          if case .share(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ext = .share(v)
        }
      }()
      case 4: try {
        var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetBond?
        var hadOneofValue = false
        if let current = self.ext {
          hadOneofValue = true
          if case .bond(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ext = .bond(v)
        }
      }()
      case 5: try {
        var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct?
        var hadOneofValue = false
        if let current = self.ext {
          hadOneofValue = true
          if case .sp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ext = .sp(v)
        }
      }()
      case 6: try {
        var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf?
        var hadOneofValue = false
        if let current = self.ext {
          hadOneofValue = true
          if case .etf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ext = .etf(v)
        }
      }()
      case 7: try {
        var v: Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate?
        var hadOneofValue = false
        if let current = self.ext {
          hadOneofValue = true
          if case .clearingCertificate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ext = .clearingCertificate(v)
        }
      }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.instrumentKind) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.isin.isEmpty {
      try visitor.visitSingularStringField(value: self.isin, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    switch self.ext {
    case .share?: try {
      guard case .share(let v)? = self.ext else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .bond?: try {
      guard case .bond(let v)? = self.ext else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .sp?: try {
      guard case .sp(let v)? = self.ext else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .etf?: try {
      guard case .etf(let v)? = self.ext else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .clearingCertificate?: try {
      guard case .clearingCertificate(let v)? = self.ext else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    if self.instrumentKind != .unspecified {
      try visitor.visitSingularEnumField(value: self.instrumentKind, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetSecurity) -> Bool {
    if lhs.isin != rhs.isin {return false}
    if lhs.type != rhs.type {return false}
    if lhs.instrumentKind != rhs.instrumentKind {return false}
    if lhs.ext != rhs.ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetShare: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetShare"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "issue_size"),
    3: .same(proto: "nominal"),
    4: .standard(proto: "nominal_currency"),
    5: .standard(proto: "primary_index"),
    6: .standard(proto: "dividend_rate"),
    7: .standard(proto: "preferred_share_type"),
    8: .standard(proto: "ipo_date"),
    9: .standard(proto: "registry_date"),
    10: .standard(proto: "div_yield_flag"),
    11: .standard(proto: "issue_kind"),
    12: .standard(proto: "placement_date"),
    13: .standard(proto: "repres_isin"),
    14: .standard(proto: "issue_size_plan"),
    15: .standard(proto: "total_float"),
  ]

  fileprivate class _StorageClass {
    var _type: Tinkoff_Public_Invest_Api_Contract_V1_ShareType = .unspecified
    var _issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominalCurrency: String = String()
    var _primaryIndex: String = String()
    var _dividendRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _preferredShareType: String = String()
    var _ipoDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _registryDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _divYieldFlag: Bool = false
    var _issueKind: String = String()
    var _placementDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _represIsin: String = String()
    var _issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _totalFloat: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _issueSize = source._issueSize
      _nominal = source._nominal
      _nominalCurrency = source._nominalCurrency
      _primaryIndex = source._primaryIndex
      _dividendRate = source._dividendRate
      _preferredShareType = source._preferredShareType
      _ipoDate = source._ipoDate
      _registryDate = source._registryDate
      _divYieldFlag = source._divYieldFlag
      _issueKind = source._issueKind
      _placementDate = source._placementDate
      _represIsin = source._represIsin
      _issueSizePlan = source._issueSizePlan
      _totalFloat = source._totalFloat
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._issueSize) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._nominalCurrency) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._primaryIndex) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._dividendRate) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._preferredShareType) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._ipoDate) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._registryDate) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._divYieldFlag) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._issueKind) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._placementDate) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._represIsin) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._issueSizePlan) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._totalFloat) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      try { if let v = _storage._issueSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._nominalCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nominalCurrency, fieldNumber: 4)
      }
      if !_storage._primaryIndex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._primaryIndex, fieldNumber: 5)
      }
      try { if let v = _storage._dividendRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._preferredShareType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preferredShareType, fieldNumber: 7)
      }
      try { if let v = _storage._ipoDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._registryDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._divYieldFlag != false {
        try visitor.visitSingularBoolField(value: _storage._divYieldFlag, fieldNumber: 10)
      }
      if !_storage._issueKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issueKind, fieldNumber: 11)
      }
      try { if let v = _storage._placementDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._represIsin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._represIsin, fieldNumber: 13)
      }
      try { if let v = _storage._issueSizePlan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._totalFloat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetShare, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetShare) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._issueSize != rhs_storage._issueSize {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._nominalCurrency != rhs_storage._nominalCurrency {return false}
        if _storage._primaryIndex != rhs_storage._primaryIndex {return false}
        if _storage._dividendRate != rhs_storage._dividendRate {return false}
        if _storage._preferredShareType != rhs_storage._preferredShareType {return false}
        if _storage._ipoDate != rhs_storage._ipoDate {return false}
        if _storage._registryDate != rhs_storage._registryDate {return false}
        if _storage._divYieldFlag != rhs_storage._divYieldFlag {return false}
        if _storage._issueKind != rhs_storage._issueKind {return false}
        if _storage._placementDate != rhs_storage._placementDate {return false}
        if _storage._represIsin != rhs_storage._represIsin {return false}
        if _storage._issueSizePlan != rhs_storage._issueSizePlan {return false}
        if _storage._totalFloat != rhs_storage._totalFloat {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetBond: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetBond"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_nominal"),
    2: .standard(proto: "borrow_name"),
    3: .standard(proto: "issue_size"),
    4: .same(proto: "nominal"),
    5: .standard(proto: "nominal_currency"),
    6: .standard(proto: "issue_kind"),
    7: .standard(proto: "interest_kind"),
    8: .standard(proto: "coupon_quantity_per_year"),
    9: .standard(proto: "indexed_nominal_flag"),
    10: .standard(proto: "subordinated_flag"),
    11: .standard(proto: "collateral_flag"),
    12: .standard(proto: "tax_free_flag"),
    13: .standard(proto: "amortization_flag"),
    14: .standard(proto: "floating_coupon_flag"),
    15: .standard(proto: "perpetual_flag"),
    16: .standard(proto: "maturity_date"),
    17: .standard(proto: "return_condition"),
    18: .standard(proto: "state_reg_date"),
    19: .standard(proto: "placement_date"),
    20: .standard(proto: "placement_price"),
    21: .standard(proto: "issue_size_plan"),
  ]

  fileprivate class _StorageClass {
    var _currentNominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _borrowName: String = String()
    var _issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominalCurrency: String = String()
    var _issueKind: String = String()
    var _interestKind: String = String()
    var _couponQuantityPerYear: Int32 = 0
    var _indexedNominalFlag: Bool = false
    var _subordinatedFlag: Bool = false
    var _collateralFlag: Bool = false
    var _taxFreeFlag: Bool = false
    var _amortizationFlag: Bool = false
    var _floatingCouponFlag: Bool = false
    var _perpetualFlag: Bool = false
    var _maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _returnCondition: String = String()
    var _stateRegDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _placementDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _placementPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentNominal = source._currentNominal
      _borrowName = source._borrowName
      _issueSize = source._issueSize
      _nominal = source._nominal
      _nominalCurrency = source._nominalCurrency
      _issueKind = source._issueKind
      _interestKind = source._interestKind
      _couponQuantityPerYear = source._couponQuantityPerYear
      _indexedNominalFlag = source._indexedNominalFlag
      _subordinatedFlag = source._subordinatedFlag
      _collateralFlag = source._collateralFlag
      _taxFreeFlag = source._taxFreeFlag
      _amortizationFlag = source._amortizationFlag
      _floatingCouponFlag = source._floatingCouponFlag
      _perpetualFlag = source._perpetualFlag
      _maturityDate = source._maturityDate
      _returnCondition = source._returnCondition
      _stateRegDate = source._stateRegDate
      _placementDate = source._placementDate
      _placementPrice = source._placementPrice
      _issueSizePlan = source._issueSizePlan
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._currentNominal) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._borrowName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._issueSize) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._nominalCurrency) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._issueKind) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._interestKind) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._couponQuantityPerYear) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._indexedNominalFlag) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._subordinatedFlag) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._collateralFlag) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._taxFreeFlag) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._amortizationFlag) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._floatingCouponFlag) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._perpetualFlag) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._maturityDate) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._returnCondition) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._stateRegDate) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._placementDate) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._placementPrice) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._issueSizePlan) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._currentNominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._borrowName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._borrowName, fieldNumber: 2)
      }
      try { if let v = _storage._issueSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._nominalCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nominalCurrency, fieldNumber: 5)
      }
      if !_storage._issueKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issueKind, fieldNumber: 6)
      }
      if !_storage._interestKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interestKind, fieldNumber: 7)
      }
      if _storage._couponQuantityPerYear != 0 {
        try visitor.visitSingularInt32Field(value: _storage._couponQuantityPerYear, fieldNumber: 8)
      }
      if _storage._indexedNominalFlag != false {
        try visitor.visitSingularBoolField(value: _storage._indexedNominalFlag, fieldNumber: 9)
      }
      if _storage._subordinatedFlag != false {
        try visitor.visitSingularBoolField(value: _storage._subordinatedFlag, fieldNumber: 10)
      }
      if _storage._collateralFlag != false {
        try visitor.visitSingularBoolField(value: _storage._collateralFlag, fieldNumber: 11)
      }
      if _storage._taxFreeFlag != false {
        try visitor.visitSingularBoolField(value: _storage._taxFreeFlag, fieldNumber: 12)
      }
      if _storage._amortizationFlag != false {
        try visitor.visitSingularBoolField(value: _storage._amortizationFlag, fieldNumber: 13)
      }
      if _storage._floatingCouponFlag != false {
        try visitor.visitSingularBoolField(value: _storage._floatingCouponFlag, fieldNumber: 14)
      }
      if _storage._perpetualFlag != false {
        try visitor.visitSingularBoolField(value: _storage._perpetualFlag, fieldNumber: 15)
      }
      try { if let v = _storage._maturityDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._returnCondition.isEmpty {
        try visitor.visitSingularStringField(value: _storage._returnCondition, fieldNumber: 17)
      }
      try { if let v = _storage._stateRegDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._placementDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._placementPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._issueSizePlan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetBond, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetBond) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._currentNominal != rhs_storage._currentNominal {return false}
        if _storage._borrowName != rhs_storage._borrowName {return false}
        if _storage._issueSize != rhs_storage._issueSize {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._nominalCurrency != rhs_storage._nominalCurrency {return false}
        if _storage._issueKind != rhs_storage._issueKind {return false}
        if _storage._interestKind != rhs_storage._interestKind {return false}
        if _storage._couponQuantityPerYear != rhs_storage._couponQuantityPerYear {return false}
        if _storage._indexedNominalFlag != rhs_storage._indexedNominalFlag {return false}
        if _storage._subordinatedFlag != rhs_storage._subordinatedFlag {return false}
        if _storage._collateralFlag != rhs_storage._collateralFlag {return false}
        if _storage._taxFreeFlag != rhs_storage._taxFreeFlag {return false}
        if _storage._amortizationFlag != rhs_storage._amortizationFlag {return false}
        if _storage._floatingCouponFlag != rhs_storage._floatingCouponFlag {return false}
        if _storage._perpetualFlag != rhs_storage._perpetualFlag {return false}
        if _storage._maturityDate != rhs_storage._maturityDate {return false}
        if _storage._returnCondition != rhs_storage._returnCondition {return false}
        if _storage._stateRegDate != rhs_storage._stateRegDate {return false}
        if _storage._placementDate != rhs_storage._placementDate {return false}
        if _storage._placementPrice != rhs_storage._placementPrice {return false}
        if _storage._issueSizePlan != rhs_storage._issueSizePlan {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetStructuredProduct"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "borrow_name"),
    2: .same(proto: "nominal"),
    3: .standard(proto: "nominal_currency"),
    4: .same(proto: "type"),
    5: .standard(proto: "logic_portfolio"),
    6: .standard(proto: "asset_type"),
    7: .standard(proto: "basic_asset"),
    8: .standard(proto: "safety_barrier"),
    9: .standard(proto: "maturity_date"),
    10: .standard(proto: "issue_size_plan"),
    11: .standard(proto: "issue_size"),
    12: .standard(proto: "placement_date"),
    13: .standard(proto: "issue_kind"),
  ]

  fileprivate class _StorageClass {
    var _borrowName: String = String()
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominalCurrency: String = String()
    var _type: Tinkoff_Public_Invest_Api_Contract_V1_StructuredProductType = .spTypeUnspecified
    var _logicPortfolio: String = String()
    var _assetType: Tinkoff_Public_Invest_Api_Contract_V1_AssetType = .unspecified
    var _basicAsset: String = String()
    var _safetyBarrier: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _maturityDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _issueSizePlan: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _issueSize: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _placementDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _issueKind: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _borrowName = source._borrowName
      _nominal = source._nominal
      _nominalCurrency = source._nominalCurrency
      _type = source._type
      _logicPortfolio = source._logicPortfolio
      _assetType = source._assetType
      _basicAsset = source._basicAsset
      _safetyBarrier = source._safetyBarrier
      _maturityDate = source._maturityDate
      _issueSizePlan = source._issueSizePlan
      _issueSize = source._issueSize
      _placementDate = source._placementDate
      _issueKind = source._issueKind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._borrowName) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._nominalCurrency) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._logicPortfolio) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._assetType) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._basicAsset) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._safetyBarrier) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._maturityDate) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._issueSizePlan) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._issueSize) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._placementDate) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._issueKind) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._borrowName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._borrowName, fieldNumber: 1)
      }
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._nominalCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nominalCurrency, fieldNumber: 3)
      }
      if _storage._type != .spTypeUnspecified {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 4)
      }
      if !_storage._logicPortfolio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logicPortfolio, fieldNumber: 5)
      }
      if _storage._assetType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._assetType, fieldNumber: 6)
      }
      if !_storage._basicAsset.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basicAsset, fieldNumber: 7)
      }
      try { if let v = _storage._safetyBarrier {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._maturityDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._issueSizePlan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._issueSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._placementDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._issueKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issueKind, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetStructuredProduct) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._borrowName != rhs_storage._borrowName {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._nominalCurrency != rhs_storage._nominalCurrency {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._logicPortfolio != rhs_storage._logicPortfolio {return false}
        if _storage._assetType != rhs_storage._assetType {return false}
        if _storage._basicAsset != rhs_storage._basicAsset {return false}
        if _storage._safetyBarrier != rhs_storage._safetyBarrier {return false}
        if _storage._maturityDate != rhs_storage._maturityDate {return false}
        if _storage._issueSizePlan != rhs_storage._issueSizePlan {return false}
        if _storage._issueSize != rhs_storage._issueSize {return false}
        if _storage._placementDate != rhs_storage._placementDate {return false}
        if _storage._issueKind != rhs_storage._issueKind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetEtf"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_expense"),
    2: .standard(proto: "hurdle_rate"),
    3: .standard(proto: "performance_fee"),
    4: .standard(proto: "fixed_commission"),
    5: .standard(proto: "payment_type"),
    6: .standard(proto: "watermark_flag"),
    7: .standard(proto: "buy_premium"),
    8: .standard(proto: "sell_discount"),
    9: .standard(proto: "rebalancing_flag"),
    10: .standard(proto: "rebalancing_freq"),
    11: .standard(proto: "management_type"),
    12: .standard(proto: "primary_index"),
    13: .standard(proto: "focus_type"),
    14: .standard(proto: "leveraged_flag"),
    15: .standard(proto: "num_share"),
    16: .standard(proto: "ucits_flag"),
    17: .standard(proto: "released_date"),
    18: .same(proto: "description"),
    19: .standard(proto: "primary_index_description"),
    20: .standard(proto: "primary_index_company"),
    21: .standard(proto: "index_recovery_period"),
    22: .standard(proto: "inav_code"),
    23: .standard(proto: "div_yield_flag"),
    24: .standard(proto: "expense_commission"),
    25: .standard(proto: "primary_index_tracking_error"),
    26: .standard(proto: "rebalancing_plan"),
    27: .standard(proto: "tax_rate"),
    28: .standard(proto: "rebalancing_dates"),
    29: .standard(proto: "issue_kind"),
    30: .same(proto: "nominal"),
    31: .standard(proto: "nominal_currency"),
  ]

  fileprivate class _StorageClass {
    var _totalExpense: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _hurdleRate: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _performanceFee: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _fixedCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _paymentType: String = String()
    var _watermarkFlag: Bool = false
    var _buyPremium: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _sellDiscount: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _rebalancingFlag: Bool = false
    var _rebalancingFreq: String = String()
    var _managementType: String = String()
    var _primaryIndex: String = String()
    var _focusType: String = String()
    var _leveragedFlag: Bool = false
    var _numShare: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _ucitsFlag: Bool = false
    var _releasedDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _primaryIndexDescription: String = String()
    var _primaryIndexCompany: String = String()
    var _indexRecoveryPeriod: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _inavCode: String = String()
    var _divYieldFlag: Bool = false
    var _expenseCommission: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _primaryIndexTrackingError: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _rebalancingPlan: String = String()
    var _taxRate: String = String()
    var _rebalancingDates: [SwiftProtobuf.Google_Protobuf_Timestamp] = []
    var _issueKind: String = String()
    var _nominal: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _nominalCurrency: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _totalExpense = source._totalExpense
      _hurdleRate = source._hurdleRate
      _performanceFee = source._performanceFee
      _fixedCommission = source._fixedCommission
      _paymentType = source._paymentType
      _watermarkFlag = source._watermarkFlag
      _buyPremium = source._buyPremium
      _sellDiscount = source._sellDiscount
      _rebalancingFlag = source._rebalancingFlag
      _rebalancingFreq = source._rebalancingFreq
      _managementType = source._managementType
      _primaryIndex = source._primaryIndex
      _focusType = source._focusType
      _leveragedFlag = source._leveragedFlag
      _numShare = source._numShare
      _ucitsFlag = source._ucitsFlag
      _releasedDate = source._releasedDate
      _description_p = source._description_p
      _primaryIndexDescription = source._primaryIndexDescription
      _primaryIndexCompany = source._primaryIndexCompany
      _indexRecoveryPeriod = source._indexRecoveryPeriod
      _inavCode = source._inavCode
      _divYieldFlag = source._divYieldFlag
      _expenseCommission = source._expenseCommission
      _primaryIndexTrackingError = source._primaryIndexTrackingError
      _rebalancingPlan = source._rebalancingPlan
      _taxRate = source._taxRate
      _rebalancingDates = source._rebalancingDates
      _issueKind = source._issueKind
      _nominal = source._nominal
      _nominalCurrency = source._nominalCurrency
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._totalExpense) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._hurdleRate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._performanceFee) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._fixedCommission) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._paymentType) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._watermarkFlag) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._buyPremium) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._sellDiscount) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._rebalancingFlag) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._rebalancingFreq) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._managementType) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._primaryIndex) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._focusType) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._leveragedFlag) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._numShare) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._ucitsFlag) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._releasedDate) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._primaryIndexDescription) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._primaryIndexCompany) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._indexRecoveryPeriod) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._inavCode) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._divYieldFlag) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._expenseCommission) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._primaryIndexTrackingError) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._rebalancingPlan) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._taxRate) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._rebalancingDates) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._issueKind) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._nominal) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._nominalCurrency) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._totalExpense {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._hurdleRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._performanceFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._fixedCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._paymentType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._paymentType, fieldNumber: 5)
      }
      if _storage._watermarkFlag != false {
        try visitor.visitSingularBoolField(value: _storage._watermarkFlag, fieldNumber: 6)
      }
      try { if let v = _storage._buyPremium {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._sellDiscount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._rebalancingFlag != false {
        try visitor.visitSingularBoolField(value: _storage._rebalancingFlag, fieldNumber: 9)
      }
      if !_storage._rebalancingFreq.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rebalancingFreq, fieldNumber: 10)
      }
      if !_storage._managementType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._managementType, fieldNumber: 11)
      }
      if !_storage._primaryIndex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._primaryIndex, fieldNumber: 12)
      }
      if !_storage._focusType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._focusType, fieldNumber: 13)
      }
      if _storage._leveragedFlag != false {
        try visitor.visitSingularBoolField(value: _storage._leveragedFlag, fieldNumber: 14)
      }
      try { if let v = _storage._numShare {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if _storage._ucitsFlag != false {
        try visitor.visitSingularBoolField(value: _storage._ucitsFlag, fieldNumber: 16)
      }
      try { if let v = _storage._releasedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 18)
      }
      if !_storage._primaryIndexDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._primaryIndexDescription, fieldNumber: 19)
      }
      if !_storage._primaryIndexCompany.isEmpty {
        try visitor.visitSingularStringField(value: _storage._primaryIndexCompany, fieldNumber: 20)
      }
      try { if let v = _storage._indexRecoveryPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if !_storage._inavCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inavCode, fieldNumber: 22)
      }
      if _storage._divYieldFlag != false {
        try visitor.visitSingularBoolField(value: _storage._divYieldFlag, fieldNumber: 23)
      }
      try { if let v = _storage._expenseCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._primaryIndexTrackingError {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      if !_storage._rebalancingPlan.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rebalancingPlan, fieldNumber: 26)
      }
      if !_storage._taxRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taxRate, fieldNumber: 27)
      }
      if !_storage._rebalancingDates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rebalancingDates, fieldNumber: 28)
      }
      if !_storage._issueKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issueKind, fieldNumber: 29)
      }
      try { if let v = _storage._nominal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      if !_storage._nominalCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nominalCurrency, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetEtf) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._totalExpense != rhs_storage._totalExpense {return false}
        if _storage._hurdleRate != rhs_storage._hurdleRate {return false}
        if _storage._performanceFee != rhs_storage._performanceFee {return false}
        if _storage._fixedCommission != rhs_storage._fixedCommission {return false}
        if _storage._paymentType != rhs_storage._paymentType {return false}
        if _storage._watermarkFlag != rhs_storage._watermarkFlag {return false}
        if _storage._buyPremium != rhs_storage._buyPremium {return false}
        if _storage._sellDiscount != rhs_storage._sellDiscount {return false}
        if _storage._rebalancingFlag != rhs_storage._rebalancingFlag {return false}
        if _storage._rebalancingFreq != rhs_storage._rebalancingFreq {return false}
        if _storage._managementType != rhs_storage._managementType {return false}
        if _storage._primaryIndex != rhs_storage._primaryIndex {return false}
        if _storage._focusType != rhs_storage._focusType {return false}
        if _storage._leveragedFlag != rhs_storage._leveragedFlag {return false}
        if _storage._numShare != rhs_storage._numShare {return false}
        if _storage._ucitsFlag != rhs_storage._ucitsFlag {return false}
        if _storage._releasedDate != rhs_storage._releasedDate {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._primaryIndexDescription != rhs_storage._primaryIndexDescription {return false}
        if _storage._primaryIndexCompany != rhs_storage._primaryIndexCompany {return false}
        if _storage._indexRecoveryPeriod != rhs_storage._indexRecoveryPeriod {return false}
        if _storage._inavCode != rhs_storage._inavCode {return false}
        if _storage._divYieldFlag != rhs_storage._divYieldFlag {return false}
        if _storage._expenseCommission != rhs_storage._expenseCommission {return false}
        if _storage._primaryIndexTrackingError != rhs_storage._primaryIndexTrackingError {return false}
        if _storage._rebalancingPlan != rhs_storage._rebalancingPlan {return false}
        if _storage._taxRate != rhs_storage._taxRate {return false}
        if _storage._rebalancingDates != rhs_storage._rebalancingDates {return false}
        if _storage._issueKind != rhs_storage._issueKind {return false}
        if _storage._nominal != rhs_storage._nominal {return false}
        if _storage._nominalCurrency != rhs_storage._nominalCurrency {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetClearingCertificate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nominal"),
    2: .standard(proto: "nominal_currency"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nominal) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nominalCurrency) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._nominal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.nominalCurrency.isEmpty {
      try visitor.visitSingularStringField(value: self.nominalCurrency, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetClearingCertificate) -> Bool {
    if lhs._nominal != rhs._nominal {return false}
    if lhs.nominalCurrency != rhs.nominalCurrency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_Brand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Brand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "info"),
    5: .same(proto: "company"),
    6: .same(proto: "sector"),
    7: .standard(proto: "country_of_risk"),
    8: .standard(proto: "country_of_risk_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.info) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.company) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sector) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.countryOfRisk) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.countryOfRiskName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 5)
    }
    if !self.sector.isEmpty {
      try visitor.visitSingularStringField(value: self.sector, fieldNumber: 6)
    }
    if !self.countryOfRisk.isEmpty {
      try visitor.visitSingularStringField(value: self.countryOfRisk, fieldNumber: 7)
    }
    if !self.countryOfRiskName.isEmpty {
      try visitor.visitSingularStringField(value: self.countryOfRiskName, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_Brand, rhs: Tinkoff_Public_Invest_Api_Contract_V1_Brand) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.info != rhs.info {return false}
    if lhs.company != rhs.company {return false}
    if lhs.sector != rhs.sector {return false}
    if lhs.countryOfRisk != rhs.countryOfRisk {return false}
    if lhs.countryOfRiskName != rhs.countryOfRiskName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetInstrument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "figi"),
    3: .standard(proto: "instrument_type"),
    4: .same(proto: "ticker"),
    5: .standard(proto: "class_code"),
    6: .same(proto: "links"),
    10: .standard(proto: "instrument_kind"),
    11: .standard(proto: "position_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.instrumentType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.classCode) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.links) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.instrumentKind) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.positionUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 2)
    }
    if !self.instrumentType.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentType, fieldNumber: 3)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 4)
    }
    if !self.classCode.isEmpty {
      try visitor.visitSingularStringField(value: self.classCode, fieldNumber: 5)
    }
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 6)
    }
    if self.instrumentKind != .unspecified {
      try visitor.visitSingularEnumField(value: self.instrumentKind, fieldNumber: 10)
    }
    if !self.positionUid.isEmpty {
      try visitor.visitSingularStringField(value: self.positionUid, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument, rhs: Tinkoff_Public_Invest_Api_Contract_V1_AssetInstrument) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.figi != rhs.figi {return false}
    if lhs.instrumentType != rhs.instrumentType {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.classCode != rhs.classCode {return false}
    if lhs.links != rhs.links {return false}
    if lhs.instrumentKind != rhs.instrumentKind {return false}
    if lhs.positionUid != rhs.positionUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "instrument_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.instrumentUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.instrumentUid.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentUid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink, rhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentLink) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.instrumentUid != rhs.instrumentUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFavoritesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._groupID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesRequest) -> Bool {
    if lhs._groupID != rhs._groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFavoritesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "favorite_instruments"),
    2: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.favoriteInstruments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.favoriteInstruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.favoriteInstruments, fieldNumber: 1)
    }
    try { if let v = self._groupID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoritesResponse) -> Bool {
    if lhs.favoriteInstruments != rhs.favoriteInstruments {return false}
    if lhs._groupID != rhs._groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FavoriteInstrument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "isin"),
    11: .standard(proto: "instrument_type"),
    12: .same(proto: "name"),
    13: .same(proto: "uid"),
    16: .standard(proto: "otc_flag"),
    17: .standard(proto: "api_trade_available_flag"),
    18: .standard(proto: "instrument_kind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.classCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.isin) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.instrumentType) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self.otcFlag) }()
      case 17: try { try decoder.decodeSingularBoolField(value: &self.apiTradeAvailableFlag) }()
      case 18: try { try decoder.decodeSingularEnumField(value: &self.instrumentKind) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 2)
    }
    if !self.classCode.isEmpty {
      try visitor.visitSingularStringField(value: self.classCode, fieldNumber: 3)
    }
    if !self.isin.isEmpty {
      try visitor.visitSingularStringField(value: self.isin, fieldNumber: 4)
    }
    if !self.instrumentType.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentType, fieldNumber: 11)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 12)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 13)
    }
    if self.otcFlag != false {
      try visitor.visitSingularBoolField(value: self.otcFlag, fieldNumber: 16)
    }
    if self.apiTradeAvailableFlag != false {
      try visitor.visitSingularBoolField(value: self.apiTradeAvailableFlag, fieldNumber: 17)
    }
    if self.instrumentKind != .unspecified {
      try visitor.visitSingularEnumField(value: self.instrumentKind, fieldNumber: 18)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FavoriteInstrument) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.classCode != rhs.classCode {return false}
    if lhs.isin != rhs.isin {return false}
    if lhs.instrumentType != rhs.instrumentType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.otcFlag != rhs.otcFlag {return false}
    if lhs.apiTradeAvailableFlag != rhs.apiTradeAvailableFlag {return false}
    if lhs.instrumentKind != rhs.instrumentKind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EditFavoritesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
    6: .standard(proto: "action_type"),
    7: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.actionType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    if self.actionType != .unspecified {
      try visitor.visitSingularEnumField(value: self.actionType, fieldNumber: 6)
    }
    try { if let v = self._groupID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequest) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.actionType != rhs.actionType {return false}
    if lhs._groupID != rhs._groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EditFavoritesRequestInstrument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._figi) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._figi {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument, rhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesRequestInstrument) -> Bool {
    if lhs._figi != rhs._figi {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EditFavoritesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "favorite_instruments"),
    2: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.favoriteInstruments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.favoriteInstruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.favoriteInstruments, fieldNumber: 1)
    }
    try { if let v = self._groupID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_EditFavoritesResponse) -> Bool {
    if lhs.favoriteInstruments != rhs.favoriteInstruments {return false}
    if lhs._groupID != rhs._groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFavoriteGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_name"),
    2: .standard(proto: "group_color"),
    3: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupColor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 1)
    }
    if !self.groupColor.isEmpty {
      try visitor.visitSingularStringField(value: self.groupColor, fieldNumber: 2)
    }
    try { if let v = self._note {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupRequest) -> Bool {
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupColor != rhs.groupColor {return false}
    if lhs._note != rhs._note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFavoriteGroupResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_CreateFavoriteGroupResponse) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteFavoriteGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteFavoriteGroupResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_DeleteFavoriteGroupResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFavoriteGroupsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_id"),
    2: .standard(proto: "excluded_group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.instrumentID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.excludedGroupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.instrumentID, fieldNumber: 1)
    }
    if !self.excludedGroupID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.excludedGroupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsRequest) -> Bool {
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.excludedGroupID != rhs.excludedGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFavoriteGroupsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groups"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groups) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse) -> Bool {
    if lhs.groups != rhs.groups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.FavoriteGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.protoMessageName + ".FavoriteGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .same(proto: "color"),
    4: .same(proto: "size"),
    5: .standard(proto: "contains_instrument"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._containsInstrument) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 4)
    }
    try { if let v = self._containsInstrument {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.FavoriteGroup, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetFavoriteGroupsResponse.FavoriteGroup) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.color != rhs.color {return false}
    if lhs.size != rhs.size {return false}
    if lhs._containsInstrument != rhs._containsInstrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCountriesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCountriesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "countries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.countries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.countries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.countries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetCountriesResponse) -> Bool {
    if lhs.countries != rhs.countries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndicativesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndicativesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativesResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndicativeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "ticker"),
    3: .standard(proto: "class_code"),
    4: .same(proto: "currency"),
    10: .standard(proto: "instrument_kind"),
    12: .same(proto: "name"),
    13: .same(proto: "exchange"),
    14: .same(proto: "uid"),
    404: .standard(proto: "buy_available_flag"),
    405: .standard(proto: "sell_available_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.classCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.instrumentKind) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.exchange) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 404: try { try decoder.decodeSingularBoolField(value: &self.buyAvailableFlag) }()
      case 405: try { try decoder.decodeSingularBoolField(value: &self.sellAvailableFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 2)
    }
    if !self.classCode.isEmpty {
      try visitor.visitSingularStringField(value: self.classCode, fieldNumber: 3)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 4)
    }
    if self.instrumentKind != .unspecified {
      try visitor.visitSingularEnumField(value: self.instrumentKind, fieldNumber: 10)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 12)
    }
    if !self.exchange.isEmpty {
      try visitor.visitSingularStringField(value: self.exchange, fieldNumber: 13)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 14)
    }
    if self.buyAvailableFlag != false {
      try visitor.visitSingularBoolField(value: self.buyAvailableFlag, fieldNumber: 404)
    }
    if self.sellAvailableFlag != false {
      try visitor.visitSingularBoolField(value: self.sellAvailableFlag, fieldNumber: 405)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_IndicativeResponse) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.classCode != rhs.classCode {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.instrumentKind != rhs.instrumentKind {return false}
    if lhs.name != rhs.name {return false}
    if lhs.exchange != rhs.exchange {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.buyAvailableFlag != rhs.buyAvailableFlag {return false}
    if lhs.sellAvailableFlag != rhs.sellAvailableFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CountryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "alfa_two"),
    2: .standard(proto: "alfa_three"),
    3: .same(proto: "name"),
    4: .standard(proto: "name_brief"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.alfaTwo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.alfaThree) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.nameBrief) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alfaTwo.isEmpty {
      try visitor.visitSingularStringField(value: self.alfaTwo, fieldNumber: 1)
    }
    if !self.alfaThree.isEmpty {
      try visitor.visitSingularStringField(value: self.alfaThree, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.nameBrief.isEmpty {
      try visitor.visitSingularStringField(value: self.nameBrief, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_CountryResponse) -> Bool {
    if lhs.alfaTwo != rhs.alfaTwo {return false}
    if lhs.alfaThree != rhs.alfaThree {return false}
    if lhs.name != rhs.name {return false}
    if lhs.nameBrief != rhs.nameBrief {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FindInstrumentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
    2: .standard(proto: "instrument_kind"),
    3: .standard(proto: "api_trade_available_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._instrumentKind) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._apiTradeAvailableFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 1)
    }
    try { if let v = self._instrumentKind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._apiTradeAvailableFlag {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentRequest) -> Bool {
    if lhs.query != rhs.query {return false}
    if lhs._instrumentKind != rhs._instrumentKind {return false}
    if lhs._apiTradeAvailableFlag != rhs._apiTradeAvailableFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FindInstrumentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instruments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_FindInstrumentResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentShort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isin"),
    2: .same(proto: "figi"),
    3: .same(proto: "ticker"),
    4: .standard(proto: "class_code"),
    5: .standard(proto: "instrument_type"),
    6: .same(proto: "name"),
    7: .same(proto: "uid"),
    8: .standard(proto: "position_uid"),
    10: .standard(proto: "instrument_kind"),
    11: .standard(proto: "api_trade_available_flag"),
    12: .standard(proto: "for_iis_flag"),
    26: .standard(proto: "first_1min_candle_date"),
    27: .standard(proto: "first_1day_candle_date"),
    28: .standard(proto: "for_qual_investor_flag"),
    29: .standard(proto: "weekend_flag"),
    30: .standard(proto: "blocked_tca_flag"),
    31: .same(proto: "lot"),
  ]

  fileprivate class _StorageClass {
    var _isin: String = String()
    var _figi: String = String()
    var _ticker: String = String()
    var _classCode: String = String()
    var _instrumentType: String = String()
    var _name: String = String()
    var _uid: String = String()
    var _positionUid: String = String()
    var _instrumentKind: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentType = .unspecified
    var _apiTradeAvailableFlag: Bool = false
    var _forIisFlag: Bool = false
    var _first1MinCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _first1DayCandleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _forQualInvestorFlag: Bool = false
    var _weekendFlag: Bool = false
    var _blockedTcaFlag: Bool = false
    var _lot: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _isin = source._isin
      _figi = source._figi
      _ticker = source._ticker
      _classCode = source._classCode
      _instrumentType = source._instrumentType
      _name = source._name
      _uid = source._uid
      _positionUid = source._positionUid
      _instrumentKind = source._instrumentKind
      _apiTradeAvailableFlag = source._apiTradeAvailableFlag
      _forIisFlag = source._forIisFlag
      _first1MinCandleDate = source._first1MinCandleDate
      _first1DayCandleDate = source._first1DayCandleDate
      _forQualInvestorFlag = source._forQualInvestorFlag
      _weekendFlag = source._weekendFlag
      _blockedTcaFlag = source._blockedTcaFlag
      _lot = source._lot
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._isin) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ticker) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._classCode) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._instrumentType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._positionUid) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._instrumentKind) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._apiTradeAvailableFlag) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._forIisFlag) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._first1MinCandleDate) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._first1DayCandleDate) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._forQualInvestorFlag) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._weekendFlag) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._blockedTcaFlag) }()
        case 31: try { try decoder.decodeSingularInt32Field(value: &_storage._lot) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 1)
      }
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 2)
      }
      if !_storage._ticker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticker, fieldNumber: 3)
      }
      if !_storage._classCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classCode, fieldNumber: 4)
      }
      if !_storage._instrumentType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentType, fieldNumber: 5)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 7)
      }
      if !_storage._positionUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positionUid, fieldNumber: 8)
      }
      if _storage._instrumentKind != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._instrumentKind, fieldNumber: 10)
      }
      if _storage._apiTradeAvailableFlag != false {
        try visitor.visitSingularBoolField(value: _storage._apiTradeAvailableFlag, fieldNumber: 11)
      }
      if _storage._forIisFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forIisFlag, fieldNumber: 12)
      }
      try { if let v = _storage._first1MinCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._first1DayCandleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      if _storage._forQualInvestorFlag != false {
        try visitor.visitSingularBoolField(value: _storage._forQualInvestorFlag, fieldNumber: 28)
      }
      if _storage._weekendFlag != false {
        try visitor.visitSingularBoolField(value: _storage._weekendFlag, fieldNumber: 29)
      }
      if _storage._blockedTcaFlag != false {
        try visitor.visitSingularBoolField(value: _storage._blockedTcaFlag, fieldNumber: 30)
      }
      if _storage._lot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lot, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort, rhs: Tinkoff_Public_Invest_Api_Contract_V1_InstrumentShort) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._ticker != rhs_storage._ticker {return false}
        if _storage._classCode != rhs_storage._classCode {return false}
        if _storage._instrumentType != rhs_storage._instrumentType {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._positionUid != rhs_storage._positionUid {return false}
        if _storage._instrumentKind != rhs_storage._instrumentKind {return false}
        if _storage._apiTradeAvailableFlag != rhs_storage._apiTradeAvailableFlag {return false}
        if _storage._forIisFlag != rhs_storage._forIisFlag {return false}
        if _storage._first1MinCandleDate != rhs_storage._first1MinCandleDate {return false}
        if _storage._first1DayCandleDate != rhs_storage._first1DayCandleDate {return false}
        if _storage._forQualInvestorFlag != rhs_storage._forQualInvestorFlag {return false}
        if _storage._weekendFlag != rhs_storage._weekendFlag {return false}
        if _storage._blockedTcaFlag != rhs_storage._blockedTcaFlag {return false}
        if _storage._lot != rhs_storage._lot {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBrandsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paging"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paging {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsRequest) -> Bool {
    if lhs._paging != rhs._paging {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBrandRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBrandsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "brands"),
    2: .same(proto: "paging"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.brands) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.brands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.brands, fieldNumber: 1)
    }
    try { if let v = self._paging {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetBrandsResponse) -> Bool {
    if lhs.brands != rhs.brands {return false}
    if lhs._paging != rhs._paging {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssetFundamentalsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsRequest) -> Bool {
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssetFundamentalsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fundamentals"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fundamentals) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fundamentals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fundamentals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse) -> Bool {
    if lhs.fundamentals != rhs.fundamentals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.StatisticResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.protoMessageName + ".StatisticResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_uid"),
    2: .same(proto: "currency"),
    3: .standard(proto: "market_capitalization"),
    4: .standard(proto: "high_price_last_52_weeks"),
    5: .standard(proto: "low_price_last_52_weeks"),
    6: .standard(proto: "average_daily_volume_last_10_days"),
    7: .standard(proto: "average_daily_volume_last_4_weeks"),
    8: .same(proto: "beta"),
    9: .standard(proto: "free_float"),
    10: .standard(proto: "forward_annual_dividend_yield"),
    11: .standard(proto: "shares_outstanding"),
    12: .standard(proto: "revenue_ttm"),
    13: .standard(proto: "ebitda_ttm"),
    14: .standard(proto: "net_income_ttm"),
    15: .standard(proto: "eps_ttm"),
    16: .standard(proto: "diluted_eps_ttm"),
    17: .standard(proto: "free_cash_flow_ttm"),
    18: .standard(proto: "five_year_annual_revenue_growth_rate"),
    19: .standard(proto: "three_year_annual_revenue_growth_rate"),
    20: .standard(proto: "pe_ratio_ttm"),
    21: .standard(proto: "price_to_sales_ttm"),
    22: .standard(proto: "price_to_book_ttm"),
    23: .standard(proto: "price_to_free_cash_flow_ttm"),
    24: .standard(proto: "total_enterprise_value_mrq"),
    25: .standard(proto: "ev_to_ebitda_mrq"),
    26: .standard(proto: "net_margin_mrq"),
    27: .standard(proto: "net_interest_margin_mrq"),
    28: .same(proto: "roe"),
    29: .same(proto: "roa"),
    30: .same(proto: "roic"),
    31: .standard(proto: "total_debt_mrq"),
    32: .standard(proto: "total_debt_to_equity_mrq"),
    33: .standard(proto: "total_debt_to_ebitda_mrq"),
    34: .standard(proto: "free_cash_flow_to_price"),
    35: .standard(proto: "net_debt_to_ebitda"),
    36: .standard(proto: "current_ratio_mrq"),
    37: .standard(proto: "fixed_charge_coverage_ratio_fy"),
    38: .standard(proto: "dividend_yield_daily_ttm"),
    39: .standard(proto: "dividend_rate_ttm"),
    40: .standard(proto: "dividends_per_share"),
    41: .standard(proto: "five_years_average_dividend_yield"),
    42: .standard(proto: "five_year_annual_dividend_growth_rate"),
    43: .standard(proto: "dividend_payout_ratio_fy"),
    44: .standard(proto: "buy_back_ttm"),
    45: .standard(proto: "one_year_annual_revenue_growth_rate"),
    46: .standard(proto: "domicile_indicator_code"),
    47: .standard(proto: "adr_to_common_share_ratio"),
    48: .standard(proto: "number_of_employees"),
    49: .standard(proto: "ex_dividend_date"),
    50: .standard(proto: "fiscal_period_start_date"),
    51: .standard(proto: "fiscal_period_end_date"),
    53: .standard(proto: "revenue_change_five_years"),
    54: .standard(proto: "eps_change_five_years"),
    55: .standard(proto: "ebitda_change_five_years"),
    56: .standard(proto: "total_debt_change_five_years"),
    57: .standard(proto: "ev_to_sales"),
  ]

  fileprivate class _StorageClass {
    var _assetUid: String = String()
    var _currency: String = String()
    var _marketCapitalization: Double = 0
    var _highPriceLast52Weeks: Double = 0
    var _lowPriceLast52Weeks: Double = 0
    var _averageDailyVolumeLast10Days: Double = 0
    var _averageDailyVolumeLast4Weeks: Double = 0
    var _beta: Double = 0
    var _freeFloat: Double = 0
    var _forwardAnnualDividendYield: Double = 0
    var _sharesOutstanding: Double = 0
    var _revenueTtm: Double = 0
    var _ebitdaTtm: Double = 0
    var _netIncomeTtm: Double = 0
    var _epsTtm: Double = 0
    var _dilutedEpsTtm: Double = 0
    var _freeCashFlowTtm: Double = 0
    var _fiveYearAnnualRevenueGrowthRate: Double = 0
    var _threeYearAnnualRevenueGrowthRate: Double = 0
    var _peRatioTtm: Double = 0
    var _priceToSalesTtm: Double = 0
    var _priceToBookTtm: Double = 0
    var _priceToFreeCashFlowTtm: Double = 0
    var _totalEnterpriseValueMrq: Double = 0
    var _evToEbitdaMrq: Double = 0
    var _netMarginMrq: Double = 0
    var _netInterestMarginMrq: Double = 0
    var _roe: Double = 0
    var _roa: Double = 0
    var _roic: Double = 0
    var _totalDebtMrq: Double = 0
    var _totalDebtToEquityMrq: Double = 0
    var _totalDebtToEbitdaMrq: Double = 0
    var _freeCashFlowToPrice: Double = 0
    var _netDebtToEbitda: Double = 0
    var _currentRatioMrq: Double = 0
    var _fixedChargeCoverageRatioFy: Double = 0
    var _dividendYieldDailyTtm: Double = 0
    var _dividendRateTtm: Double = 0
    var _dividendsPerShare: Double = 0
    var _fiveYearsAverageDividendYield: Double = 0
    var _fiveYearAnnualDividendGrowthRate: Double = 0
    var _dividendPayoutRatioFy: Double = 0
    var _buyBackTtm: Double = 0
    var _oneYearAnnualRevenueGrowthRate: Double = 0
    var _domicileIndicatorCode: String = String()
    var _adrToCommonShareRatio: Double = 0
    var _numberOfEmployees: Double = 0
    var _exDividendDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _fiscalPeriodStartDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _fiscalPeriodEndDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _revenueChangeFiveYears: Double = 0
    var _epsChangeFiveYears: Double = 0
    var _ebitdaChangeFiveYears: Double = 0
    var _totalDebtChangeFiveYears: Double = 0
    var _evToSales: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _assetUid = source._assetUid
      _currency = source._currency
      _marketCapitalization = source._marketCapitalization
      _highPriceLast52Weeks = source._highPriceLast52Weeks
      _lowPriceLast52Weeks = source._lowPriceLast52Weeks
      _averageDailyVolumeLast10Days = source._averageDailyVolumeLast10Days
      _averageDailyVolumeLast4Weeks = source._averageDailyVolumeLast4Weeks
      _beta = source._beta
      _freeFloat = source._freeFloat
      _forwardAnnualDividendYield = source._forwardAnnualDividendYield
      _sharesOutstanding = source._sharesOutstanding
      _revenueTtm = source._revenueTtm
      _ebitdaTtm = source._ebitdaTtm
      _netIncomeTtm = source._netIncomeTtm
      _epsTtm = source._epsTtm
      _dilutedEpsTtm = source._dilutedEpsTtm
      _freeCashFlowTtm = source._freeCashFlowTtm
      _fiveYearAnnualRevenueGrowthRate = source._fiveYearAnnualRevenueGrowthRate
      _threeYearAnnualRevenueGrowthRate = source._threeYearAnnualRevenueGrowthRate
      _peRatioTtm = source._peRatioTtm
      _priceToSalesTtm = source._priceToSalesTtm
      _priceToBookTtm = source._priceToBookTtm
      _priceToFreeCashFlowTtm = source._priceToFreeCashFlowTtm
      _totalEnterpriseValueMrq = source._totalEnterpriseValueMrq
      _evToEbitdaMrq = source._evToEbitdaMrq
      _netMarginMrq = source._netMarginMrq
      _netInterestMarginMrq = source._netInterestMarginMrq
      _roe = source._roe
      _roa = source._roa
      _roic = source._roic
      _totalDebtMrq = source._totalDebtMrq
      _totalDebtToEquityMrq = source._totalDebtToEquityMrq
      _totalDebtToEbitdaMrq = source._totalDebtToEbitdaMrq
      _freeCashFlowToPrice = source._freeCashFlowToPrice
      _netDebtToEbitda = source._netDebtToEbitda
      _currentRatioMrq = source._currentRatioMrq
      _fixedChargeCoverageRatioFy = source._fixedChargeCoverageRatioFy
      _dividendYieldDailyTtm = source._dividendYieldDailyTtm
      _dividendRateTtm = source._dividendRateTtm
      _dividendsPerShare = source._dividendsPerShare
      _fiveYearsAverageDividendYield = source._fiveYearsAverageDividendYield
      _fiveYearAnnualDividendGrowthRate = source._fiveYearAnnualDividendGrowthRate
      _dividendPayoutRatioFy = source._dividendPayoutRatioFy
      _buyBackTtm = source._buyBackTtm
      _oneYearAnnualRevenueGrowthRate = source._oneYearAnnualRevenueGrowthRate
      _domicileIndicatorCode = source._domicileIndicatorCode
      _adrToCommonShareRatio = source._adrToCommonShareRatio
      _numberOfEmployees = source._numberOfEmployees
      _exDividendDate = source._exDividendDate
      _fiscalPeriodStartDate = source._fiscalPeriodStartDate
      _fiscalPeriodEndDate = source._fiscalPeriodEndDate
      _revenueChangeFiveYears = source._revenueChangeFiveYears
      _epsChangeFiveYears = source._epsChangeFiveYears
      _ebitdaChangeFiveYears = source._ebitdaChangeFiveYears
      _totalDebtChangeFiveYears = source._totalDebtChangeFiveYears
      _evToSales = source._evToSales
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._marketCapitalization) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._highPriceLast52Weeks) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._lowPriceLast52Weeks) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._averageDailyVolumeLast10Days) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._averageDailyVolumeLast4Weeks) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._beta) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._freeFloat) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._forwardAnnualDividendYield) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._sharesOutstanding) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._revenueTtm) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._ebitdaTtm) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._netIncomeTtm) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._epsTtm) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._dilutedEpsTtm) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._freeCashFlowTtm) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._fiveYearAnnualRevenueGrowthRate) }()
        case 19: try { try decoder.decodeSingularDoubleField(value: &_storage._threeYearAnnualRevenueGrowthRate) }()
        case 20: try { try decoder.decodeSingularDoubleField(value: &_storage._peRatioTtm) }()
        case 21: try { try decoder.decodeSingularDoubleField(value: &_storage._priceToSalesTtm) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._priceToBookTtm) }()
        case 23: try { try decoder.decodeSingularDoubleField(value: &_storage._priceToFreeCashFlowTtm) }()
        case 24: try { try decoder.decodeSingularDoubleField(value: &_storage._totalEnterpriseValueMrq) }()
        case 25: try { try decoder.decodeSingularDoubleField(value: &_storage._evToEbitdaMrq) }()
        case 26: try { try decoder.decodeSingularDoubleField(value: &_storage._netMarginMrq) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._netInterestMarginMrq) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._roe) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._roa) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._roic) }()
        case 31: try { try decoder.decodeSingularDoubleField(value: &_storage._totalDebtMrq) }()
        case 32: try { try decoder.decodeSingularDoubleField(value: &_storage._totalDebtToEquityMrq) }()
        case 33: try { try decoder.decodeSingularDoubleField(value: &_storage._totalDebtToEbitdaMrq) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._freeCashFlowToPrice) }()
        case 35: try { try decoder.decodeSingularDoubleField(value: &_storage._netDebtToEbitda) }()
        case 36: try { try decoder.decodeSingularDoubleField(value: &_storage._currentRatioMrq) }()
        case 37: try { try decoder.decodeSingularDoubleField(value: &_storage._fixedChargeCoverageRatioFy) }()
        case 38: try { try decoder.decodeSingularDoubleField(value: &_storage._dividendYieldDailyTtm) }()
        case 39: try { try decoder.decodeSingularDoubleField(value: &_storage._dividendRateTtm) }()
        case 40: try { try decoder.decodeSingularDoubleField(value: &_storage._dividendsPerShare) }()
        case 41: try { try decoder.decodeSingularDoubleField(value: &_storage._fiveYearsAverageDividendYield) }()
        case 42: try { try decoder.decodeSingularDoubleField(value: &_storage._fiveYearAnnualDividendGrowthRate) }()
        case 43: try { try decoder.decodeSingularDoubleField(value: &_storage._dividendPayoutRatioFy) }()
        case 44: try { try decoder.decodeSingularDoubleField(value: &_storage._buyBackTtm) }()
        case 45: try { try decoder.decodeSingularDoubleField(value: &_storage._oneYearAnnualRevenueGrowthRate) }()
        case 46: try { try decoder.decodeSingularStringField(value: &_storage._domicileIndicatorCode) }()
        case 47: try { try decoder.decodeSingularDoubleField(value: &_storage._adrToCommonShareRatio) }()
        case 48: try { try decoder.decodeSingularDoubleField(value: &_storage._numberOfEmployees) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._exDividendDate) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._fiscalPeriodStartDate) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._fiscalPeriodEndDate) }()
        case 53: try { try decoder.decodeSingularDoubleField(value: &_storage._revenueChangeFiveYears) }()
        case 54: try { try decoder.decodeSingularDoubleField(value: &_storage._epsChangeFiveYears) }()
        case 55: try { try decoder.decodeSingularDoubleField(value: &_storage._ebitdaChangeFiveYears) }()
        case 56: try { try decoder.decodeSingularDoubleField(value: &_storage._totalDebtChangeFiveYears) }()
        case 57: try { try decoder.decodeSingularDoubleField(value: &_storage._evToSales) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 1)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 2)
      }
      if _storage._marketCapitalization != 0 {
        try visitor.visitSingularDoubleField(value: _storage._marketCapitalization, fieldNumber: 3)
      }
      if _storage._highPriceLast52Weeks != 0 {
        try visitor.visitSingularDoubleField(value: _storage._highPriceLast52Weeks, fieldNumber: 4)
      }
      if _storage._lowPriceLast52Weeks != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lowPriceLast52Weeks, fieldNumber: 5)
      }
      if _storage._averageDailyVolumeLast10Days != 0 {
        try visitor.visitSingularDoubleField(value: _storage._averageDailyVolumeLast10Days, fieldNumber: 6)
      }
      if _storage._averageDailyVolumeLast4Weeks != 0 {
        try visitor.visitSingularDoubleField(value: _storage._averageDailyVolumeLast4Weeks, fieldNumber: 7)
      }
      if _storage._beta != 0 {
        try visitor.visitSingularDoubleField(value: _storage._beta, fieldNumber: 8)
      }
      if _storage._freeFloat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._freeFloat, fieldNumber: 9)
      }
      if _storage._forwardAnnualDividendYield != 0 {
        try visitor.visitSingularDoubleField(value: _storage._forwardAnnualDividendYield, fieldNumber: 10)
      }
      if _storage._sharesOutstanding != 0 {
        try visitor.visitSingularDoubleField(value: _storage._sharesOutstanding, fieldNumber: 11)
      }
      if _storage._revenueTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._revenueTtm, fieldNumber: 12)
      }
      if _storage._ebitdaTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ebitdaTtm, fieldNumber: 13)
      }
      if _storage._netIncomeTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._netIncomeTtm, fieldNumber: 14)
      }
      if _storage._epsTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._epsTtm, fieldNumber: 15)
      }
      if _storage._dilutedEpsTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dilutedEpsTtm, fieldNumber: 16)
      }
      if _storage._freeCashFlowTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._freeCashFlowTtm, fieldNumber: 17)
      }
      if _storage._fiveYearAnnualRevenueGrowthRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._fiveYearAnnualRevenueGrowthRate, fieldNumber: 18)
      }
      if _storage._threeYearAnnualRevenueGrowthRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._threeYearAnnualRevenueGrowthRate, fieldNumber: 19)
      }
      if _storage._peRatioTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._peRatioTtm, fieldNumber: 20)
      }
      if _storage._priceToSalesTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._priceToSalesTtm, fieldNumber: 21)
      }
      if _storage._priceToBookTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._priceToBookTtm, fieldNumber: 22)
      }
      if _storage._priceToFreeCashFlowTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._priceToFreeCashFlowTtm, fieldNumber: 23)
      }
      if _storage._totalEnterpriseValueMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalEnterpriseValueMrq, fieldNumber: 24)
      }
      if _storage._evToEbitdaMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._evToEbitdaMrq, fieldNumber: 25)
      }
      if _storage._netMarginMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._netMarginMrq, fieldNumber: 26)
      }
      if _storage._netInterestMarginMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._netInterestMarginMrq, fieldNumber: 27)
      }
      if _storage._roe != 0 {
        try visitor.visitSingularDoubleField(value: _storage._roe, fieldNumber: 28)
      }
      if _storage._roa != 0 {
        try visitor.visitSingularDoubleField(value: _storage._roa, fieldNumber: 29)
      }
      if _storage._roic != 0 {
        try visitor.visitSingularDoubleField(value: _storage._roic, fieldNumber: 30)
      }
      if _storage._totalDebtMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalDebtMrq, fieldNumber: 31)
      }
      if _storage._totalDebtToEquityMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalDebtToEquityMrq, fieldNumber: 32)
      }
      if _storage._totalDebtToEbitdaMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalDebtToEbitdaMrq, fieldNumber: 33)
      }
      if _storage._freeCashFlowToPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._freeCashFlowToPrice, fieldNumber: 34)
      }
      if _storage._netDebtToEbitda != 0 {
        try visitor.visitSingularDoubleField(value: _storage._netDebtToEbitda, fieldNumber: 35)
      }
      if _storage._currentRatioMrq != 0 {
        try visitor.visitSingularDoubleField(value: _storage._currentRatioMrq, fieldNumber: 36)
      }
      if _storage._fixedChargeCoverageRatioFy != 0 {
        try visitor.visitSingularDoubleField(value: _storage._fixedChargeCoverageRatioFy, fieldNumber: 37)
      }
      if _storage._dividendYieldDailyTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dividendYieldDailyTtm, fieldNumber: 38)
      }
      if _storage._dividendRateTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dividendRateTtm, fieldNumber: 39)
      }
      if _storage._dividendsPerShare != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dividendsPerShare, fieldNumber: 40)
      }
      if _storage._fiveYearsAverageDividendYield != 0 {
        try visitor.visitSingularDoubleField(value: _storage._fiveYearsAverageDividendYield, fieldNumber: 41)
      }
      if _storage._fiveYearAnnualDividendGrowthRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._fiveYearAnnualDividendGrowthRate, fieldNumber: 42)
      }
      if _storage._dividendPayoutRatioFy != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dividendPayoutRatioFy, fieldNumber: 43)
      }
      if _storage._buyBackTtm != 0 {
        try visitor.visitSingularDoubleField(value: _storage._buyBackTtm, fieldNumber: 44)
      }
      if _storage._oneYearAnnualRevenueGrowthRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._oneYearAnnualRevenueGrowthRate, fieldNumber: 45)
      }
      if !_storage._domicileIndicatorCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domicileIndicatorCode, fieldNumber: 46)
      }
      if _storage._adrToCommonShareRatio != 0 {
        try visitor.visitSingularDoubleField(value: _storage._adrToCommonShareRatio, fieldNumber: 47)
      }
      if _storage._numberOfEmployees != 0 {
        try visitor.visitSingularDoubleField(value: _storage._numberOfEmployees, fieldNumber: 48)
      }
      try { if let v = _storage._exDividendDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      } }()
      try { if let v = _storage._fiscalPeriodStartDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._fiscalPeriodEndDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      } }()
      if _storage._revenueChangeFiveYears != 0 {
        try visitor.visitSingularDoubleField(value: _storage._revenueChangeFiveYears, fieldNumber: 53)
      }
      if _storage._epsChangeFiveYears != 0 {
        try visitor.visitSingularDoubleField(value: _storage._epsChangeFiveYears, fieldNumber: 54)
      }
      if _storage._ebitdaChangeFiveYears != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ebitdaChangeFiveYears, fieldNumber: 55)
      }
      if _storage._totalDebtChangeFiveYears != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalDebtChangeFiveYears, fieldNumber: 56)
      }
      if _storage._evToSales != 0 {
        try visitor.visitSingularDoubleField(value: _storage._evToSales, fieldNumber: 57)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.StatisticResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetFundamentalsResponse.StatisticResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._marketCapitalization != rhs_storage._marketCapitalization {return false}
        if _storage._highPriceLast52Weeks != rhs_storage._highPriceLast52Weeks {return false}
        if _storage._lowPriceLast52Weeks != rhs_storage._lowPriceLast52Weeks {return false}
        if _storage._averageDailyVolumeLast10Days != rhs_storage._averageDailyVolumeLast10Days {return false}
        if _storage._averageDailyVolumeLast4Weeks != rhs_storage._averageDailyVolumeLast4Weeks {return false}
        if _storage._beta != rhs_storage._beta {return false}
        if _storage._freeFloat != rhs_storage._freeFloat {return false}
        if _storage._forwardAnnualDividendYield != rhs_storage._forwardAnnualDividendYield {return false}
        if _storage._sharesOutstanding != rhs_storage._sharesOutstanding {return false}
        if _storage._revenueTtm != rhs_storage._revenueTtm {return false}
        if _storage._ebitdaTtm != rhs_storage._ebitdaTtm {return false}
        if _storage._netIncomeTtm != rhs_storage._netIncomeTtm {return false}
        if _storage._epsTtm != rhs_storage._epsTtm {return false}
        if _storage._dilutedEpsTtm != rhs_storage._dilutedEpsTtm {return false}
        if _storage._freeCashFlowTtm != rhs_storage._freeCashFlowTtm {return false}
        if _storage._fiveYearAnnualRevenueGrowthRate != rhs_storage._fiveYearAnnualRevenueGrowthRate {return false}
        if _storage._threeYearAnnualRevenueGrowthRate != rhs_storage._threeYearAnnualRevenueGrowthRate {return false}
        if _storage._peRatioTtm != rhs_storage._peRatioTtm {return false}
        if _storage._priceToSalesTtm != rhs_storage._priceToSalesTtm {return false}
        if _storage._priceToBookTtm != rhs_storage._priceToBookTtm {return false}
        if _storage._priceToFreeCashFlowTtm != rhs_storage._priceToFreeCashFlowTtm {return false}
        if _storage._totalEnterpriseValueMrq != rhs_storage._totalEnterpriseValueMrq {return false}
        if _storage._evToEbitdaMrq != rhs_storage._evToEbitdaMrq {return false}
        if _storage._netMarginMrq != rhs_storage._netMarginMrq {return false}
        if _storage._netInterestMarginMrq != rhs_storage._netInterestMarginMrq {return false}
        if _storage._roe != rhs_storage._roe {return false}
        if _storage._roa != rhs_storage._roa {return false}
        if _storage._roic != rhs_storage._roic {return false}
        if _storage._totalDebtMrq != rhs_storage._totalDebtMrq {return false}
        if _storage._totalDebtToEquityMrq != rhs_storage._totalDebtToEquityMrq {return false}
        if _storage._totalDebtToEbitdaMrq != rhs_storage._totalDebtToEbitdaMrq {return false}
        if _storage._freeCashFlowToPrice != rhs_storage._freeCashFlowToPrice {return false}
        if _storage._netDebtToEbitda != rhs_storage._netDebtToEbitda {return false}
        if _storage._currentRatioMrq != rhs_storage._currentRatioMrq {return false}
        if _storage._fixedChargeCoverageRatioFy != rhs_storage._fixedChargeCoverageRatioFy {return false}
        if _storage._dividendYieldDailyTtm != rhs_storage._dividendYieldDailyTtm {return false}
        if _storage._dividendRateTtm != rhs_storage._dividendRateTtm {return false}
        if _storage._dividendsPerShare != rhs_storage._dividendsPerShare {return false}
        if _storage._fiveYearsAverageDividendYield != rhs_storage._fiveYearsAverageDividendYield {return false}
        if _storage._fiveYearAnnualDividendGrowthRate != rhs_storage._fiveYearAnnualDividendGrowthRate {return false}
        if _storage._dividendPayoutRatioFy != rhs_storage._dividendPayoutRatioFy {return false}
        if _storage._buyBackTtm != rhs_storage._buyBackTtm {return false}
        if _storage._oneYearAnnualRevenueGrowthRate != rhs_storage._oneYearAnnualRevenueGrowthRate {return false}
        if _storage._domicileIndicatorCode != rhs_storage._domicileIndicatorCode {return false}
        if _storage._adrToCommonShareRatio != rhs_storage._adrToCommonShareRatio {return false}
        if _storage._numberOfEmployees != rhs_storage._numberOfEmployees {return false}
        if _storage._exDividendDate != rhs_storage._exDividendDate {return false}
        if _storage._fiscalPeriodStartDate != rhs_storage._fiscalPeriodStartDate {return false}
        if _storage._fiscalPeriodEndDate != rhs_storage._fiscalPeriodEndDate {return false}
        if _storage._revenueChangeFiveYears != rhs_storage._revenueChangeFiveYears {return false}
        if _storage._epsChangeFiveYears != rhs_storage._epsChangeFiveYears {return false}
        if _storage._ebitdaChangeFiveYears != rhs_storage._ebitdaChangeFiveYears {return false}
        if _storage._totalDebtChangeFiveYears != rhs_storage._totalDebtChangeFiveYears {return false}
        if _storage._evToSales != rhs_storage._evToSales {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssetReportsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_id"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsRequest) -> Bool {
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssetReportsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.AssetReportPeriodType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_TYPE_UNSPECIFIED"),
    1: .same(proto: "PERIOD_TYPE_QUARTER"),
    2: .same(proto: "PERIOD_TYPE_SEMIANNUAL"),
    3: .same(proto: "PERIOD_TYPE_ANNUAL"),
  ]
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.GetAssetReportsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.protoMessageName + ".GetAssetReportsEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_id"),
    2: .standard(proto: "report_date"),
    3: .standard(proto: "period_year"),
    4: .standard(proto: "period_num"),
    5: .standard(proto: "period_type"),
    6: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._reportDate) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.periodYear) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.periodNum) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.periodType) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 1)
    }
    try { if let v = self._reportDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.periodYear != 0 {
      try visitor.visitSingularInt32Field(value: self.periodYear, fieldNumber: 3)
    }
    if self.periodNum != 0 {
      try visitor.visitSingularInt32Field(value: self.periodNum, fieldNumber: 4)
    }
    if self.periodType != .periodTypeUnspecified {
      try visitor.visitSingularEnumField(value: self.periodType, fieldNumber: 5)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.GetAssetReportsEvent, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetAssetReportsResponse.GetAssetReportsEvent) -> Bool {
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs._reportDate != rhs._reportDate {return false}
    if lhs.periodYear != rhs.periodYear {return false}
    if lhs.periodNum != rhs.periodNum {return false}
    if lhs.periodType != rhs.periodType {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetConsensusForecastsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paging"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paging {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsRequest) -> Bool {
    if lhs._paging != rhs._paging {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetConsensusForecastsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._page) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try { if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.ConsensusForecastsItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.protoMessageName + ".ConsensusForecastsItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "asset_uid"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "best_target_price"),
    5: .standard(proto: "best_target_low"),
    6: .standard(proto: "best_target_high"),
    7: .standard(proto: "total_buy_recommend"),
    8: .standard(proto: "total_hold_recommend"),
    9: .standard(proto: "total_sell_recommend"),
    10: .same(proto: "currency"),
    11: .same(proto: "consensus"),
    12: .standard(proto: "prognosis_date"),
  ]

  fileprivate class _StorageClass {
    var _uid: String = String()
    var _assetUid: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _bestTargetPrice: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _bestTargetLow: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _bestTargetHigh: Tinkoff_Public_Invest_Api_Contract_V1_Quotation? = nil
    var _totalBuyRecommend: Int32 = 0
    var _totalHoldRecommend: Int32 = 0
    var _totalSellRecommend: Int32 = 0
    var _currency: String = String()
    var _consensus: Tinkoff_Public_Invest_Api_Contract_V1_Recommendation = .unspecified
    var _prognosisDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _assetUid = source._assetUid
      _createdAt = source._createdAt
      _bestTargetPrice = source._bestTargetPrice
      _bestTargetLow = source._bestTargetLow
      _bestTargetHigh = source._bestTargetHigh
      _totalBuyRecommend = source._totalBuyRecommend
      _totalHoldRecommend = source._totalHoldRecommend
      _totalSellRecommend = source._totalSellRecommend
      _currency = source._currency
      _consensus = source._consensus
      _prognosisDate = source._prognosisDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._assetUid) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._bestTargetPrice) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._bestTargetLow) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._bestTargetHigh) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._totalBuyRecommend) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._totalHoldRecommend) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._totalSellRecommend) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._consensus) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._prognosisDate) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 1)
      }
      if !_storage._assetUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetUid, fieldNumber: 2)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._bestTargetPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._bestTargetLow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._bestTargetHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._totalBuyRecommend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalBuyRecommend, fieldNumber: 7)
      }
      if _storage._totalHoldRecommend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalHoldRecommend, fieldNumber: 8)
      }
      if _storage._totalSellRecommend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalSellRecommend, fieldNumber: 9)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 10)
      }
      if _storage._consensus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._consensus, fieldNumber: 11)
      }
      try { if let v = _storage._prognosisDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.ConsensusForecastsItem, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetConsensusForecastsResponse.ConsensusForecastsItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._assetUid != rhs_storage._assetUid {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._bestTargetPrice != rhs_storage._bestTargetPrice {return false}
        if _storage._bestTargetLow != rhs_storage._bestTargetLow {return false}
        if _storage._bestTargetHigh != rhs_storage._bestTargetHigh {return false}
        if _storage._totalBuyRecommend != rhs_storage._totalBuyRecommend {return false}
        if _storage._totalHoldRecommend != rhs_storage._totalHoldRecommend {return false}
        if _storage._totalSellRecommend != rhs_storage._totalSellRecommend {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._consensus != rhs_storage._consensus {return false}
        if _storage._prognosisDate != rhs_storage._prognosisDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetForecastRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastRequest) -> Bool {
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetForecastResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targets"),
    2: .same(proto: "consensus"),
  ]

  fileprivate class _StorageClass {
    var _targets: [Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem] = []
    var _consensus: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targets = source._targets
      _consensus = source._consensus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._targets) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._consensus) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._targets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._targets, fieldNumber: 1)
      }
      try { if let v = _storage._consensus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targets != rhs_storage._targets {return false}
        if _storage._consensus != rhs_storage._consensus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.protoMessageName + ".TargetItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "ticker"),
    3: .same(proto: "company"),
    4: .same(proto: "recommendation"),
    5: .standard(proto: "recommendation_date"),
    6: .same(proto: "currency"),
    7: .standard(proto: "current_price"),
    8: .standard(proto: "target_price"),
    9: .standard(proto: "price_change"),
    10: .standard(proto: "price_change_rel"),
    11: .standard(proto: "show_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.company) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.recommendation) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._recommendationDate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._currentPrice) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._targetPrice) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._priceChange) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._priceChangeRel) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.showName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 2)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 3)
    }
    if self.recommendation != .unspecified {
      try visitor.visitSingularEnumField(value: self.recommendation, fieldNumber: 4)
    }
    try { if let v = self._recommendationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 6)
    }
    try { if let v = self._currentPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._targetPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._priceChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._priceChangeRel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if !self.showName.isEmpty {
      try visitor.visitSingularStringField(value: self.showName, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.TargetItem) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.company != rhs.company {return false}
    if lhs.recommendation != rhs.recommendation {return false}
    if lhs._recommendationDate != rhs._recommendationDate {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs._currentPrice != rhs._currentPrice {return false}
    if lhs._targetPrice != rhs._targetPrice {return false}
    if lhs._priceChange != rhs._priceChange {return false}
    if lhs._priceChangeRel != rhs._priceChangeRel {return false}
    if lhs.showName != rhs.showName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.protoMessageName + ".ConsensusItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "ticker"),
    3: .same(proto: "recommendation"),
    4: .same(proto: "currency"),
    5: .standard(proto: "current_price"),
    6: .same(proto: "consensus"),
    7: .standard(proto: "min_target"),
    8: .standard(proto: "max_target"),
    9: .standard(proto: "price_change"),
    10: .standard(proto: "price_change_rel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.recommendation) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._currentPrice) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._consensus) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._minTarget) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._maxTarget) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._priceChange) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._priceChangeRel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 2)
    }
    if self.recommendation != .unspecified {
      try visitor.visitSingularEnumField(value: self.recommendation, fieldNumber: 3)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 4)
    }
    try { if let v = self._currentPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._consensus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._minTarget {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._maxTarget {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._priceChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._priceChangeRel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem, rhs: Tinkoff_Public_Invest_Api_Contract_V1_GetForecastResponse.ConsensusItem) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.recommendation != rhs.recommendation {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs._currentPrice != rhs._currentPrice {return false}
    if lhs._consensus != rhs._consensus {return false}
    if lhs._minTarget != rhs._minTarget {return false}
    if lhs._maxTarget != rhs._maxTarget {return false}
    if lhs._priceChange != rhs._priceChange {return false}
    if lhs._priceChangeRel != rhs._priceChangeRel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RiskRatesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.instrumentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesRequest, rhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesRequest) -> Bool {
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RiskRatesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_risk_rates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instrumentRiskRates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentRiskRates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instrumentRiskRates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse, rhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse) -> Bool {
    if lhs.instrumentRiskRates != rhs.instrumentRiskRates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRateResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.protoMessageName + ".RiskRateResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_uid"),
    2: .standard(proto: "short_risk_rate"),
    3: .standard(proto: "long_risk_rate"),
    5: .standard(proto: "short_risk_rates"),
    6: .standard(proto: "long_risk_rates"),
    9: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instrumentUid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shortRiskRate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._longRiskRate) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.shortRiskRates) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.longRiskRates) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.instrumentUid.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentUid, fieldNumber: 1)
    }
    try { if let v = self._shortRiskRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._longRiskRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.shortRiskRates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shortRiskRates, fieldNumber: 5)
    }
    if !self.longRiskRates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.longRiskRates, fieldNumber: 6)
    }
    try { if let v = self._error {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRateResult, rhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRateResult) -> Bool {
    if lhs.instrumentUid != rhs.instrumentUid {return false}
    if lhs._shortRiskRate != rhs._shortRiskRate {return false}
    if lhs._longRiskRate != rhs._longRiskRate {return false}
    if lhs.shortRiskRates != rhs.shortRiskRates {return false}
    if lhs.longRiskRates != rhs.longRiskRates {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.protoMessageName + ".RiskRate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "risk_level_code"),
    5: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.riskLevelCode) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.riskLevelCode.isEmpty {
      try visitor.visitSingularStringField(value: self.riskLevelCode, fieldNumber: 2)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate, rhs: Tinkoff_Public_Invest_Api_Contract_V1_RiskRatesResponse.RiskRate) -> Bool {
    if lhs.riskLevelCode != rhs.riskLevelCode {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingInterval"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._interval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._interval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._interval != rhs._interval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.protoMessageName + ".TimeInterval"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_ts"),
    2: .standard(proto: "end_ts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._endTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval, rhs: Tinkoff_Public_Invest_Api_Contract_V1_TradingInterval.TimeInterval) -> Bool {
    if lhs._startTs != rhs._startTs {return false}
    if lhs._endTs != rhs._endTs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
